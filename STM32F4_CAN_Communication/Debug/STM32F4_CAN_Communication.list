
STM32F4_CAN_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c8  080043c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043d0  080043d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000015c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001898  00000000  00000000  0002a24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007b8  00000000  00000000  0002c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f582  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000099bb  00000000  00000000  0004c072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb9c8  00000000  00000000  00055a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001113f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002938  00000000  00000000  00111448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042d0 	.word	0x080042d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080042d0 	.word	0x080042d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2102      	movs	r1, #2
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000582:	f001 fe57 	bl	8002234 <HAL_GPIO_WritePin>
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Node1_RxHeader, Node1_RxData);
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800058a:	2100      	movs	r1, #0
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f001 f846 	bl	800161e <HAL_CAN_GetRxMessage>
  if (Node1_RxHeader.DLC == 8)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	2b08      	cmp	r3, #8
 8000598:	d108      	bne.n	80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
  {
    printf("Node1 get data: %s\r\n", Node1_RxData);
 800059a:	4907      	ldr	r1, [pc, #28]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800059e:	f002 ff09 	bl	80033b4 <iprintf>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005a8:	f001 fe44 	bl	8002234 <HAL_GPIO_WritePin>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020400 	.word	0x40020400
 80005b8:	2000015c 	.word	0x2000015c
 80005bc:	20000138 	.word	0x20000138
 80005c0:	080042e8 	.word	0x080042e8

080005c4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2104      	movs	r1, #4
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80005d2:	f001 fe2f 	bl	8002234 <HAL_GPIO_WritePin>
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Node2_RxHeader, Node2_RxData);
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80005da:	2101      	movs	r1, #1
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f001 f81e 	bl	800161e <HAL_CAN_GetRxMessage>
  if (Node2_RxHeader.DLC == 8)
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	2b08      	cmp	r3, #8
 80005e8:	d108      	bne.n	80005fc <HAL_CAN_RxFifo1MsgPendingCallback+0x38>
  {
    printf("Node 2 get data: %s\r\n", Node2_RxData);
 80005ea:	4907      	ldr	r1, [pc, #28]	; (8000608 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80005ee:	f002 fee1 	bl	80033b4 <iprintf>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2104      	movs	r1, #4
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80005f8:	f001 fe1c 	bl	8002234 <HAL_GPIO_WritePin>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400
 8000608:	200001a4 	.word	0x200001a4
 800060c:	20000180 	.word	0x20000180
 8000610:	08004300 	.word	0x08004300

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fc70 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f888 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f9c6 	bl	80009b0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000624:	f000 f8ee 	bl	8000804 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000628:	f000 f942 	bl	80008b0 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 800062c:	f000 f996 	bl	800095c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000630:	4836      	ldr	r0, [pc, #216]	; (800070c <main+0xf8>)
 8000632:	f000 fed5 	bl	80013e0 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000636:	4836      	ldr	r0, [pc, #216]	; (8000710 <main+0xfc>)
 8000638:	f000 fed2 	bl	80013e0 <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800063c:	2102      	movs	r1, #2
 800063e:	4833      	ldr	r0, [pc, #204]	; (800070c <main+0xf8>)
 8000640:	f001 f8ff 	bl	8001842 <HAL_CAN_ActivateNotification>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000644:	2110      	movs	r1, #16
 8000646:	4832      	ldr	r0, [pc, #200]	; (8000710 <main+0xfc>)
 8000648:	f001 f8fb 	bl	8001842 <HAL_CAN_ActivateNotification>


  Node1_TxHeader.DLC = 8;  // data length
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <main+0x100>)
 800064e:	2208      	movs	r2, #8
 8000650:	611a      	str	r2, [r3, #16]
  Node1_TxHeader.IDE = CAN_ID_STD;
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <main+0x100>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  Node1_TxHeader.RTR = CAN_RTR_DATA;
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <main+0x100>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  Node1_TxHeader.StdId = 0x555;  // ID
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <main+0x100>)
 8000660:	f240 5255 	movw	r2, #1365	; 0x555
 8000664:	601a      	str	r2, [r3, #0]


  Node1_TxData[0] = 'H';
 8000666:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <main+0x104>)
 8000668:	2248      	movs	r2, #72	; 0x48
 800066a:	701a      	strb	r2, [r3, #0]
  Node1_TxData[1] = 'i';
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <main+0x104>)
 800066e:	2269      	movs	r2, #105	; 0x69
 8000670:	705a      	strb	r2, [r3, #1]
  Node1_TxData[2] = ' ';
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <main+0x104>)
 8000674:	2220      	movs	r2, #32
 8000676:	709a      	strb	r2, [r3, #2]
  Node1_TxData[3] = 'C';
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <main+0x104>)
 800067a:	2243      	movs	r2, #67	; 0x43
 800067c:	70da      	strb	r2, [r3, #3]
  Node1_TxData[4] = 'E';
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <main+0x104>)
 8000680:	2245      	movs	r2, #69	; 0x45
 8000682:	711a      	strb	r2, [r3, #4]
  Node1_TxData[5] = '4';
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <main+0x104>)
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	715a      	strb	r2, [r3, #5]
  Node1_TxData[6] = '3';
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <main+0x104>)
 800068c:	2233      	movs	r2, #51	; 0x33
 800068e:	719a      	strb	r2, [r3, #6]
  Node1_TxData[7] = '7';
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <main+0x104>)
 8000692:	2237      	movs	r2, #55	; 0x37
 8000694:	71da      	strb	r2, [r3, #7]

  Node2_TxHeader.DLC = 8;  // data length
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <main+0x108>)
 8000698:	2208      	movs	r2, #8
 800069a:	611a      	str	r2, [r3, #16]
  Node2_TxHeader.IDE = CAN_ID_STD;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <main+0x108>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  Node2_TxHeader.RTR = CAN_RTR_DATA;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <main+0x108>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  Node2_TxHeader.StdId = 0x2AA;  // ID
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <main+0x108>)
 80006aa:	f240 22aa 	movw	r2, #682	; 0x2aa
 80006ae:	601a      	str	r2, [r3, #0]


  Node2_TxData[0] = 'B';
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <main+0x10c>)
 80006b2:	2242      	movs	r2, #66	; 0x42
 80006b4:	701a      	strb	r2, [r3, #0]
  Node2_TxData[1] = 'y';
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <main+0x10c>)
 80006b8:	2279      	movs	r2, #121	; 0x79
 80006ba:	705a      	strb	r2, [r3, #1]
  Node2_TxData[2] = 'e';
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <main+0x10c>)
 80006be:	2265      	movs	r2, #101	; 0x65
 80006c0:	709a      	strb	r2, [r3, #2]
  Node2_TxData[3] = ' ';
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <main+0x10c>)
 80006c4:	2220      	movs	r2, #32
 80006c6:	70da      	strb	r2, [r3, #3]
  Node2_TxData[4] = 'B';
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <main+0x10c>)
 80006ca:	2242      	movs	r2, #66	; 0x42
 80006cc:	711a      	strb	r2, [r3, #4]
  Node2_TxData[5] = 'y';
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <main+0x10c>)
 80006d0:	2279      	movs	r2, #121	; 0x79
 80006d2:	715a      	strb	r2, [r3, #5]
  Node2_TxData[6] = 'e';
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <main+0x10c>)
 80006d6:	2265      	movs	r2, #101	; 0x65
 80006d8:	719a      	strb	r2, [r3, #6]
  Node2_TxData[7] = '!';
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <main+0x10c>)
 80006dc:	2221      	movs	r2, #33	; 0x21
 80006de:	71da      	strb	r2, [r3, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED0_Pin);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <main+0x110>)
 80006e4:	f001 fdbf 	bl	8002266 <HAL_GPIO_TogglePin>
	  HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData, &Node1_TxMailbox);
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <main+0x114>)
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <main+0x104>)
 80006ec:	4909      	ldr	r1, [pc, #36]	; (8000714 <main+0x100>)
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <main+0xf8>)
 80006f0:	f000 feba 	bl	8001468 <HAL_CAN_AddTxMessage>
	  HAL_CAN_AddTxMessage(&hcan2, &Node2_TxHeader, Node2_TxData, &Node2_TxMailbox);
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <main+0x118>)
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <main+0x10c>)
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <main+0x108>)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <main+0xfc>)
 80006fc:	f000 feb4 	bl	8001468 <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 8000700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000704:	f000 fc6c 	bl	8000fe0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED0_Pin);
 8000708:	e7ea      	b.n	80006e0 <main+0xcc>
 800070a:	bf00      	nop
 800070c:	2000008c 	.word	0x2000008c
 8000710:	200000b4 	.word	0x200000b4
 8000714:	20000120 	.word	0x20000120
 8000718:	20000154 	.word	0x20000154
 800071c:	20000168 	.word	0x20000168
 8000720:	2000019c 	.word	0x2000019c
 8000724:	40020400 	.word	0x40020400
 8000728:	20000164 	.word	0x20000164
 800072c:	200001ac 	.word	0x200001ac

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fe30 	bl	80033a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a4:	23a8      	movs	r3, #168	; 0xa8
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fd71 	bl	800229c <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 f958 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2105      	movs	r1, #5
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 ffd2 	bl	800278c <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ee:	f000 f941 	bl	8000a74 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <MX_CAN1_Init+0xa8>)
 800080e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_CAN1_Init+0xa4>)
 8000812:	2204      	movs	r2, #4
 8000814:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_CAN1_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800081e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000822:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_CAN1_Init+0xa4>)
 8000826:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800082a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800082e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000832:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_CAN1_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800083c:	2201      	movs	r2, #1
 800083e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_CAN1_Init+0xa4>)
 8000842:	2201      	movs	r2, #1
 8000844:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_CAN1_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_CAN1_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800085a:	f000 fbe5 	bl	8001028 <HAL_CAN_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000864:	f000 f906 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800086c:	2312      	movs	r3, #18
 800086e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x2AA<<5;
 8000874:	f245 5340 	movw	r3, #21824	; 0x5540
 8000878:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x2AA<<5;
 800087e:	f245 5340 	movw	r3, #21824	; 0x5540
 8000882:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000890:	2314      	movs	r3, #20
 8000892:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800089a:	f000 fcc1 	bl	8001220 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	40006400 	.word	0x40006400

080008b0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008b8:	4a27      	ldr	r2, [pc, #156]	; (8000958 <MX_CAN2_Init+0xa8>)
 80008ba:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008be:	2204      	movs	r2, #4
 80008c0:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008ce:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008d2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80008d6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008da:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008de:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_CAN2_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_CAN2_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_CAN2_Init+0xa4>)
 8000906:	f000 fb8f 	bl	8001028 <HAL_CAN_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8000910:	f000 f8b0 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000918:	230a      	movs	r3, #10
 800091a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x555<<5;
 8000920:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
 8000924:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x555<<5;
 800092a:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
 800092e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000938:	2301      	movs	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_CAN2_Init+0xa4>)
 8000946:	f000 fc6b 	bl	8001220 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000b4 	.word	0x200000b4
 8000958:	40006800 	.word	0x40006800

0800095c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART1_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000994:	f002 f91a 	bl	8002bcc <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f869 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000dc 	.word	0x200000dc
 80009ac:	40011000 	.word	0x40011000

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_GPIO_Init+0x98>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <MX_GPIO_Init+0x98>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_GPIO_Init+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_GPIO_Init+0x98>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <MX_GPIO_Init+0x98>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x98>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_GPIO_Init+0x98>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <MX_GPIO_Init+0x98>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_GPIO_Init+0x98>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x9c>)
 8000a20:	f001 fc08 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000a24:	230f      	movs	r3, #15
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0x9c>)
 8000a3c:	f001 fa5e 	bl	8001efc <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400

08000a50 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8000a58:	1d39      	adds	r1, r7, #4
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <__io_putchar+0x20>)
 8000a60:	f002 f901 	bl	8002c66 <HAL_UART_Transmit>
  return ch;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000dc 	.word	0x200000dc

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a4a      	ldr	r2, [pc, #296]	; (8000c18 <HAL_CAN_MspInit+0x148>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d13e      	bne.n	8000b70 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000af2:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <HAL_CAN_MspInit+0x14c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <HAL_CAN_MspInit+0x14c>)
 8000afa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000afc:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <HAL_CAN_MspInit+0x14c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d10d      	bne.n	8000b20 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	4b45      	ldr	r3, [pc, #276]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a44      	ldr	r2, [pc, #272]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	4b3e      	ldr	r3, [pc, #248]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a3d      	ldr	r2, [pc, #244]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b4e:	2309      	movs	r3, #9
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4832      	ldr	r0, [pc, #200]	; (8000c24 <HAL_CAN_MspInit+0x154>)
 8000b5a:	f001 f9cf 	bl	8001efc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2014      	movs	r0, #20
 8000b64:	f001 f993 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b68:	2014      	movs	r0, #20
 8000b6a:	f001 f9ac 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b6e:	e04f      	b.n	8000c10 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a2c      	ldr	r2, [pc, #176]	; (8000c28 <HAL_CAN_MspInit+0x158>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d14a      	bne.n	8000c10 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <HAL_CAN_MspInit+0x14c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_CAN_MspInit+0x14c>)
 8000b9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_CAN_MspInit+0x14c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d10d      	bne.n	8000bc4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_CAN_MspInit+0x150>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000bf0:	2309      	movs	r3, #9
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <HAL_CAN_MspInit+0x15c>)
 8000bfc:	f001 f97e 	bl	8001efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2041      	movs	r0, #65	; 0x41
 8000c06:	f001 f942 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000c0a:	2041      	movs	r0, #65	; 0x41
 8000c0c:	f001 f95b 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
}
 8000c10:	bf00      	nop
 8000c12:	3730      	adds	r7, #48	; 0x30
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40006400 	.word	0x40006400
 8000c1c:	200001b0 	.word	0x200001b0
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40006800 	.word	0x40006800
 8000c2c:	40020400 	.word	0x40020400

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca8:	f001 f928 	bl	8001efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f948 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <CAN1_RX0_IRQHandler+0x10>)
 8000d1a:	f000 fdb8 	bl	800188e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000008c 	.word	0x2000008c

08000d28 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <CAN2_RX1_IRQHandler+0x10>)
 8000d2e:	f000 fdae 	bl	800188e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000b4 	.word	0x200000b4

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e009      	b.n	8000d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe5d 	bl	8000a50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf1      	blt.n	8000d88 <_write+0x12>
	}
	return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f002 fa82 	bl	8003350 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200001b4 	.word	0x200001b4
 8000e80:	200001d0 	.word	0x200001d0

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd7 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 fa41 	bl	800335c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fb9b 	bl	8000614 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eec:	080043d8 	.word	0x080043d8
  ldr r2, =_sbss
 8000ef0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ef4:	200001cc 	.word	0x200001cc

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 ffa7 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fda6 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 ffbf 	bl	8001ee2 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f000 ff87 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	200001b8 	.word	0x200001b8

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001b8 	.word	0x200001b8

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0ed      	b.n	8001216 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fd42 	bl	8000ad0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800105c:	f7ff ffb4 	bl	8000fc8 <HAL_GetTick>
 8001060:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001062:	e012      	b.n	800108a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001064:	f7ff ffb0 	bl	8000fc8 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d90b      	bls.n	800108a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2205      	movs	r2, #5
 8001082:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0c5      	b.n	8001216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0e5      	beq.n	8001064 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0202 	bic.w	r2, r2, #2
 80010a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a8:	f7ff ff8e 	bl	8000fc8 <HAL_GetTick>
 80010ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ae:	e012      	b.n	80010d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b0:	f7ff ff8a 	bl	8000fc8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	d90b      	bls.n	80010d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2205      	movs	r2, #5
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e09f      	b.n	8001216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e5      	bne.n	80010b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d108      	bne.n	80010fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e007      	b.n	800110e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7e5b      	ldrb	r3, [r3, #25]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e007      	b.n	8001138 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001136:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e9b      	ldrb	r3, [r3, #26]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e007      	b.n	8001162 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0220 	bic.w	r2, r2, #32
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7edb      	ldrb	r3, [r3, #27]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0210 	bic.w	r2, r2, #16
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e007      	b.n	800118c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0210 	orr.w	r2, r2, #16
 800118a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7f1b      	ldrb	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0208 	orr.w	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e007      	b.n	80011b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0208 	bic.w	r2, r2, #8
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7f5b      	ldrb	r3, [r3, #29]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0204 	orr.w	r2, r2, #4
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0204 	bic.w	r2, r2, #4
 80011de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	ea42 0103 	orr.w	r1, r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001236:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001238:	7cfb      	ldrb	r3, [r7, #19]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d003      	beq.n	8001246 <HAL_CAN_ConfigFilter+0x26>
 800123e:	7cfb      	ldrb	r3, [r7, #19]
 8001240:	2b02      	cmp	r3, #2
 8001242:	f040 80be 	bne.w	80013c2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_CAN_ConfigFilter+0x1bc>)
 8001248:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001260:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	431a      	orrs	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	2201      	movs	r2, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	401a      	ands	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d123      	bne.n	80012f0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3248      	adds	r2, #72	; 0x48
 80012d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e6:	6979      	ldr	r1, [r7, #20]
 80012e8:	3348      	adds	r3, #72	; 0x48
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d122      	bne.n	800133e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001318:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3248      	adds	r2, #72	; 0x48
 800131e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001332:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	3348      	adds	r3, #72	; 0x48
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	401a      	ands	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001358:	e007      	b.n	800136a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	431a      	orrs	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	401a      	ands	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001384:	e007      	b.n	8001396 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	431a      	orrs	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013b4:	f023 0201 	bic.w	r2, r3, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e006      	b.n	80013d0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
  }
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40006400 	.word	0x40006400

080013e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d12e      	bne.n	8001452 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800140c:	f7ff fddc 	bl	8000fc8 <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001412:	e012      	b.n	800143a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001414:	f7ff fdd8 	bl	8000fc8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b0a      	cmp	r3, #10
 8001420:	d90b      	bls.n	800143a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2205      	movs	r2, #5
 8001432:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e012      	b.n	8001460 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e5      	bne.n	8001414 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e006      	b.n	8001460 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
  }
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001486:	7ffb      	ldrb	r3, [r7, #31]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d003      	beq.n	8001494 <HAL_CAN_AddTxMessage+0x2c>
 800148c:	7ffb      	ldrb	r3, [r7, #31]
 800148e:	2b02      	cmp	r3, #2
 8001490:	f040 80b8 	bne.w	8001604 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10a      	bne.n	80014b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80a0 	beq.w	80015f4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	0e1b      	lsrs	r3, r3, #24
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e09e      	b.n	8001612 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014d4:	2201      	movs	r2, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	409a      	lsls	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10d      	bne.n	8001502 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014f0:	68f9      	ldr	r1, [r7, #12]
 80014f2:	6809      	ldr	r1, [r1, #0]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3318      	adds	r3, #24
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	440b      	add	r3, r1
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e00f      	b.n	8001522 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001516:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3318      	adds	r3, #24
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	440b      	add	r3, r1
 8001520:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3318      	adds	r3, #24
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	440b      	add	r3, r1
 8001532:	3304      	adds	r3, #4
 8001534:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	7d1b      	ldrb	r3, [r3, #20]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d111      	bne.n	8001562 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3318      	adds	r3, #24
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	3304      	adds	r3, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	6811      	ldr	r1, [r2, #0]
 8001552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3318      	adds	r3, #24
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	440b      	add	r3, r1
 800155e:	3304      	adds	r3, #4
 8001560:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3307      	adds	r3, #7
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	061a      	lsls	r2, r3, #24
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3306      	adds	r3, #6
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3305      	adds	r3, #5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	4313      	orrs	r3, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	3204      	adds	r2, #4
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	4610      	mov	r0, r2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	6811      	ldr	r1, [r2, #0]
 800158a:	ea43 0200 	orr.w	r2, r3, r0
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	440b      	add	r3, r1
 8001594:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001598:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3303      	adds	r3, #3
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	061a      	lsls	r2, r3, #24
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3302      	adds	r3, #2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	041b      	lsls	r3, r3, #16
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	4313      	orrs	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	4610      	mov	r0, r2
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	6811      	ldr	r1, [r2, #0]
 80015c0:	ea43 0200 	orr.w	r2, r3, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	440b      	add	r3, r1
 80015ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3318      	adds	r3, #24
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6811      	ldr	r1, [r2, #0]
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3318      	adds	r3, #24
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e00e      	b.n	8001612 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e006      	b.n	8001612 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
  }
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001632:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d003      	beq.n	8001642 <HAL_CAN_GetRxMessage+0x24>
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b02      	cmp	r3, #2
 800163e:	f040 80f3 	bne.w	8001828 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10e      	bne.n	8001666 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0e7      	b.n	8001836 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0d8      	b.n	8001836 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	331b      	adds	r3, #27
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0204 	and.w	r2, r3, #4
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	331b      	adds	r3, #27
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0d5b      	lsrs	r3, r3, #21
 80016b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	331b      	adds	r3, #27
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	331b      	adds	r3, #27
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0202 	and.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	331b      	adds	r3, #27
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 020f 	and.w	r2, r3, #15
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	331b      	adds	r3, #27
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	331b      	adds	r3, #27
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	3304      	adds	r3, #4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0a1a      	lsrs	r2, r3, #8
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	4413      	add	r3, r2
 800176c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0c1a      	lsrs	r2, r3, #16
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3302      	adds	r3, #2
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0e1a      	lsrs	r2, r3, #24
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3303      	adds	r3, #3
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3304      	adds	r3, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0a1a      	lsrs	r2, r3, #8
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3305      	adds	r3, #5
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0c1a      	lsrs	r2, r3, #16
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3306      	adds	r3, #6
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0e1a      	lsrs	r2, r3, #24
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3307      	adds	r3, #7
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d108      	bne.n	8001814 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0220 	orr.w	r2, r2, #32
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	e007      	b.n	8001824 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0220 	orr.w	r2, r2, #32
 8001822:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e006      	b.n	8001836 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001852:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d002      	beq.n	8001860 <HAL_CAN_ActivateNotification+0x1e>
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d109      	bne.n	8001874 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6959      	ldr	r1, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e006      	b.n	8001882 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b08a      	sub	sp, #40	; 0x28
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d07c      	beq.n	80019ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d023      	beq.n	8001926 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f983 	bl	8001bfc <HAL_CAN_TxMailbox0CompleteCallback>
 80018f6:	e016      	b.n	8001926 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	e00c      	b.n	8001926 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e002      	b.n	8001926 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f989 	bl	8001c38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d024      	beq.n	800197a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001938:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f963 	bl	8001c10 <HAL_CAN_TxMailbox1CompleteCallback>
 800194a:	e016      	b.n	800197a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e00c      	b.n	800197a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e002      	b.n	800197a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f969 	bl	8001c4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d024      	beq.n	80019ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800198c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f943 	bl	8001c24 <HAL_CAN_TxMailbox2CompleteCallback>
 800199e:	e016      	b.n	80019ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
 80019b2:	e00c      	b.n	80019ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
 80019c6:	e002      	b.n	80019ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f949 	bl	8001c60 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00c      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2210      	movs	r2, #16
 80019f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f930 	bl	8001c74 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7fe fda1 	bl	8000574 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f908 	bl	8001c88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7fe fd97 	bl	80005c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2210      	movs	r2, #16
 8001ab0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8f2 	bl	8001c9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f8eb 	bl	8001cb0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d07b      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d072      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d043      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d03e      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b5c:	2b60      	cmp	r3, #96	; 0x60
 8001b5e:	d02b      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x32a>
 8001b60:	2b60      	cmp	r3, #96	; 0x60
 8001b62:	d82e      	bhi.n	8001bc2 <HAL_CAN_IRQHandler+0x334>
 8001b64:	2b50      	cmp	r3, #80	; 0x50
 8001b66:	d022      	beq.n	8001bae <HAL_CAN_IRQHandler+0x320>
 8001b68:	2b50      	cmp	r3, #80	; 0x50
 8001b6a:	d82a      	bhi.n	8001bc2 <HAL_CAN_IRQHandler+0x334>
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d019      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x316>
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d826      	bhi.n	8001bc2 <HAL_CAN_IRQHandler+0x334>
 8001b74:	2b30      	cmp	r3, #48	; 0x30
 8001b76:	d010      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x30c>
 8001b78:	2b30      	cmp	r3, #48	; 0x30
 8001b7a:	d822      	bhi.n	8001bc2 <HAL_CAN_IRQHandler+0x334>
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d002      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x2f8>
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d005      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b84:	e01d      	b.n	8001bc2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b8e:	e019      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b98:	e014      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f043 0320 	orr.w	r3, r3, #32
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ba2:	e00f      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bac:	e00a      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb6:	e005      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc0:	e000      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bc2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bd2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f868 	bl	8001cc4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff29 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff3e 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff8e 	bl	8001dcc <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5d 	bl	8001d78 <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff31 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa2 	bl	8001e34 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e16b      	b.n	80021f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 815a 	bne.w	80021ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d005      	beq.n	8001f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d130      	bne.n	8001fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 0201 	and.w	r2, r3, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d017      	beq.n	8001fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d123      	bne.n	8002040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	69b9      	ldr	r1, [r7, #24]
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80b4 	beq.w	80021ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_GPIO_Init+0x30c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a5f      	ldr	r2, [pc, #380]	; (8002208 <HAL_GPIO_Init+0x30c>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_GPIO_Init+0x30c>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_GPIO_Init+0x310>)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_GPIO_Init+0x314>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02b      	beq.n	8002122 <HAL_GPIO_Init+0x226>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_Init+0x318>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d025      	beq.n	800211e <HAL_GPIO_Init+0x222>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_GPIO_Init+0x31c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01f      	beq.n	800211a <HAL_GPIO_Init+0x21e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_GPIO_Init+0x320>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_GPIO_Init+0x21a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_GPIO_Init+0x324>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x216>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_GPIO_Init+0x328>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x212>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x32c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_GPIO_Init+0x330>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x20a>
 8002102:	2307      	movs	r3, #7
 8002104:	e00e      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002106:	2308      	movs	r3, #8
 8002108:	e00c      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800210a:	2306      	movs	r3, #6
 800210c:	e00a      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002122:	2300      	movs	r3, #0
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f002 0203 	and.w	r2, r2, #3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002134:	4935      	ldr	r1, [pc, #212]	; (800220c <HAL_GPIO_Init+0x310>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_GPIO_Init+0x334>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002166:	4a32      	ldr	r2, [pc, #200]	; (8002230 <HAL_GPIO_Init+0x334>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_GPIO_Init+0x334>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002190:	4a27      	ldr	r2, [pc, #156]	; (8002230 <HAL_GPIO_Init+0x334>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_GPIO_Init+0x334>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ba:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <HAL_GPIO_Init+0x334>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_GPIO_Init+0x334>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e4:	4a12      	ldr	r2, [pc, #72]	; (8002230 <HAL_GPIO_Init+0x334>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	f67f ae90 	bls.w	8001f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40013800 	.word	0x40013800
 8002210:	40020000 	.word	0x40020000
 8002214:	40020400 	.word	0x40020400
 8002218:	40020800 	.word	0x40020800
 800221c:	40020c00 	.word	0x40020c00
 8002220:	40021000 	.word	0x40021000
 8002224:	40021400 	.word	0x40021400
 8002228:	40021800 	.word	0x40021800
 800222c:	40021c00 	.word	0x40021c00
 8002230:	40013c00 	.word	0x40013c00

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002278:	887a      	ldrh	r2, [r7, #2]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	041a      	lsls	r2, r3, #16
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43d9      	mvns	r1, r3
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	400b      	ands	r3, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	619a      	str	r2, [r3, #24]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e267      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d075      	beq.n	80023a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ba:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d00c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b85      	ldr	r3, [pc, #532]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d112      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d2:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05b      	beq.n	80023a4 <HAL_RCC_OscConfig+0x108>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d157      	bne.n	80023a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e242      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x74>
 8002302:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a75      	ldr	r2, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x98>
 800231a:	4b70      	ldr	r3, [pc, #448]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6f      	ldr	r2, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6c      	ldr	r2, [pc, #432]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002334:	4b69      	ldr	r3, [pc, #420]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a68      	ldr	r2, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b66      	ldr	r3, [pc, #408]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fe38 	bl	8000fc8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fe34 	bl	8000fc8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e207      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xc0>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fe24 	bl	8000fc8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fe20 	bl	8000fc8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1f3      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b51      	ldr	r3, [pc, #324]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0xe8>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d063      	beq.n	800247a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b2:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ca:	4b44      	ldr	r3, [pc, #272]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x152>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1c7      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4937      	ldr	r1, [pc, #220]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e03a      	b.n	800247a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_RCC_OscConfig+0x244>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fdd9 	bl	8000fc8 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fdd5 	bl	8000fc8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1a8      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4925      	ldr	r1, [pc, #148]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_OscConfig+0x244>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fdb8 	bl	8000fc8 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fdb4 	bl	8000fc8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e187      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d036      	beq.n	80024f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_RCC_OscConfig+0x248>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fd98 	bl	8000fc8 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fd94 	bl	8000fc8 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e167      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x240>)
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x200>
 80024ba:	e01b      	b.n	80024f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_OscConfig+0x248>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fd81 	bl	8000fc8 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	e00e      	b.n	80024e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe fd7d 	bl	8000fc8 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d907      	bls.n	80024e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e150      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
 80024dc:	40023800 	.word	0x40023800
 80024e0:	42470000 	.word	0x42470000
 80024e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80024ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ea      	bne.n	80024ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8097 	beq.w	8002630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b7d      	ldr	r3, [pc, #500]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a7c      	ldr	r2, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x470>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b7a      	ldr	r3, [pc, #488]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b77      	ldr	r3, [pc, #476]	; (8002710 <HAL_RCC_OscConfig+0x474>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b74      	ldr	r3, [pc, #464]	; (8002710 <HAL_RCC_OscConfig+0x474>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a73      	ldr	r2, [pc, #460]	; (8002710 <HAL_RCC_OscConfig+0x474>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe fd3d 	bl	8000fc8 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7fe fd39 	bl	8000fc8 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e10c      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_OscConfig+0x474>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x2ea>
 8002578:	4b64      	ldr	r3, [pc, #400]	; (800270c <HAL_RCC_OscConfig+0x470>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a63      	ldr	r2, [pc, #396]	; (800270c <HAL_RCC_OscConfig+0x470>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
 8002584:	e01c      	b.n	80025c0 <HAL_RCC_OscConfig+0x324>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b05      	cmp	r3, #5
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x30c>
 800258e:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a5e      	ldr	r2, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	4b5c      	ldr	r3, [pc, #368]	; (800270c <HAL_RCC_OscConfig+0x470>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0x324>
 80025a8:	4b58      	ldr	r3, [pc, #352]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	4b55      	ldr	r3, [pc, #340]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a54      	ldr	r2, [pc, #336]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d015      	beq.n	80025f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fcfe 	bl	8000fc8 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe fcfa 	bl	8000fc8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0cb      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e6:	4b49      	ldr	r3, [pc, #292]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ee      	beq.n	80025d0 <HAL_RCC_OscConfig+0x334>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fce8 	bl	8000fc8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe fce4 	bl	8000fc8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0b5      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002612:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ee      	bne.n	80025fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d105      	bne.n	8002630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	4a38      	ldr	r2, [pc, #224]	; (800270c <HAL_RCC_OscConfig+0x470>)
 800262a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a1 	beq.w	800277c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800263a:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x470>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d05c      	beq.n	8002700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d141      	bne.n	80026d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_OscConfig+0x478>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fcb8 	bl	8000fc8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fcb4 	bl	8000fc8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e087      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_OscConfig+0x470>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	3b01      	subs	r3, #1
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	491b      	ldr	r1, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x478>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fc8d 	bl	8000fc8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fe fc89 	bl	8000fc8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e05c      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x416>
 80026d0:	e054      	b.n	800277c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_OscConfig+0x478>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe fc76 	bl	8000fc8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fc72 	bl	8000fc8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e045      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x470>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x444>
 80026fe:	e03d      	b.n	800277c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d107      	bne.n	8002718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e038      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
 800270c:	40023800 	.word	0x40023800
 8002710:	40007000 	.word	0x40007000
 8002714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x4ec>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d028      	beq.n	8002778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d121      	bne.n	8002778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d11a      	bne.n	8002778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002748:	4013      	ands	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800274e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002750:	4293      	cmp	r3, r2
 8002752:	d111      	bne.n	8002778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	3b01      	subs	r3, #1
 8002762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cc      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d90c      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b65      	ldr	r3, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d044      	beq.n	80028ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002846:	2b03      	cmp	r3, #3
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e067      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4934      	ldr	r1, [pc, #208]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7fe fba4 	bl	8000fc8 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe fba0 	bl	8000fc8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e04f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d20c      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4602      	mov	r2, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	490a      	ldr	r1, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	5ccb      	ldrb	r3, [r1, r3]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fb04 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00
 8002948:	40023800 	.word	0x40023800
 800294c:	08004318 	.word	0x08004318
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800295c:	b094      	sub	sp, #80	; 0x50
 800295e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	647b      	str	r3, [r7, #68]	; 0x44
 8002964:	2300      	movs	r3, #0
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	2300      	movs	r3, #0
 800296a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002970:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b08      	cmp	r3, #8
 800297a:	d00d      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x40>
 800297c:	2b08      	cmp	r3, #8
 800297e:	f200 80e1 	bhi.w	8002b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x34>
 8002986:	2b04      	cmp	r3, #4
 8002988:	d003      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x3a>
 800298a:	e0db      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b73      	ldr	r3, [pc, #460]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x204>)
 800298e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002990:	e0db      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002996:	e0d8      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002998:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x200>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a2:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ae:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	2200      	movs	r2, #0
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
 80029c2:	2300      	movs	r3, #0
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
 80029c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029ca:	4622      	mov	r2, r4
 80029cc:	462b      	mov	r3, r5
 80029ce:	f04f 0000 	mov.w	r0, #0
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	0159      	lsls	r1, r3, #5
 80029d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029dc:	0150      	lsls	r0, r2, #5
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4621      	mov	r1, r4
 80029e4:	1a51      	subs	r1, r2, r1
 80029e6:	6139      	str	r1, [r7, #16]
 80029e8:	4629      	mov	r1, r5
 80029ea:	eb63 0301 	sbc.w	r3, r3, r1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029fc:	4659      	mov	r1, fp
 80029fe:	018b      	lsls	r3, r1, #6
 8002a00:	4651      	mov	r1, sl
 8002a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a06:	4651      	mov	r1, sl
 8002a08:	018a      	lsls	r2, r1, #6
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a10:	4659      	mov	r1, fp
 8002a12:	eb63 0901 	sbc.w	r9, r3, r1
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a2a:	4690      	mov	r8, r2
 8002a2c:	4699      	mov	r9, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	eb18 0303 	adds.w	r3, r8, r3
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	462b      	mov	r3, r5
 8002a38:	eb49 0303 	adc.w	r3, r9, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	024b      	lsls	r3, r1, #9
 8002a4e:	4621      	mov	r1, r4
 8002a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a54:	4621      	mov	r1, r4
 8002a56:	024a      	lsls	r2, r1, #9
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a68:	f7fd fc02 	bl	8000270 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a74:	e058      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	4611      	mov	r1, r2
 8002a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a86:	623b      	str	r3, [r7, #32]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a90:	4642      	mov	r2, r8
 8002a92:	464b      	mov	r3, r9
 8002a94:	f04f 0000 	mov.w	r0, #0
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	0159      	lsls	r1, r3, #5
 8002a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa2:	0150      	lsls	r0, r2, #5
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aae:	4649      	mov	r1, r9
 8002ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8002acc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	00eb      	lsls	r3, r5, #3
 8002ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ade:	00e2      	lsls	r2, r4, #3
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	4643      	mov	r3, r8
 8002ae6:	18e3      	adds	r3, r4, r3
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	464b      	mov	r3, r9
 8002aec:	eb45 0303 	adc.w	r3, r5, r3
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002afe:	4629      	mov	r1, r5
 8002b00:	028b      	lsls	r3, r1, #10
 8002b02:	4621      	mov	r1, r4
 8002b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b08:	4621      	mov	r1, r4
 8002b0a:	028a      	lsls	r2, r1, #10
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b12:	2200      	movs	r2, #0
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	61fa      	str	r2, [r7, #28]
 8002b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b1c:	f7fd fba8 	bl	8000270 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4613      	mov	r3, r2
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3750      	adds	r7, #80	; 0x50
 8002b50:	46bd      	mov	sp, r7
 8002b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	00f42400 	.word	0x00f42400
 8002b60:	007a1200 	.word	0x007a1200

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b80:	f7ff fff0 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0a9b      	lsrs	r3, r3, #10
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	08004328 	.word	0x08004328

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba8:	f7ff ffdc 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0b5b      	lsrs	r3, r3, #13
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	08004328 	.word	0x08004328

08002bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e03f      	b.n	8002c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe f81c 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f929 	bl	8002e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b08a      	sub	sp, #40	; 0x28
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d17c      	bne.n	8002d80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_UART_Transmit+0x2c>
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e075      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Transmit+0x3e>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e06e      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2221      	movs	r2, #33	; 0x21
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cba:	f7fe f985 	bl	8000fc8 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Transmit+0x82>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cf8:	e02a      	b.n	8002d50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f840 	bl	8002d8a <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e036      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e007      	b.n	8002d42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1cf      	bne.n	8002cfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f810 	bl	8002d8a <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b090      	sub	sp, #64	; 0x40
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9a:	e050      	b.n	8002e3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da2:	d04c      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0x30>
 8002daa:	f7fe f90d 	bl	8000fc8 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d241      	bcs.n	8002e3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dda:	637a      	str	r2, [r7, #52]	; 0x34
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e5      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e0e:	623a      	str	r2, [r7, #32]
 8002e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	69f9      	ldr	r1, [r7, #28]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e5      	bne.n	8002dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e00f      	b.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d09f      	beq.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3740      	adds	r7, #64	; 0x40
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b0c0      	sub	sp, #256	; 0x100
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	68d9      	ldr	r1, [r3, #12]
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	ea40 0301 	orr.w	r3, r0, r1
 8002e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ec0:	f021 010c 	bic.w	r1, r1, #12
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	6999      	ldr	r1, [r3, #24]
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	ea40 0301 	orr.w	r3, r0, r1
 8002eee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b8f      	ldr	r3, [pc, #572]	; (8003134 <UART_SetConfig+0x2cc>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d005      	beq.n	8002f08 <UART_SetConfig+0xa0>
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b8d      	ldr	r3, [pc, #564]	; (8003138 <UART_SetConfig+0x2d0>)
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d104      	bne.n	8002f12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7ff fe4c 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8002f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f10:	e003      	b.n	8002f1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f12:	f7ff fe33 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8002f16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f24:	f040 810c 	bne.w	8003140 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	1891      	adds	r1, r2, r2
 8002f40:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f42:	415b      	adcs	r3, r3
 8002f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	eb12 0801 	adds.w	r8, r2, r1
 8002f50:	4629      	mov	r1, r5
 8002f52:	eb43 0901 	adc.w	r9, r3, r1
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f6a:	4690      	mov	r8, r2
 8002f6c:	4699      	mov	r9, r3
 8002f6e:	4623      	mov	r3, r4
 8002f70:	eb18 0303 	adds.w	r3, r8, r3
 8002f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f78:	462b      	mov	r3, r5
 8002f7a:	eb49 0303 	adc.w	r3, r9, r3
 8002f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f96:	460b      	mov	r3, r1
 8002f98:	18db      	adds	r3, r3, r3
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	eb42 0303 	adc.w	r3, r2, r3
 8002fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fac:	f7fd f960 	bl	8000270 <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4b61      	ldr	r3, [pc, #388]	; (800313c <UART_SetConfig+0x2d4>)
 8002fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	011c      	lsls	r4, r3, #4
 8002fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	1891      	adds	r1, r2, r2
 8002fd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fd8:	415b      	adcs	r3, r3
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003000:	4692      	mov	sl, r2
 8003002:	469b      	mov	fp, r3
 8003004:	4643      	mov	r3, r8
 8003006:	eb1a 0303 	adds.w	r3, sl, r3
 800300a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800300e:	464b      	mov	r3, r9
 8003010:	eb4b 0303 	adc.w	r3, fp, r3
 8003014:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003024:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800302c:	460b      	mov	r3, r1
 800302e:	18db      	adds	r3, r3, r3
 8003030:	643b      	str	r3, [r7, #64]	; 0x40
 8003032:	4613      	mov	r3, r2
 8003034:	eb42 0303 	adc.w	r3, r2, r3
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
 800303a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800303e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003042:	f7fd f915 	bl	8000270 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4611      	mov	r1, r2
 800304c:	4b3b      	ldr	r3, [pc, #236]	; (800313c <UART_SetConfig+0x2d4>)
 800304e:	fba3 2301 	umull	r2, r3, r3, r1
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2264      	movs	r2, #100	; 0x64
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	1acb      	subs	r3, r1, r3
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003062:	4b36      	ldr	r3, [pc, #216]	; (800313c <UART_SetConfig+0x2d4>)
 8003064:	fba3 2302 	umull	r2, r3, r3, r2
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003070:	441c      	add	r4, r3
 8003072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003076:	2200      	movs	r2, #0
 8003078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800307c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003084:	4642      	mov	r2, r8
 8003086:	464b      	mov	r3, r9
 8003088:	1891      	adds	r1, r2, r2
 800308a:	63b9      	str	r1, [r7, #56]	; 0x38
 800308c:	415b      	adcs	r3, r3
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003094:	4641      	mov	r1, r8
 8003096:	1851      	adds	r1, r2, r1
 8003098:	6339      	str	r1, [r7, #48]	; 0x30
 800309a:	4649      	mov	r1, r9
 800309c:	414b      	adcs	r3, r1
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030ac:	4659      	mov	r1, fp
 80030ae:	00cb      	lsls	r3, r1, #3
 80030b0:	4651      	mov	r1, sl
 80030b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b6:	4651      	mov	r1, sl
 80030b8:	00ca      	lsls	r2, r1, #3
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	4642      	mov	r2, r8
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030c8:	464b      	mov	r3, r9
 80030ca:	460a      	mov	r2, r1
 80030cc:	eb42 0303 	adc.w	r3, r2, r3
 80030d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030e8:	460b      	mov	r3, r1
 80030ea:	18db      	adds	r3, r3, r3
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ee:	4613      	mov	r3, r2
 80030f0:	eb42 0303 	adc.w	r3, r2, r3
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030fe:	f7fd f8b7 	bl	8000270 <__aeabi_uldivmod>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <UART_SetConfig+0x2d4>)
 8003108:	fba3 1302 	umull	r1, r3, r3, r2
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	2164      	movs	r1, #100	; 0x64
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	3332      	adds	r3, #50	; 0x32
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <UART_SetConfig+0x2d4>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	f003 0207 	and.w	r2, r3, #7
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4422      	add	r2, r4
 800312e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003130:	e105      	b.n	800333e <UART_SetConfig+0x4d6>
 8003132:	bf00      	nop
 8003134:	40011000 	.word	0x40011000
 8003138:	40011400 	.word	0x40011400
 800313c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003144:	2200      	movs	r2, #0
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800314a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800314e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003152:	4642      	mov	r2, r8
 8003154:	464b      	mov	r3, r9
 8003156:	1891      	adds	r1, r2, r2
 8003158:	6239      	str	r1, [r7, #32]
 800315a:	415b      	adcs	r3, r3
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003162:	4641      	mov	r1, r8
 8003164:	1854      	adds	r4, r2, r1
 8003166:	4649      	mov	r1, r9
 8003168:	eb43 0501 	adc.w	r5, r3, r1
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	00eb      	lsls	r3, r5, #3
 8003176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317a:	00e2      	lsls	r2, r4, #3
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4643      	mov	r3, r8
 8003182:	18e3      	adds	r3, r4, r3
 8003184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003188:	464b      	mov	r3, r9
 800318a:	eb45 0303 	adc.w	r3, r5, r3
 800318e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800319e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031ae:	4629      	mov	r1, r5
 80031b0:	008b      	lsls	r3, r1, #2
 80031b2:	4621      	mov	r1, r4
 80031b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b8:	4621      	mov	r1, r4
 80031ba:	008a      	lsls	r2, r1, #2
 80031bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031c0:	f7fd f856 	bl	8000270 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4b60      	ldr	r3, [pc, #384]	; (800334c <UART_SetConfig+0x4e4>)
 80031ca:	fba3 2302 	umull	r2, r3, r3, r2
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	011c      	lsls	r4, r3, #4
 80031d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031e4:	4642      	mov	r2, r8
 80031e6:	464b      	mov	r3, r9
 80031e8:	1891      	adds	r1, r2, r2
 80031ea:	61b9      	str	r1, [r7, #24]
 80031ec:	415b      	adcs	r3, r3
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f4:	4641      	mov	r1, r8
 80031f6:	1851      	adds	r1, r2, r1
 80031f8:	6139      	str	r1, [r7, #16]
 80031fa:	4649      	mov	r1, r9
 80031fc:	414b      	adcs	r3, r1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800320c:	4659      	mov	r1, fp
 800320e:	00cb      	lsls	r3, r1, #3
 8003210:	4651      	mov	r1, sl
 8003212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003216:	4651      	mov	r1, sl
 8003218:	00ca      	lsls	r2, r1, #3
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	4603      	mov	r3, r0
 8003220:	4642      	mov	r2, r8
 8003222:	189b      	adds	r3, r3, r2
 8003224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003228:	464b      	mov	r3, r9
 800322a:	460a      	mov	r2, r1
 800322c:	eb42 0303 	adc.w	r3, r2, r3
 8003230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	67bb      	str	r3, [r7, #120]	; 0x78
 800323e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800324c:	4649      	mov	r1, r9
 800324e:	008b      	lsls	r3, r1, #2
 8003250:	4641      	mov	r1, r8
 8003252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003256:	4641      	mov	r1, r8
 8003258:	008a      	lsls	r2, r1, #2
 800325a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800325e:	f7fd f807 	bl	8000270 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <UART_SetConfig+0x4e4>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a34      	ldr	r2, [pc, #208]	; (800334c <UART_SetConfig+0x4e4>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003286:	441c      	add	r4, r3
 8003288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328c:	2200      	movs	r2, #0
 800328e:	673b      	str	r3, [r7, #112]	; 0x70
 8003290:	677a      	str	r2, [r7, #116]	; 0x74
 8003292:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003296:	4642      	mov	r2, r8
 8003298:	464b      	mov	r3, r9
 800329a:	1891      	adds	r1, r2, r2
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	415b      	adcs	r3, r3
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a6:	4641      	mov	r1, r8
 80032a8:	1851      	adds	r1, r2, r1
 80032aa:	6039      	str	r1, [r7, #0]
 80032ac:	4649      	mov	r1, r9
 80032ae:	414b      	adcs	r3, r1
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032be:	4659      	mov	r1, fp
 80032c0:	00cb      	lsls	r3, r1, #3
 80032c2:	4651      	mov	r1, sl
 80032c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c8:	4651      	mov	r1, sl
 80032ca:	00ca      	lsls	r2, r1, #3
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	4642      	mov	r2, r8
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d8:	464b      	mov	r3, r9
 80032da:	460a      	mov	r2, r1
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	663b      	str	r3, [r7, #96]	; 0x60
 80032ec:	667a      	str	r2, [r7, #100]	; 0x64
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032fa:	4649      	mov	r1, r9
 80032fc:	008b      	lsls	r3, r1, #2
 80032fe:	4641      	mov	r1, r8
 8003300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003304:	4641      	mov	r1, r8
 8003306:	008a      	lsls	r2, r1, #2
 8003308:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800330c:	f7fc ffb0 	bl	8000270 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <UART_SetConfig+0x4e4>)
 8003316:	fba3 1302 	umull	r1, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2164      	movs	r1, #100	; 0x64
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	3332      	adds	r3, #50	; 0x32
 8003328:	4a08      	ldr	r2, [pc, #32]	; (800334c <UART_SetConfig+0x4e4>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	f003 020f 	and.w	r2, r3, #15
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4422      	add	r2, r4
 800333c:	609a      	str	r2, [r3, #8]
}
 800333e:	bf00      	nop
 8003340:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	51eb851f 	.word	0x51eb851f

08003350 <__errno>:
 8003350:	4b01      	ldr	r3, [pc, #4]	; (8003358 <__errno+0x8>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4d0d      	ldr	r5, [pc, #52]	; (8003394 <__libc_init_array+0x38>)
 8003360:	4c0d      	ldr	r4, [pc, #52]	; (8003398 <__libc_init_array+0x3c>)
 8003362:	1b64      	subs	r4, r4, r5
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	2600      	movs	r6, #0
 8003368:	42a6      	cmp	r6, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	4d0b      	ldr	r5, [pc, #44]	; (800339c <__libc_init_array+0x40>)
 800336e:	4c0c      	ldr	r4, [pc, #48]	; (80033a0 <__libc_init_array+0x44>)
 8003370:	f000 ffae 	bl	80042d0 <_init>
 8003374:	1b64      	subs	r4, r4, r5
 8003376:	10a4      	asrs	r4, r4, #2
 8003378:	2600      	movs	r6, #0
 800337a:	42a6      	cmp	r6, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	f855 3b04 	ldr.w	r3, [r5], #4
 8003384:	4798      	blx	r3
 8003386:	3601      	adds	r6, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	f855 3b04 	ldr.w	r3, [r5], #4
 800338e:	4798      	blx	r3
 8003390:	3601      	adds	r6, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	080043d0 	.word	0x080043d0
 8003398:	080043d0 	.word	0x080043d0
 800339c:	080043d0 	.word	0x080043d0
 80033a0:	080043d4 	.word	0x080043d4

080033a4 <memset>:
 80033a4:	4402      	add	r2, r0
 80033a6:	4603      	mov	r3, r0
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d100      	bne.n	80033ae <memset+0xa>
 80033ac:	4770      	bx	lr
 80033ae:	f803 1b01 	strb.w	r1, [r3], #1
 80033b2:	e7f9      	b.n	80033a8 <memset+0x4>

080033b4 <iprintf>:
 80033b4:	b40f      	push	{r0, r1, r2, r3}
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <iprintf+0x2c>)
 80033b8:	b513      	push	{r0, r1, r4, lr}
 80033ba:	681c      	ldr	r4, [r3, #0]
 80033bc:	b124      	cbz	r4, 80033c8 <iprintf+0x14>
 80033be:	69a3      	ldr	r3, [r4, #24]
 80033c0:	b913      	cbnz	r3, 80033c8 <iprintf+0x14>
 80033c2:	4620      	mov	r0, r4
 80033c4:	f000 f866 	bl	8003494 <__sinit>
 80033c8:	ab05      	add	r3, sp, #20
 80033ca:	9a04      	ldr	r2, [sp, #16]
 80033cc:	68a1      	ldr	r1, [r4, #8]
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	4620      	mov	r0, r4
 80033d2:	f000 f9bd 	bl	8003750 <_vfiprintf_r>
 80033d6:	b002      	add	sp, #8
 80033d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033dc:	b004      	add	sp, #16
 80033de:	4770      	bx	lr
 80033e0:	2000000c 	.word	0x2000000c

080033e4 <std>:
 80033e4:	2300      	movs	r3, #0
 80033e6:	b510      	push	{r4, lr}
 80033e8:	4604      	mov	r4, r0
 80033ea:	e9c0 3300 	strd	r3, r3, [r0]
 80033ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033f2:	6083      	str	r3, [r0, #8]
 80033f4:	8181      	strh	r1, [r0, #12]
 80033f6:	6643      	str	r3, [r0, #100]	; 0x64
 80033f8:	81c2      	strh	r2, [r0, #14]
 80033fa:	6183      	str	r3, [r0, #24]
 80033fc:	4619      	mov	r1, r3
 80033fe:	2208      	movs	r2, #8
 8003400:	305c      	adds	r0, #92	; 0x5c
 8003402:	f7ff ffcf 	bl	80033a4 <memset>
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <std+0x38>)
 8003408:	6263      	str	r3, [r4, #36]	; 0x24
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <std+0x3c>)
 800340c:	62a3      	str	r3, [r4, #40]	; 0x28
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <std+0x40>)
 8003410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <std+0x44>)
 8003414:	6224      	str	r4, [r4, #32]
 8003416:	6323      	str	r3, [r4, #48]	; 0x30
 8003418:	bd10      	pop	{r4, pc}
 800341a:	bf00      	nop
 800341c:	08003cf9 	.word	0x08003cf9
 8003420:	08003d1b 	.word	0x08003d1b
 8003424:	08003d53 	.word	0x08003d53
 8003428:	08003d77 	.word	0x08003d77

0800342c <_cleanup_r>:
 800342c:	4901      	ldr	r1, [pc, #4]	; (8003434 <_cleanup_r+0x8>)
 800342e:	f000 b8af 	b.w	8003590 <_fwalk_reent>
 8003432:	bf00      	nop
 8003434:	08004051 	.word	0x08004051

08003438 <__sfmoreglue>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	2268      	movs	r2, #104	; 0x68
 800343c:	1e4d      	subs	r5, r1, #1
 800343e:	4355      	muls	r5, r2
 8003440:	460e      	mov	r6, r1
 8003442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003446:	f000 f8e5 	bl	8003614 <_malloc_r>
 800344a:	4604      	mov	r4, r0
 800344c:	b140      	cbz	r0, 8003460 <__sfmoreglue+0x28>
 800344e:	2100      	movs	r1, #0
 8003450:	e9c0 1600 	strd	r1, r6, [r0]
 8003454:	300c      	adds	r0, #12
 8003456:	60a0      	str	r0, [r4, #8]
 8003458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800345c:	f7ff ffa2 	bl	80033a4 <memset>
 8003460:	4620      	mov	r0, r4
 8003462:	bd70      	pop	{r4, r5, r6, pc}

08003464 <__sfp_lock_acquire>:
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <__sfp_lock_acquire+0x8>)
 8003466:	f000 b8b3 	b.w	80035d0 <__retarget_lock_acquire_recursive>
 800346a:	bf00      	nop
 800346c:	200001bd 	.word	0x200001bd

08003470 <__sfp_lock_release>:
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <__sfp_lock_release+0x8>)
 8003472:	f000 b8ae 	b.w	80035d2 <__retarget_lock_release_recursive>
 8003476:	bf00      	nop
 8003478:	200001bd 	.word	0x200001bd

0800347c <__sinit_lock_acquire>:
 800347c:	4801      	ldr	r0, [pc, #4]	; (8003484 <__sinit_lock_acquire+0x8>)
 800347e:	f000 b8a7 	b.w	80035d0 <__retarget_lock_acquire_recursive>
 8003482:	bf00      	nop
 8003484:	200001be 	.word	0x200001be

08003488 <__sinit_lock_release>:
 8003488:	4801      	ldr	r0, [pc, #4]	; (8003490 <__sinit_lock_release+0x8>)
 800348a:	f000 b8a2 	b.w	80035d2 <__retarget_lock_release_recursive>
 800348e:	bf00      	nop
 8003490:	200001be 	.word	0x200001be

08003494 <__sinit>:
 8003494:	b510      	push	{r4, lr}
 8003496:	4604      	mov	r4, r0
 8003498:	f7ff fff0 	bl	800347c <__sinit_lock_acquire>
 800349c:	69a3      	ldr	r3, [r4, #24]
 800349e:	b11b      	cbz	r3, 80034a8 <__sinit+0x14>
 80034a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a4:	f7ff bff0 	b.w	8003488 <__sinit_lock_release>
 80034a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034ac:	6523      	str	r3, [r4, #80]	; 0x50
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <__sinit+0x68>)
 80034b0:	4a13      	ldr	r2, [pc, #76]	; (8003500 <__sinit+0x6c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80034b6:	42a3      	cmp	r3, r4
 80034b8:	bf04      	itt	eq
 80034ba:	2301      	moveq	r3, #1
 80034bc:	61a3      	streq	r3, [r4, #24]
 80034be:	4620      	mov	r0, r4
 80034c0:	f000 f820 	bl	8003504 <__sfp>
 80034c4:	6060      	str	r0, [r4, #4]
 80034c6:	4620      	mov	r0, r4
 80034c8:	f000 f81c 	bl	8003504 <__sfp>
 80034cc:	60a0      	str	r0, [r4, #8]
 80034ce:	4620      	mov	r0, r4
 80034d0:	f000 f818 	bl	8003504 <__sfp>
 80034d4:	2200      	movs	r2, #0
 80034d6:	60e0      	str	r0, [r4, #12]
 80034d8:	2104      	movs	r1, #4
 80034da:	6860      	ldr	r0, [r4, #4]
 80034dc:	f7ff ff82 	bl	80033e4 <std>
 80034e0:	68a0      	ldr	r0, [r4, #8]
 80034e2:	2201      	movs	r2, #1
 80034e4:	2109      	movs	r1, #9
 80034e6:	f7ff ff7d 	bl	80033e4 <std>
 80034ea:	68e0      	ldr	r0, [r4, #12]
 80034ec:	2202      	movs	r2, #2
 80034ee:	2112      	movs	r1, #18
 80034f0:	f7ff ff78 	bl	80033e4 <std>
 80034f4:	2301      	movs	r3, #1
 80034f6:	61a3      	str	r3, [r4, #24]
 80034f8:	e7d2      	b.n	80034a0 <__sinit+0xc>
 80034fa:	bf00      	nop
 80034fc:	08004330 	.word	0x08004330
 8003500:	0800342d 	.word	0x0800342d

08003504 <__sfp>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	4607      	mov	r7, r0
 8003508:	f7ff ffac 	bl	8003464 <__sfp_lock_acquire>
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <__sfp+0x84>)
 800350e:	681e      	ldr	r6, [r3, #0]
 8003510:	69b3      	ldr	r3, [r6, #24]
 8003512:	b913      	cbnz	r3, 800351a <__sfp+0x16>
 8003514:	4630      	mov	r0, r6
 8003516:	f7ff ffbd 	bl	8003494 <__sinit>
 800351a:	3648      	adds	r6, #72	; 0x48
 800351c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003520:	3b01      	subs	r3, #1
 8003522:	d503      	bpl.n	800352c <__sfp+0x28>
 8003524:	6833      	ldr	r3, [r6, #0]
 8003526:	b30b      	cbz	r3, 800356c <__sfp+0x68>
 8003528:	6836      	ldr	r6, [r6, #0]
 800352a:	e7f7      	b.n	800351c <__sfp+0x18>
 800352c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003530:	b9d5      	cbnz	r5, 8003568 <__sfp+0x64>
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <__sfp+0x88>)
 8003534:	60e3      	str	r3, [r4, #12]
 8003536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800353a:	6665      	str	r5, [r4, #100]	; 0x64
 800353c:	f000 f847 	bl	80035ce <__retarget_lock_init_recursive>
 8003540:	f7ff ff96 	bl	8003470 <__sfp_lock_release>
 8003544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800354c:	6025      	str	r5, [r4, #0]
 800354e:	61a5      	str	r5, [r4, #24]
 8003550:	2208      	movs	r2, #8
 8003552:	4629      	mov	r1, r5
 8003554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003558:	f7ff ff24 	bl	80033a4 <memset>
 800355c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003564:	4620      	mov	r0, r4
 8003566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003568:	3468      	adds	r4, #104	; 0x68
 800356a:	e7d9      	b.n	8003520 <__sfp+0x1c>
 800356c:	2104      	movs	r1, #4
 800356e:	4638      	mov	r0, r7
 8003570:	f7ff ff62 	bl	8003438 <__sfmoreglue>
 8003574:	4604      	mov	r4, r0
 8003576:	6030      	str	r0, [r6, #0]
 8003578:	2800      	cmp	r0, #0
 800357a:	d1d5      	bne.n	8003528 <__sfp+0x24>
 800357c:	f7ff ff78 	bl	8003470 <__sfp_lock_release>
 8003580:	230c      	movs	r3, #12
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	e7ee      	b.n	8003564 <__sfp+0x60>
 8003586:	bf00      	nop
 8003588:	08004330 	.word	0x08004330
 800358c:	ffff0001 	.word	0xffff0001

08003590 <_fwalk_reent>:
 8003590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003594:	4606      	mov	r6, r0
 8003596:	4688      	mov	r8, r1
 8003598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800359c:	2700      	movs	r7, #0
 800359e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035a2:	f1b9 0901 	subs.w	r9, r9, #1
 80035a6:	d505      	bpl.n	80035b4 <_fwalk_reent+0x24>
 80035a8:	6824      	ldr	r4, [r4, #0]
 80035aa:	2c00      	cmp	r4, #0
 80035ac:	d1f7      	bne.n	800359e <_fwalk_reent+0xe>
 80035ae:	4638      	mov	r0, r7
 80035b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035b4:	89ab      	ldrh	r3, [r5, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d907      	bls.n	80035ca <_fwalk_reent+0x3a>
 80035ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035be:	3301      	adds	r3, #1
 80035c0:	d003      	beq.n	80035ca <_fwalk_reent+0x3a>
 80035c2:	4629      	mov	r1, r5
 80035c4:	4630      	mov	r0, r6
 80035c6:	47c0      	blx	r8
 80035c8:	4307      	orrs	r7, r0
 80035ca:	3568      	adds	r5, #104	; 0x68
 80035cc:	e7e9      	b.n	80035a2 <_fwalk_reent+0x12>

080035ce <__retarget_lock_init_recursive>:
 80035ce:	4770      	bx	lr

080035d0 <__retarget_lock_acquire_recursive>:
 80035d0:	4770      	bx	lr

080035d2 <__retarget_lock_release_recursive>:
 80035d2:	4770      	bx	lr

080035d4 <sbrk_aligned>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4e0e      	ldr	r6, [pc, #56]	; (8003610 <sbrk_aligned+0x3c>)
 80035d8:	460c      	mov	r4, r1
 80035da:	6831      	ldr	r1, [r6, #0]
 80035dc:	4605      	mov	r5, r0
 80035de:	b911      	cbnz	r1, 80035e6 <sbrk_aligned+0x12>
 80035e0:	f000 fb7a 	bl	8003cd8 <_sbrk_r>
 80035e4:	6030      	str	r0, [r6, #0]
 80035e6:	4621      	mov	r1, r4
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 fb75 	bl	8003cd8 <_sbrk_r>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	d00a      	beq.n	8003608 <sbrk_aligned+0x34>
 80035f2:	1cc4      	adds	r4, r0, #3
 80035f4:	f024 0403 	bic.w	r4, r4, #3
 80035f8:	42a0      	cmp	r0, r4
 80035fa:	d007      	beq.n	800360c <sbrk_aligned+0x38>
 80035fc:	1a21      	subs	r1, r4, r0
 80035fe:	4628      	mov	r0, r5
 8003600:	f000 fb6a 	bl	8003cd8 <_sbrk_r>
 8003604:	3001      	adds	r0, #1
 8003606:	d101      	bne.n	800360c <sbrk_aligned+0x38>
 8003608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800360c:	4620      	mov	r0, r4
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	200001c4 	.word	0x200001c4

08003614 <_malloc_r>:
 8003614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003618:	1ccd      	adds	r5, r1, #3
 800361a:	f025 0503 	bic.w	r5, r5, #3
 800361e:	3508      	adds	r5, #8
 8003620:	2d0c      	cmp	r5, #12
 8003622:	bf38      	it	cc
 8003624:	250c      	movcc	r5, #12
 8003626:	2d00      	cmp	r5, #0
 8003628:	4607      	mov	r7, r0
 800362a:	db01      	blt.n	8003630 <_malloc_r+0x1c>
 800362c:	42a9      	cmp	r1, r5
 800362e:	d905      	bls.n	800363c <_malloc_r+0x28>
 8003630:	230c      	movs	r3, #12
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	2600      	movs	r6, #0
 8003636:	4630      	mov	r0, r6
 8003638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800363c:	4e2e      	ldr	r6, [pc, #184]	; (80036f8 <_malloc_r+0xe4>)
 800363e:	f000 fdbb 	bl	80041b8 <__malloc_lock>
 8003642:	6833      	ldr	r3, [r6, #0]
 8003644:	461c      	mov	r4, r3
 8003646:	bb34      	cbnz	r4, 8003696 <_malloc_r+0x82>
 8003648:	4629      	mov	r1, r5
 800364a:	4638      	mov	r0, r7
 800364c:	f7ff ffc2 	bl	80035d4 <sbrk_aligned>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	4604      	mov	r4, r0
 8003654:	d14d      	bne.n	80036f2 <_malloc_r+0xde>
 8003656:	6834      	ldr	r4, [r6, #0]
 8003658:	4626      	mov	r6, r4
 800365a:	2e00      	cmp	r6, #0
 800365c:	d140      	bne.n	80036e0 <_malloc_r+0xcc>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4631      	mov	r1, r6
 8003662:	4638      	mov	r0, r7
 8003664:	eb04 0803 	add.w	r8, r4, r3
 8003668:	f000 fb36 	bl	8003cd8 <_sbrk_r>
 800366c:	4580      	cmp	r8, r0
 800366e:	d13a      	bne.n	80036e6 <_malloc_r+0xd2>
 8003670:	6821      	ldr	r1, [r4, #0]
 8003672:	3503      	adds	r5, #3
 8003674:	1a6d      	subs	r5, r5, r1
 8003676:	f025 0503 	bic.w	r5, r5, #3
 800367a:	3508      	adds	r5, #8
 800367c:	2d0c      	cmp	r5, #12
 800367e:	bf38      	it	cc
 8003680:	250c      	movcc	r5, #12
 8003682:	4629      	mov	r1, r5
 8003684:	4638      	mov	r0, r7
 8003686:	f7ff ffa5 	bl	80035d4 <sbrk_aligned>
 800368a:	3001      	adds	r0, #1
 800368c:	d02b      	beq.n	80036e6 <_malloc_r+0xd2>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	442b      	add	r3, r5
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	e00e      	b.n	80036b4 <_malloc_r+0xa0>
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	1b52      	subs	r2, r2, r5
 800369a:	d41e      	bmi.n	80036da <_malloc_r+0xc6>
 800369c:	2a0b      	cmp	r2, #11
 800369e:	d916      	bls.n	80036ce <_malloc_r+0xba>
 80036a0:	1961      	adds	r1, r4, r5
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	6025      	str	r5, [r4, #0]
 80036a6:	bf18      	it	ne
 80036a8:	6059      	strne	r1, [r3, #4]
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	bf08      	it	eq
 80036ae:	6031      	streq	r1, [r6, #0]
 80036b0:	5162      	str	r2, [r4, r5]
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	4638      	mov	r0, r7
 80036b6:	f104 060b 	add.w	r6, r4, #11
 80036ba:	f000 fd83 	bl	80041c4 <__malloc_unlock>
 80036be:	f026 0607 	bic.w	r6, r6, #7
 80036c2:	1d23      	adds	r3, r4, #4
 80036c4:	1af2      	subs	r2, r6, r3
 80036c6:	d0b6      	beq.n	8003636 <_malloc_r+0x22>
 80036c8:	1b9b      	subs	r3, r3, r6
 80036ca:	50a3      	str	r3, [r4, r2]
 80036cc:	e7b3      	b.n	8003636 <_malloc_r+0x22>
 80036ce:	6862      	ldr	r2, [r4, #4]
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	bf0c      	ite	eq
 80036d4:	6032      	streq	r2, [r6, #0]
 80036d6:	605a      	strne	r2, [r3, #4]
 80036d8:	e7ec      	b.n	80036b4 <_malloc_r+0xa0>
 80036da:	4623      	mov	r3, r4
 80036dc:	6864      	ldr	r4, [r4, #4]
 80036de:	e7b2      	b.n	8003646 <_malloc_r+0x32>
 80036e0:	4634      	mov	r4, r6
 80036e2:	6876      	ldr	r6, [r6, #4]
 80036e4:	e7b9      	b.n	800365a <_malloc_r+0x46>
 80036e6:	230c      	movs	r3, #12
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4638      	mov	r0, r7
 80036ec:	f000 fd6a 	bl	80041c4 <__malloc_unlock>
 80036f0:	e7a1      	b.n	8003636 <_malloc_r+0x22>
 80036f2:	6025      	str	r5, [r4, #0]
 80036f4:	e7de      	b.n	80036b4 <_malloc_r+0xa0>
 80036f6:	bf00      	nop
 80036f8:	200001c0 	.word	0x200001c0

080036fc <__sfputc_r>:
 80036fc:	6893      	ldr	r3, [r2, #8]
 80036fe:	3b01      	subs	r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	b410      	push	{r4}
 8003704:	6093      	str	r3, [r2, #8]
 8003706:	da08      	bge.n	800371a <__sfputc_r+0x1e>
 8003708:	6994      	ldr	r4, [r2, #24]
 800370a:	42a3      	cmp	r3, r4
 800370c:	db01      	blt.n	8003712 <__sfputc_r+0x16>
 800370e:	290a      	cmp	r1, #10
 8003710:	d103      	bne.n	800371a <__sfputc_r+0x1e>
 8003712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003716:	f000 bb33 	b.w	8003d80 <__swbuf_r>
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	1c58      	adds	r0, r3, #1
 800371e:	6010      	str	r0, [r2, #0]
 8003720:	7019      	strb	r1, [r3, #0]
 8003722:	4608      	mov	r0, r1
 8003724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003728:	4770      	bx	lr

0800372a <__sfputs_r>:
 800372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372c:	4606      	mov	r6, r0
 800372e:	460f      	mov	r7, r1
 8003730:	4614      	mov	r4, r2
 8003732:	18d5      	adds	r5, r2, r3
 8003734:	42ac      	cmp	r4, r5
 8003736:	d101      	bne.n	800373c <__sfputs_r+0x12>
 8003738:	2000      	movs	r0, #0
 800373a:	e007      	b.n	800374c <__sfputs_r+0x22>
 800373c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003740:	463a      	mov	r2, r7
 8003742:	4630      	mov	r0, r6
 8003744:	f7ff ffda 	bl	80036fc <__sfputc_r>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d1f3      	bne.n	8003734 <__sfputs_r+0xa>
 800374c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003750 <_vfiprintf_r>:
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003754:	460d      	mov	r5, r1
 8003756:	b09d      	sub	sp, #116	; 0x74
 8003758:	4614      	mov	r4, r2
 800375a:	4698      	mov	r8, r3
 800375c:	4606      	mov	r6, r0
 800375e:	b118      	cbz	r0, 8003768 <_vfiprintf_r+0x18>
 8003760:	6983      	ldr	r3, [r0, #24]
 8003762:	b90b      	cbnz	r3, 8003768 <_vfiprintf_r+0x18>
 8003764:	f7ff fe96 	bl	8003494 <__sinit>
 8003768:	4b89      	ldr	r3, [pc, #548]	; (8003990 <_vfiprintf_r+0x240>)
 800376a:	429d      	cmp	r5, r3
 800376c:	d11b      	bne.n	80037a6 <_vfiprintf_r+0x56>
 800376e:	6875      	ldr	r5, [r6, #4]
 8003770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003772:	07d9      	lsls	r1, r3, #31
 8003774:	d405      	bmi.n	8003782 <_vfiprintf_r+0x32>
 8003776:	89ab      	ldrh	r3, [r5, #12]
 8003778:	059a      	lsls	r2, r3, #22
 800377a:	d402      	bmi.n	8003782 <_vfiprintf_r+0x32>
 800377c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800377e:	f7ff ff27 	bl	80035d0 <__retarget_lock_acquire_recursive>
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	071b      	lsls	r3, r3, #28
 8003786:	d501      	bpl.n	800378c <_vfiprintf_r+0x3c>
 8003788:	692b      	ldr	r3, [r5, #16]
 800378a:	b9eb      	cbnz	r3, 80037c8 <_vfiprintf_r+0x78>
 800378c:	4629      	mov	r1, r5
 800378e:	4630      	mov	r0, r6
 8003790:	f000 fb5a 	bl	8003e48 <__swsetup_r>
 8003794:	b1c0      	cbz	r0, 80037c8 <_vfiprintf_r+0x78>
 8003796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003798:	07dc      	lsls	r4, r3, #31
 800379a:	d50e      	bpl.n	80037ba <_vfiprintf_r+0x6a>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a0:	b01d      	add	sp, #116	; 0x74
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	4b7b      	ldr	r3, [pc, #492]	; (8003994 <_vfiprintf_r+0x244>)
 80037a8:	429d      	cmp	r5, r3
 80037aa:	d101      	bne.n	80037b0 <_vfiprintf_r+0x60>
 80037ac:	68b5      	ldr	r5, [r6, #8]
 80037ae:	e7df      	b.n	8003770 <_vfiprintf_r+0x20>
 80037b0:	4b79      	ldr	r3, [pc, #484]	; (8003998 <_vfiprintf_r+0x248>)
 80037b2:	429d      	cmp	r5, r3
 80037b4:	bf08      	it	eq
 80037b6:	68f5      	ldreq	r5, [r6, #12]
 80037b8:	e7da      	b.n	8003770 <_vfiprintf_r+0x20>
 80037ba:	89ab      	ldrh	r3, [r5, #12]
 80037bc:	0598      	lsls	r0, r3, #22
 80037be:	d4ed      	bmi.n	800379c <_vfiprintf_r+0x4c>
 80037c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037c2:	f7ff ff06 	bl	80035d2 <__retarget_lock_release_recursive>
 80037c6:	e7e9      	b.n	800379c <_vfiprintf_r+0x4c>
 80037c8:	2300      	movs	r3, #0
 80037ca:	9309      	str	r3, [sp, #36]	; 0x24
 80037cc:	2320      	movs	r3, #32
 80037ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80037d6:	2330      	movs	r3, #48	; 0x30
 80037d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800399c <_vfiprintf_r+0x24c>
 80037dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037e0:	f04f 0901 	mov.w	r9, #1
 80037e4:	4623      	mov	r3, r4
 80037e6:	469a      	mov	sl, r3
 80037e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037ec:	b10a      	cbz	r2, 80037f2 <_vfiprintf_r+0xa2>
 80037ee:	2a25      	cmp	r2, #37	; 0x25
 80037f0:	d1f9      	bne.n	80037e6 <_vfiprintf_r+0x96>
 80037f2:	ebba 0b04 	subs.w	fp, sl, r4
 80037f6:	d00b      	beq.n	8003810 <_vfiprintf_r+0xc0>
 80037f8:	465b      	mov	r3, fp
 80037fa:	4622      	mov	r2, r4
 80037fc:	4629      	mov	r1, r5
 80037fe:	4630      	mov	r0, r6
 8003800:	f7ff ff93 	bl	800372a <__sfputs_r>
 8003804:	3001      	adds	r0, #1
 8003806:	f000 80aa 	beq.w	800395e <_vfiprintf_r+0x20e>
 800380a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800380c:	445a      	add	r2, fp
 800380e:	9209      	str	r2, [sp, #36]	; 0x24
 8003810:	f89a 3000 	ldrb.w	r3, [sl]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a2 	beq.w	800395e <_vfiprintf_r+0x20e>
 800381a:	2300      	movs	r3, #0
 800381c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003824:	f10a 0a01 	add.w	sl, sl, #1
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	9307      	str	r3, [sp, #28]
 800382c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003830:	931a      	str	r3, [sp, #104]	; 0x68
 8003832:	4654      	mov	r4, sl
 8003834:	2205      	movs	r2, #5
 8003836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383a:	4858      	ldr	r0, [pc, #352]	; (800399c <_vfiprintf_r+0x24c>)
 800383c:	f7fc fcc8 	bl	80001d0 <memchr>
 8003840:	9a04      	ldr	r2, [sp, #16]
 8003842:	b9d8      	cbnz	r0, 800387c <_vfiprintf_r+0x12c>
 8003844:	06d1      	lsls	r1, r2, #27
 8003846:	bf44      	itt	mi
 8003848:	2320      	movmi	r3, #32
 800384a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800384e:	0713      	lsls	r3, r2, #28
 8003850:	bf44      	itt	mi
 8003852:	232b      	movmi	r3, #43	; 0x2b
 8003854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003858:	f89a 3000 	ldrb.w	r3, [sl]
 800385c:	2b2a      	cmp	r3, #42	; 0x2a
 800385e:	d015      	beq.n	800388c <_vfiprintf_r+0x13c>
 8003860:	9a07      	ldr	r2, [sp, #28]
 8003862:	4654      	mov	r4, sl
 8003864:	2000      	movs	r0, #0
 8003866:	f04f 0c0a 	mov.w	ip, #10
 800386a:	4621      	mov	r1, r4
 800386c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003870:	3b30      	subs	r3, #48	; 0x30
 8003872:	2b09      	cmp	r3, #9
 8003874:	d94e      	bls.n	8003914 <_vfiprintf_r+0x1c4>
 8003876:	b1b0      	cbz	r0, 80038a6 <_vfiprintf_r+0x156>
 8003878:	9207      	str	r2, [sp, #28]
 800387a:	e014      	b.n	80038a6 <_vfiprintf_r+0x156>
 800387c:	eba0 0308 	sub.w	r3, r0, r8
 8003880:	fa09 f303 	lsl.w	r3, r9, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	46a2      	mov	sl, r4
 800388a:	e7d2      	b.n	8003832 <_vfiprintf_r+0xe2>
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	1d19      	adds	r1, r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	9103      	str	r1, [sp, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	bfbb      	ittet	lt
 8003898:	425b      	neglt	r3, r3
 800389a:	f042 0202 	orrlt.w	r2, r2, #2
 800389e:	9307      	strge	r3, [sp, #28]
 80038a0:	9307      	strlt	r3, [sp, #28]
 80038a2:	bfb8      	it	lt
 80038a4:	9204      	strlt	r2, [sp, #16]
 80038a6:	7823      	ldrb	r3, [r4, #0]
 80038a8:	2b2e      	cmp	r3, #46	; 0x2e
 80038aa:	d10c      	bne.n	80038c6 <_vfiprintf_r+0x176>
 80038ac:	7863      	ldrb	r3, [r4, #1]
 80038ae:	2b2a      	cmp	r3, #42	; 0x2a
 80038b0:	d135      	bne.n	800391e <_vfiprintf_r+0x1ce>
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	1d1a      	adds	r2, r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	9203      	str	r2, [sp, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfb8      	it	lt
 80038be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80038c2:	3402      	adds	r4, #2
 80038c4:	9305      	str	r3, [sp, #20]
 80038c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80039ac <_vfiprintf_r+0x25c>
 80038ca:	7821      	ldrb	r1, [r4, #0]
 80038cc:	2203      	movs	r2, #3
 80038ce:	4650      	mov	r0, sl
 80038d0:	f7fc fc7e 	bl	80001d0 <memchr>
 80038d4:	b140      	cbz	r0, 80038e8 <_vfiprintf_r+0x198>
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	eba0 000a 	sub.w	r0, r0, sl
 80038dc:	fa03 f000 	lsl.w	r0, r3, r0
 80038e0:	9b04      	ldr	r3, [sp, #16]
 80038e2:	4303      	orrs	r3, r0
 80038e4:	3401      	adds	r4, #1
 80038e6:	9304      	str	r3, [sp, #16]
 80038e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ec:	482c      	ldr	r0, [pc, #176]	; (80039a0 <_vfiprintf_r+0x250>)
 80038ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038f2:	2206      	movs	r2, #6
 80038f4:	f7fc fc6c 	bl	80001d0 <memchr>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d03f      	beq.n	800397c <_vfiprintf_r+0x22c>
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <_vfiprintf_r+0x254>)
 80038fe:	bb1b      	cbnz	r3, 8003948 <_vfiprintf_r+0x1f8>
 8003900:	9b03      	ldr	r3, [sp, #12]
 8003902:	3307      	adds	r3, #7
 8003904:	f023 0307 	bic.w	r3, r3, #7
 8003908:	3308      	adds	r3, #8
 800390a:	9303      	str	r3, [sp, #12]
 800390c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800390e:	443b      	add	r3, r7
 8003910:	9309      	str	r3, [sp, #36]	; 0x24
 8003912:	e767      	b.n	80037e4 <_vfiprintf_r+0x94>
 8003914:	fb0c 3202 	mla	r2, ip, r2, r3
 8003918:	460c      	mov	r4, r1
 800391a:	2001      	movs	r0, #1
 800391c:	e7a5      	b.n	800386a <_vfiprintf_r+0x11a>
 800391e:	2300      	movs	r3, #0
 8003920:	3401      	adds	r4, #1
 8003922:	9305      	str	r3, [sp, #20]
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 0c0a 	mov.w	ip, #10
 800392a:	4620      	mov	r0, r4
 800392c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003930:	3a30      	subs	r2, #48	; 0x30
 8003932:	2a09      	cmp	r2, #9
 8003934:	d903      	bls.n	800393e <_vfiprintf_r+0x1ee>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0c5      	beq.n	80038c6 <_vfiprintf_r+0x176>
 800393a:	9105      	str	r1, [sp, #20]
 800393c:	e7c3      	b.n	80038c6 <_vfiprintf_r+0x176>
 800393e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003942:	4604      	mov	r4, r0
 8003944:	2301      	movs	r3, #1
 8003946:	e7f0      	b.n	800392a <_vfiprintf_r+0x1da>
 8003948:	ab03      	add	r3, sp, #12
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	462a      	mov	r2, r5
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <_vfiprintf_r+0x258>)
 8003950:	a904      	add	r1, sp, #16
 8003952:	4630      	mov	r0, r6
 8003954:	f3af 8000 	nop.w
 8003958:	4607      	mov	r7, r0
 800395a:	1c78      	adds	r0, r7, #1
 800395c:	d1d6      	bne.n	800390c <_vfiprintf_r+0x1bc>
 800395e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003960:	07d9      	lsls	r1, r3, #31
 8003962:	d405      	bmi.n	8003970 <_vfiprintf_r+0x220>
 8003964:	89ab      	ldrh	r3, [r5, #12]
 8003966:	059a      	lsls	r2, r3, #22
 8003968:	d402      	bmi.n	8003970 <_vfiprintf_r+0x220>
 800396a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800396c:	f7ff fe31 	bl	80035d2 <__retarget_lock_release_recursive>
 8003970:	89ab      	ldrh	r3, [r5, #12]
 8003972:	065b      	lsls	r3, r3, #25
 8003974:	f53f af12 	bmi.w	800379c <_vfiprintf_r+0x4c>
 8003978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800397a:	e711      	b.n	80037a0 <_vfiprintf_r+0x50>
 800397c:	ab03      	add	r3, sp, #12
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	462a      	mov	r2, r5
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <_vfiprintf_r+0x258>)
 8003984:	a904      	add	r1, sp, #16
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f880 	bl	8003a8c <_printf_i>
 800398c:	e7e4      	b.n	8003958 <_vfiprintf_r+0x208>
 800398e:	bf00      	nop
 8003990:	08004354 	.word	0x08004354
 8003994:	08004374 	.word	0x08004374
 8003998:	08004334 	.word	0x08004334
 800399c:	08004394 	.word	0x08004394
 80039a0:	0800439e 	.word	0x0800439e
 80039a4:	00000000 	.word	0x00000000
 80039a8:	0800372b 	.word	0x0800372b
 80039ac:	0800439a 	.word	0x0800439a

080039b0 <_printf_common>:
 80039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	4616      	mov	r6, r2
 80039b6:	4699      	mov	r9, r3
 80039b8:	688a      	ldr	r2, [r1, #8]
 80039ba:	690b      	ldr	r3, [r1, #16]
 80039bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	bfb8      	it	lt
 80039c4:	4613      	movlt	r3, r2
 80039c6:	6033      	str	r3, [r6, #0]
 80039c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039cc:	4607      	mov	r7, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	b10a      	cbz	r2, 80039d6 <_printf_common+0x26>
 80039d2:	3301      	adds	r3, #1
 80039d4:	6033      	str	r3, [r6, #0]
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	0699      	lsls	r1, r3, #26
 80039da:	bf42      	ittt	mi
 80039dc:	6833      	ldrmi	r3, [r6, #0]
 80039de:	3302      	addmi	r3, #2
 80039e0:	6033      	strmi	r3, [r6, #0]
 80039e2:	6825      	ldr	r5, [r4, #0]
 80039e4:	f015 0506 	ands.w	r5, r5, #6
 80039e8:	d106      	bne.n	80039f8 <_printf_common+0x48>
 80039ea:	f104 0a19 	add.w	sl, r4, #25
 80039ee:	68e3      	ldr	r3, [r4, #12]
 80039f0:	6832      	ldr	r2, [r6, #0]
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	42ab      	cmp	r3, r5
 80039f6:	dc26      	bgt.n	8003a46 <_printf_common+0x96>
 80039f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039fc:	1e13      	subs	r3, r2, #0
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	bf18      	it	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	0692      	lsls	r2, r2, #26
 8003a06:	d42b      	bmi.n	8003a60 <_printf_common+0xb0>
 8003a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a0c:	4649      	mov	r1, r9
 8003a0e:	4638      	mov	r0, r7
 8003a10:	47c0      	blx	r8
 8003a12:	3001      	adds	r0, #1
 8003a14:	d01e      	beq.n	8003a54 <_printf_common+0xa4>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	68e5      	ldr	r5, [r4, #12]
 8003a1a:	6832      	ldr	r2, [r6, #0]
 8003a1c:	f003 0306 	and.w	r3, r3, #6
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	bf08      	it	eq
 8003a24:	1aad      	subeq	r5, r5, r2
 8003a26:	68a3      	ldr	r3, [r4, #8]
 8003a28:	6922      	ldr	r2, [r4, #16]
 8003a2a:	bf0c      	ite	eq
 8003a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a30:	2500      	movne	r5, #0
 8003a32:	4293      	cmp	r3, r2
 8003a34:	bfc4      	itt	gt
 8003a36:	1a9b      	subgt	r3, r3, r2
 8003a38:	18ed      	addgt	r5, r5, r3
 8003a3a:	2600      	movs	r6, #0
 8003a3c:	341a      	adds	r4, #26
 8003a3e:	42b5      	cmp	r5, r6
 8003a40:	d11a      	bne.n	8003a78 <_printf_common+0xc8>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e008      	b.n	8003a58 <_printf_common+0xa8>
 8003a46:	2301      	movs	r3, #1
 8003a48:	4652      	mov	r2, sl
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	47c0      	blx	r8
 8003a50:	3001      	adds	r0, #1
 8003a52:	d103      	bne.n	8003a5c <_printf_common+0xac>
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5c:	3501      	adds	r5, #1
 8003a5e:	e7c6      	b.n	80039ee <_printf_common+0x3e>
 8003a60:	18e1      	adds	r1, r4, r3
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	2030      	movs	r0, #48	; 0x30
 8003a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a6a:	4422      	add	r2, r4
 8003a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a74:	3302      	adds	r3, #2
 8003a76:	e7c7      	b.n	8003a08 <_printf_common+0x58>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	4638      	mov	r0, r7
 8003a80:	47c0      	blx	r8
 8003a82:	3001      	adds	r0, #1
 8003a84:	d0e6      	beq.n	8003a54 <_printf_common+0xa4>
 8003a86:	3601      	adds	r6, #1
 8003a88:	e7d9      	b.n	8003a3e <_printf_common+0x8e>
	...

08003a8c <_printf_i>:
 8003a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	7e0f      	ldrb	r7, [r1, #24]
 8003a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a94:	2f78      	cmp	r7, #120	; 0x78
 8003a96:	4691      	mov	r9, r2
 8003a98:	4680      	mov	r8, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	469a      	mov	sl, r3
 8003a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aa2:	d807      	bhi.n	8003ab4 <_printf_i+0x28>
 8003aa4:	2f62      	cmp	r7, #98	; 0x62
 8003aa6:	d80a      	bhi.n	8003abe <_printf_i+0x32>
 8003aa8:	2f00      	cmp	r7, #0
 8003aaa:	f000 80d8 	beq.w	8003c5e <_printf_i+0x1d2>
 8003aae:	2f58      	cmp	r7, #88	; 0x58
 8003ab0:	f000 80a3 	beq.w	8003bfa <_printf_i+0x16e>
 8003ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003abc:	e03a      	b.n	8003b34 <_printf_i+0xa8>
 8003abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ac2:	2b15      	cmp	r3, #21
 8003ac4:	d8f6      	bhi.n	8003ab4 <_printf_i+0x28>
 8003ac6:	a101      	add	r1, pc, #4	; (adr r1, 8003acc <_printf_i+0x40>)
 8003ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003acc:	08003b25 	.word	0x08003b25
 8003ad0:	08003b39 	.word	0x08003b39
 8003ad4:	08003ab5 	.word	0x08003ab5
 8003ad8:	08003ab5 	.word	0x08003ab5
 8003adc:	08003ab5 	.word	0x08003ab5
 8003ae0:	08003ab5 	.word	0x08003ab5
 8003ae4:	08003b39 	.word	0x08003b39
 8003ae8:	08003ab5 	.word	0x08003ab5
 8003aec:	08003ab5 	.word	0x08003ab5
 8003af0:	08003ab5 	.word	0x08003ab5
 8003af4:	08003ab5 	.word	0x08003ab5
 8003af8:	08003c45 	.word	0x08003c45
 8003afc:	08003b69 	.word	0x08003b69
 8003b00:	08003c27 	.word	0x08003c27
 8003b04:	08003ab5 	.word	0x08003ab5
 8003b08:	08003ab5 	.word	0x08003ab5
 8003b0c:	08003c67 	.word	0x08003c67
 8003b10:	08003ab5 	.word	0x08003ab5
 8003b14:	08003b69 	.word	0x08003b69
 8003b18:	08003ab5 	.word	0x08003ab5
 8003b1c:	08003ab5 	.word	0x08003ab5
 8003b20:	08003c2f 	.word	0x08003c2f
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	602a      	str	r2, [r5, #0]
 8003b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0a3      	b.n	8003c80 <_printf_i+0x1f4>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	6829      	ldr	r1, [r5, #0]
 8003b3c:	0606      	lsls	r6, r0, #24
 8003b3e:	f101 0304 	add.w	r3, r1, #4
 8003b42:	d50a      	bpl.n	8003b5a <_printf_i+0xce>
 8003b44:	680e      	ldr	r6, [r1, #0]
 8003b46:	602b      	str	r3, [r5, #0]
 8003b48:	2e00      	cmp	r6, #0
 8003b4a:	da03      	bge.n	8003b54 <_printf_i+0xc8>
 8003b4c:	232d      	movs	r3, #45	; 0x2d
 8003b4e:	4276      	negs	r6, r6
 8003b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b54:	485e      	ldr	r0, [pc, #376]	; (8003cd0 <_printf_i+0x244>)
 8003b56:	230a      	movs	r3, #10
 8003b58:	e019      	b.n	8003b8e <_printf_i+0x102>
 8003b5a:	680e      	ldr	r6, [r1, #0]
 8003b5c:	602b      	str	r3, [r5, #0]
 8003b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b62:	bf18      	it	ne
 8003b64:	b236      	sxthne	r6, r6
 8003b66:	e7ef      	b.n	8003b48 <_printf_i+0xbc>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	1d19      	adds	r1, r3, #4
 8003b6e:	6029      	str	r1, [r5, #0]
 8003b70:	0601      	lsls	r1, r0, #24
 8003b72:	d501      	bpl.n	8003b78 <_printf_i+0xec>
 8003b74:	681e      	ldr	r6, [r3, #0]
 8003b76:	e002      	b.n	8003b7e <_printf_i+0xf2>
 8003b78:	0646      	lsls	r6, r0, #25
 8003b7a:	d5fb      	bpl.n	8003b74 <_printf_i+0xe8>
 8003b7c:	881e      	ldrh	r6, [r3, #0]
 8003b7e:	4854      	ldr	r0, [pc, #336]	; (8003cd0 <_printf_i+0x244>)
 8003b80:	2f6f      	cmp	r7, #111	; 0x6f
 8003b82:	bf0c      	ite	eq
 8003b84:	2308      	moveq	r3, #8
 8003b86:	230a      	movne	r3, #10
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b8e:	6865      	ldr	r5, [r4, #4]
 8003b90:	60a5      	str	r5, [r4, #8]
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	bfa2      	ittt	ge
 8003b96:	6821      	ldrge	r1, [r4, #0]
 8003b98:	f021 0104 	bicge.w	r1, r1, #4
 8003b9c:	6021      	strge	r1, [r4, #0]
 8003b9e:	b90e      	cbnz	r6, 8003ba4 <_printf_i+0x118>
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	d04d      	beq.n	8003c40 <_printf_i+0x1b4>
 8003ba4:	4615      	mov	r5, r2
 8003ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003baa:	fb03 6711 	mls	r7, r3, r1, r6
 8003bae:	5dc7      	ldrb	r7, [r0, r7]
 8003bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bb4:	4637      	mov	r7, r6
 8003bb6:	42bb      	cmp	r3, r7
 8003bb8:	460e      	mov	r6, r1
 8003bba:	d9f4      	bls.n	8003ba6 <_printf_i+0x11a>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d10b      	bne.n	8003bd8 <_printf_i+0x14c>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	07de      	lsls	r6, r3, #31
 8003bc4:	d508      	bpl.n	8003bd8 <_printf_i+0x14c>
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	6861      	ldr	r1, [r4, #4]
 8003bca:	4299      	cmp	r1, r3
 8003bcc:	bfde      	ittt	le
 8003bce:	2330      	movle	r3, #48	; 0x30
 8003bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003bd8:	1b52      	subs	r2, r2, r5
 8003bda:	6122      	str	r2, [r4, #16]
 8003bdc:	f8cd a000 	str.w	sl, [sp]
 8003be0:	464b      	mov	r3, r9
 8003be2:	aa03      	add	r2, sp, #12
 8003be4:	4621      	mov	r1, r4
 8003be6:	4640      	mov	r0, r8
 8003be8:	f7ff fee2 	bl	80039b0 <_printf_common>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d14c      	bne.n	8003c8a <_printf_i+0x1fe>
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bf4:	b004      	add	sp, #16
 8003bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bfa:	4835      	ldr	r0, [pc, #212]	; (8003cd0 <_printf_i+0x244>)
 8003bfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c00:	6829      	ldr	r1, [r5, #0]
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c08:	6029      	str	r1, [r5, #0]
 8003c0a:	061d      	lsls	r5, r3, #24
 8003c0c:	d514      	bpl.n	8003c38 <_printf_i+0x1ac>
 8003c0e:	07df      	lsls	r7, r3, #31
 8003c10:	bf44      	itt	mi
 8003c12:	f043 0320 	orrmi.w	r3, r3, #32
 8003c16:	6023      	strmi	r3, [r4, #0]
 8003c18:	b91e      	cbnz	r6, 8003c22 <_printf_i+0x196>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	f023 0320 	bic.w	r3, r3, #32
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	2310      	movs	r3, #16
 8003c24:	e7b0      	b.n	8003b88 <_printf_i+0xfc>
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	f043 0320 	orr.w	r3, r3, #32
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	2378      	movs	r3, #120	; 0x78
 8003c30:	4828      	ldr	r0, [pc, #160]	; (8003cd4 <_printf_i+0x248>)
 8003c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c36:	e7e3      	b.n	8003c00 <_printf_i+0x174>
 8003c38:	0659      	lsls	r1, r3, #25
 8003c3a:	bf48      	it	mi
 8003c3c:	b2b6      	uxthmi	r6, r6
 8003c3e:	e7e6      	b.n	8003c0e <_printf_i+0x182>
 8003c40:	4615      	mov	r5, r2
 8003c42:	e7bb      	b.n	8003bbc <_printf_i+0x130>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	6826      	ldr	r6, [r4, #0]
 8003c48:	6961      	ldr	r1, [r4, #20]
 8003c4a:	1d18      	adds	r0, r3, #4
 8003c4c:	6028      	str	r0, [r5, #0]
 8003c4e:	0635      	lsls	r5, r6, #24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	d501      	bpl.n	8003c58 <_printf_i+0x1cc>
 8003c54:	6019      	str	r1, [r3, #0]
 8003c56:	e002      	b.n	8003c5e <_printf_i+0x1d2>
 8003c58:	0670      	lsls	r0, r6, #25
 8003c5a:	d5fb      	bpl.n	8003c54 <_printf_i+0x1c8>
 8003c5c:	8019      	strh	r1, [r3, #0]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6123      	str	r3, [r4, #16]
 8003c62:	4615      	mov	r5, r2
 8003c64:	e7ba      	b.n	8003bdc <_printf_i+0x150>
 8003c66:	682b      	ldr	r3, [r5, #0]
 8003c68:	1d1a      	adds	r2, r3, #4
 8003c6a:	602a      	str	r2, [r5, #0]
 8003c6c:	681d      	ldr	r5, [r3, #0]
 8003c6e:	6862      	ldr	r2, [r4, #4]
 8003c70:	2100      	movs	r1, #0
 8003c72:	4628      	mov	r0, r5
 8003c74:	f7fc faac 	bl	80001d0 <memchr>
 8003c78:	b108      	cbz	r0, 8003c7e <_printf_i+0x1f2>
 8003c7a:	1b40      	subs	r0, r0, r5
 8003c7c:	6060      	str	r0, [r4, #4]
 8003c7e:	6863      	ldr	r3, [r4, #4]
 8003c80:	6123      	str	r3, [r4, #16]
 8003c82:	2300      	movs	r3, #0
 8003c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c88:	e7a8      	b.n	8003bdc <_printf_i+0x150>
 8003c8a:	6923      	ldr	r3, [r4, #16]
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	4649      	mov	r1, r9
 8003c90:	4640      	mov	r0, r8
 8003c92:	47d0      	blx	sl
 8003c94:	3001      	adds	r0, #1
 8003c96:	d0ab      	beq.n	8003bf0 <_printf_i+0x164>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	079b      	lsls	r3, r3, #30
 8003c9c:	d413      	bmi.n	8003cc6 <_printf_i+0x23a>
 8003c9e:	68e0      	ldr	r0, [r4, #12]
 8003ca0:	9b03      	ldr	r3, [sp, #12]
 8003ca2:	4298      	cmp	r0, r3
 8003ca4:	bfb8      	it	lt
 8003ca6:	4618      	movlt	r0, r3
 8003ca8:	e7a4      	b.n	8003bf4 <_printf_i+0x168>
 8003caa:	2301      	movs	r3, #1
 8003cac:	4632      	mov	r2, r6
 8003cae:	4649      	mov	r1, r9
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	47d0      	blx	sl
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d09b      	beq.n	8003bf0 <_printf_i+0x164>
 8003cb8:	3501      	adds	r5, #1
 8003cba:	68e3      	ldr	r3, [r4, #12]
 8003cbc:	9903      	ldr	r1, [sp, #12]
 8003cbe:	1a5b      	subs	r3, r3, r1
 8003cc0:	42ab      	cmp	r3, r5
 8003cc2:	dcf2      	bgt.n	8003caa <_printf_i+0x21e>
 8003cc4:	e7eb      	b.n	8003c9e <_printf_i+0x212>
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	f104 0619 	add.w	r6, r4, #25
 8003ccc:	e7f5      	b.n	8003cba <_printf_i+0x22e>
 8003cce:	bf00      	nop
 8003cd0:	080043a5 	.word	0x080043a5
 8003cd4:	080043b6 	.word	0x080043b6

08003cd8 <_sbrk_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d06      	ldr	r5, [pc, #24]	; (8003cf4 <_sbrk_r+0x1c>)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4604      	mov	r4, r0
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	f7fd f898 	bl	8000e18 <_sbrk>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_sbrk_r+0x1a>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_sbrk_r+0x1a>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	200001c8 	.word	0x200001c8

08003cf8 <__sread>:
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d00:	f000 fab2 	bl	8004268 <_read_r>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	bfab      	itete	ge
 8003d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d0c:	181b      	addge	r3, r3, r0
 8003d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d12:	bfac      	ite	ge
 8003d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d16:	81a3      	strhlt	r3, [r4, #12]
 8003d18:	bd10      	pop	{r4, pc}

08003d1a <__swrite>:
 8003d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1e:	461f      	mov	r7, r3
 8003d20:	898b      	ldrh	r3, [r1, #12]
 8003d22:	05db      	lsls	r3, r3, #23
 8003d24:	4605      	mov	r5, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4616      	mov	r6, r2
 8003d2a:	d505      	bpl.n	8003d38 <__swrite+0x1e>
 8003d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d30:	2302      	movs	r3, #2
 8003d32:	2200      	movs	r2, #0
 8003d34:	f000 f9c8 	bl	80040c8 <_lseek_r>
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	4632      	mov	r2, r6
 8003d46:	463b      	mov	r3, r7
 8003d48:	4628      	mov	r0, r5
 8003d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4e:	f000 b869 	b.w	8003e24 <_write_r>

08003d52 <__sseek>:
 8003d52:	b510      	push	{r4, lr}
 8003d54:	460c      	mov	r4, r1
 8003d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5a:	f000 f9b5 	bl	80040c8 <_lseek_r>
 8003d5e:	1c43      	adds	r3, r0, #1
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	bf15      	itete	ne
 8003d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d6e:	81a3      	strheq	r3, [r4, #12]
 8003d70:	bf18      	it	ne
 8003d72:	81a3      	strhne	r3, [r4, #12]
 8003d74:	bd10      	pop	{r4, pc}

08003d76 <__sclose>:
 8003d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7a:	f000 b8d3 	b.w	8003f24 <_close_r>
	...

08003d80 <__swbuf_r>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	460e      	mov	r6, r1
 8003d84:	4614      	mov	r4, r2
 8003d86:	4605      	mov	r5, r0
 8003d88:	b118      	cbz	r0, 8003d92 <__swbuf_r+0x12>
 8003d8a:	6983      	ldr	r3, [r0, #24]
 8003d8c:	b90b      	cbnz	r3, 8003d92 <__swbuf_r+0x12>
 8003d8e:	f7ff fb81 	bl	8003494 <__sinit>
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <__swbuf_r+0x98>)
 8003d94:	429c      	cmp	r4, r3
 8003d96:	d12b      	bne.n	8003df0 <__swbuf_r+0x70>
 8003d98:	686c      	ldr	r4, [r5, #4]
 8003d9a:	69a3      	ldr	r3, [r4, #24]
 8003d9c:	60a3      	str	r3, [r4, #8]
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	071a      	lsls	r2, r3, #28
 8003da2:	d52f      	bpl.n	8003e04 <__swbuf_r+0x84>
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	b36b      	cbz	r3, 8003e04 <__swbuf_r+0x84>
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	1ac0      	subs	r0, r0, r3
 8003dae:	6963      	ldr	r3, [r4, #20]
 8003db0:	b2f6      	uxtb	r6, r6
 8003db2:	4283      	cmp	r3, r0
 8003db4:	4637      	mov	r7, r6
 8003db6:	dc04      	bgt.n	8003dc2 <__swbuf_r+0x42>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f948 	bl	8004050 <_fflush_r>
 8003dc0:	bb30      	cbnz	r0, 8003e10 <__swbuf_r+0x90>
 8003dc2:	68a3      	ldr	r3, [r4, #8]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	60a3      	str	r3, [r4, #8]
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	6022      	str	r2, [r4, #0]
 8003dce:	701e      	strb	r6, [r3, #0]
 8003dd0:	6963      	ldr	r3, [r4, #20]
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	4283      	cmp	r3, r0
 8003dd6:	d004      	beq.n	8003de2 <__swbuf_r+0x62>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	07db      	lsls	r3, r3, #31
 8003ddc:	d506      	bpl.n	8003dec <__swbuf_r+0x6c>
 8003dde:	2e0a      	cmp	r6, #10
 8003de0:	d104      	bne.n	8003dec <__swbuf_r+0x6c>
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 f933 	bl	8004050 <_fflush_r>
 8003dea:	b988      	cbnz	r0, 8003e10 <__swbuf_r+0x90>
 8003dec:	4638      	mov	r0, r7
 8003dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <__swbuf_r+0x9c>)
 8003df2:	429c      	cmp	r4, r3
 8003df4:	d101      	bne.n	8003dfa <__swbuf_r+0x7a>
 8003df6:	68ac      	ldr	r4, [r5, #8]
 8003df8:	e7cf      	b.n	8003d9a <__swbuf_r+0x1a>
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <__swbuf_r+0xa0>)
 8003dfc:	429c      	cmp	r4, r3
 8003dfe:	bf08      	it	eq
 8003e00:	68ec      	ldreq	r4, [r5, #12]
 8003e02:	e7ca      	b.n	8003d9a <__swbuf_r+0x1a>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 f81e 	bl	8003e48 <__swsetup_r>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d0cb      	beq.n	8003da8 <__swbuf_r+0x28>
 8003e10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e14:	e7ea      	b.n	8003dec <__swbuf_r+0x6c>
 8003e16:	bf00      	nop
 8003e18:	08004354 	.word	0x08004354
 8003e1c:	08004374 	.word	0x08004374
 8003e20:	08004334 	.word	0x08004334

08003e24 <_write_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_write_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fc ff9f 	bl	8000d76 <_write>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_write_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_write_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	200001c8 	.word	0x200001c8

08003e48 <__swsetup_r>:
 8003e48:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <__swsetup_r+0xcc>)
 8003e4a:	b570      	push	{r4, r5, r6, lr}
 8003e4c:	681d      	ldr	r5, [r3, #0]
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460c      	mov	r4, r1
 8003e52:	b125      	cbz	r5, 8003e5e <__swsetup_r+0x16>
 8003e54:	69ab      	ldr	r3, [r5, #24]
 8003e56:	b913      	cbnz	r3, 8003e5e <__swsetup_r+0x16>
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f7ff fb1b 	bl	8003494 <__sinit>
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <__swsetup_r+0xd0>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d10f      	bne.n	8003e84 <__swsetup_r+0x3c>
 8003e64:	686c      	ldr	r4, [r5, #4]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e6c:	0719      	lsls	r1, r3, #28
 8003e6e:	d42c      	bmi.n	8003eca <__swsetup_r+0x82>
 8003e70:	06dd      	lsls	r5, r3, #27
 8003e72:	d411      	bmi.n	8003e98 <__swsetup_r+0x50>
 8003e74:	2309      	movs	r3, #9
 8003e76:	6033      	str	r3, [r6, #0]
 8003e78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e82:	e03e      	b.n	8003f02 <__swsetup_r+0xba>
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <__swsetup_r+0xd4>)
 8003e86:	429c      	cmp	r4, r3
 8003e88:	d101      	bne.n	8003e8e <__swsetup_r+0x46>
 8003e8a:	68ac      	ldr	r4, [r5, #8]
 8003e8c:	e7eb      	b.n	8003e66 <__swsetup_r+0x1e>
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <__swsetup_r+0xd8>)
 8003e90:	429c      	cmp	r4, r3
 8003e92:	bf08      	it	eq
 8003e94:	68ec      	ldreq	r4, [r5, #12]
 8003e96:	e7e6      	b.n	8003e66 <__swsetup_r+0x1e>
 8003e98:	0758      	lsls	r0, r3, #29
 8003e9a:	d512      	bpl.n	8003ec2 <__swsetup_r+0x7a>
 8003e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9e:	b141      	cbz	r1, 8003eb2 <__swsetup_r+0x6a>
 8003ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d002      	beq.n	8003eae <__swsetup_r+0x66>
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f000 f991 	bl	80041d0 <_free_r>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	b94b      	cbnz	r3, 8003ee2 <__swsetup_r+0x9a>
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d003      	beq.n	8003ee2 <__swsetup_r+0x9a>
 8003eda:	4621      	mov	r1, r4
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f92b 	bl	8004138 <__smakebuf_r>
 8003ee2:	89a0      	ldrh	r0, [r4, #12]
 8003ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ee8:	f010 0301 	ands.w	r3, r0, #1
 8003eec:	d00a      	beq.n	8003f04 <__swsetup_r+0xbc>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	6963      	ldr	r3, [r4, #20]
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	61a3      	str	r3, [r4, #24]
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	b943      	cbnz	r3, 8003f0e <__swsetup_r+0xc6>
 8003efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f00:	d1ba      	bne.n	8003e78 <__swsetup_r+0x30>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	0781      	lsls	r1, r0, #30
 8003f06:	bf58      	it	pl
 8003f08:	6963      	ldrpl	r3, [r4, #20]
 8003f0a:	60a3      	str	r3, [r4, #8]
 8003f0c:	e7f4      	b.n	8003ef8 <__swsetup_r+0xb0>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e7f7      	b.n	8003f02 <__swsetup_r+0xba>
 8003f12:	bf00      	nop
 8003f14:	2000000c 	.word	0x2000000c
 8003f18:	08004354 	.word	0x08004354
 8003f1c:	08004374 	.word	0x08004374
 8003f20:	08004334 	.word	0x08004334

08003f24 <_close_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4d06      	ldr	r5, [pc, #24]	; (8003f40 <_close_r+0x1c>)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	f7fc ff3d 	bl	8000dae <_close>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_close_r+0x1a>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_close_r+0x1a>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	200001c8 	.word	0x200001c8

08003f44 <__sflush_r>:
 8003f44:	898a      	ldrh	r2, [r1, #12]
 8003f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	0710      	lsls	r0, r2, #28
 8003f4e:	460c      	mov	r4, r1
 8003f50:	d458      	bmi.n	8004004 <__sflush_r+0xc0>
 8003f52:	684b      	ldr	r3, [r1, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	dc05      	bgt.n	8003f64 <__sflush_r+0x20>
 8003f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	dc02      	bgt.n	8003f64 <__sflush_r+0x20>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f66:	2e00      	cmp	r6, #0
 8003f68:	d0f9      	beq.n	8003f5e <__sflush_r+0x1a>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f70:	682f      	ldr	r7, [r5, #0]
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	d032      	beq.n	8003fdc <__sflush_r+0x98>
 8003f76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	075a      	lsls	r2, r3, #29
 8003f7c:	d505      	bpl.n	8003f8a <__sflush_r+0x46>
 8003f7e:	6863      	ldr	r3, [r4, #4]
 8003f80:	1ac0      	subs	r0, r0, r3
 8003f82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f84:	b10b      	cbz	r3, 8003f8a <__sflush_r+0x46>
 8003f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f88:	1ac0      	subs	r0, r0, r3
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f90:	6a21      	ldr	r1, [r4, #32]
 8003f92:	4628      	mov	r0, r5
 8003f94:	47b0      	blx	r6
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	d106      	bne.n	8003faa <__sflush_r+0x66>
 8003f9c:	6829      	ldr	r1, [r5, #0]
 8003f9e:	291d      	cmp	r1, #29
 8003fa0:	d82c      	bhi.n	8003ffc <__sflush_r+0xb8>
 8003fa2:	4a2a      	ldr	r2, [pc, #168]	; (800404c <__sflush_r+0x108>)
 8003fa4:	40ca      	lsrs	r2, r1
 8003fa6:	07d6      	lsls	r6, r2, #31
 8003fa8:	d528      	bpl.n	8003ffc <__sflush_r+0xb8>
 8003faa:	2200      	movs	r2, #0
 8003fac:	6062      	str	r2, [r4, #4]
 8003fae:	04d9      	lsls	r1, r3, #19
 8003fb0:	6922      	ldr	r2, [r4, #16]
 8003fb2:	6022      	str	r2, [r4, #0]
 8003fb4:	d504      	bpl.n	8003fc0 <__sflush_r+0x7c>
 8003fb6:	1c42      	adds	r2, r0, #1
 8003fb8:	d101      	bne.n	8003fbe <__sflush_r+0x7a>
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	b903      	cbnz	r3, 8003fc0 <__sflush_r+0x7c>
 8003fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8003fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fc2:	602f      	str	r7, [r5, #0]
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	d0ca      	beq.n	8003f5e <__sflush_r+0x1a>
 8003fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fcc:	4299      	cmp	r1, r3
 8003fce:	d002      	beq.n	8003fd6 <__sflush_r+0x92>
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 f8fd 	bl	80041d0 <_free_r>
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8003fda:	e7c1      	b.n	8003f60 <__sflush_r+0x1c>
 8003fdc:	6a21      	ldr	r1, [r4, #32]
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	47b0      	blx	r6
 8003fe4:	1c41      	adds	r1, r0, #1
 8003fe6:	d1c7      	bne.n	8003f78 <__sflush_r+0x34>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0c4      	beq.n	8003f78 <__sflush_r+0x34>
 8003fee:	2b1d      	cmp	r3, #29
 8003ff0:	d001      	beq.n	8003ff6 <__sflush_r+0xb2>
 8003ff2:	2b16      	cmp	r3, #22
 8003ff4:	d101      	bne.n	8003ffa <__sflush_r+0xb6>
 8003ff6:	602f      	str	r7, [r5, #0]
 8003ff8:	e7b1      	b.n	8003f5e <__sflush_r+0x1a>
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	e7ad      	b.n	8003f60 <__sflush_r+0x1c>
 8004004:	690f      	ldr	r7, [r1, #16]
 8004006:	2f00      	cmp	r7, #0
 8004008:	d0a9      	beq.n	8003f5e <__sflush_r+0x1a>
 800400a:	0793      	lsls	r3, r2, #30
 800400c:	680e      	ldr	r6, [r1, #0]
 800400e:	bf08      	it	eq
 8004010:	694b      	ldreq	r3, [r1, #20]
 8004012:	600f      	str	r7, [r1, #0]
 8004014:	bf18      	it	ne
 8004016:	2300      	movne	r3, #0
 8004018:	eba6 0807 	sub.w	r8, r6, r7
 800401c:	608b      	str	r3, [r1, #8]
 800401e:	f1b8 0f00 	cmp.w	r8, #0
 8004022:	dd9c      	ble.n	8003f5e <__sflush_r+0x1a>
 8004024:	6a21      	ldr	r1, [r4, #32]
 8004026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004028:	4643      	mov	r3, r8
 800402a:	463a      	mov	r2, r7
 800402c:	4628      	mov	r0, r5
 800402e:	47b0      	blx	r6
 8004030:	2800      	cmp	r0, #0
 8004032:	dc06      	bgt.n	8004042 <__sflush_r+0xfe>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004040:	e78e      	b.n	8003f60 <__sflush_r+0x1c>
 8004042:	4407      	add	r7, r0
 8004044:	eba8 0800 	sub.w	r8, r8, r0
 8004048:	e7e9      	b.n	800401e <__sflush_r+0xda>
 800404a:	bf00      	nop
 800404c:	20400001 	.word	0x20400001

08004050 <_fflush_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	690b      	ldr	r3, [r1, #16]
 8004054:	4605      	mov	r5, r0
 8004056:	460c      	mov	r4, r1
 8004058:	b913      	cbnz	r3, 8004060 <_fflush_r+0x10>
 800405a:	2500      	movs	r5, #0
 800405c:	4628      	mov	r0, r5
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	b118      	cbz	r0, 800406a <_fflush_r+0x1a>
 8004062:	6983      	ldr	r3, [r0, #24]
 8004064:	b90b      	cbnz	r3, 800406a <_fflush_r+0x1a>
 8004066:	f7ff fa15 	bl	8003494 <__sinit>
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <_fflush_r+0x6c>)
 800406c:	429c      	cmp	r4, r3
 800406e:	d11b      	bne.n	80040a8 <_fflush_r+0x58>
 8004070:	686c      	ldr	r4, [r5, #4]
 8004072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ef      	beq.n	800405a <_fflush_r+0xa>
 800407a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800407c:	07d0      	lsls	r0, r2, #31
 800407e:	d404      	bmi.n	800408a <_fflush_r+0x3a>
 8004080:	0599      	lsls	r1, r3, #22
 8004082:	d402      	bmi.n	800408a <_fflush_r+0x3a>
 8004084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004086:	f7ff faa3 	bl	80035d0 <__retarget_lock_acquire_recursive>
 800408a:	4628      	mov	r0, r5
 800408c:	4621      	mov	r1, r4
 800408e:	f7ff ff59 	bl	8003f44 <__sflush_r>
 8004092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004094:	07da      	lsls	r2, r3, #31
 8004096:	4605      	mov	r5, r0
 8004098:	d4e0      	bmi.n	800405c <_fflush_r+0xc>
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	059b      	lsls	r3, r3, #22
 800409e:	d4dd      	bmi.n	800405c <_fflush_r+0xc>
 80040a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a2:	f7ff fa96 	bl	80035d2 <__retarget_lock_release_recursive>
 80040a6:	e7d9      	b.n	800405c <_fflush_r+0xc>
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <_fflush_r+0x70>)
 80040aa:	429c      	cmp	r4, r3
 80040ac:	d101      	bne.n	80040b2 <_fflush_r+0x62>
 80040ae:	68ac      	ldr	r4, [r5, #8]
 80040b0:	e7df      	b.n	8004072 <_fflush_r+0x22>
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <_fflush_r+0x74>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	bf08      	it	eq
 80040b8:	68ec      	ldreq	r4, [r5, #12]
 80040ba:	e7da      	b.n	8004072 <_fflush_r+0x22>
 80040bc:	08004354 	.word	0x08004354
 80040c0:	08004374 	.word	0x08004374
 80040c4:	08004334 	.word	0x08004334

080040c8 <_lseek_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4d07      	ldr	r5, [pc, #28]	; (80040e8 <_lseek_r+0x20>)
 80040cc:	4604      	mov	r4, r0
 80040ce:	4608      	mov	r0, r1
 80040d0:	4611      	mov	r1, r2
 80040d2:	2200      	movs	r2, #0
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f7fc fe90 	bl	8000dfc <_lseek>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_lseek_r+0x1e>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_lseek_r+0x1e>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	200001c8 	.word	0x200001c8

080040ec <__swhatbuf_r>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	460e      	mov	r6, r1
 80040f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f4:	2900      	cmp	r1, #0
 80040f6:	b096      	sub	sp, #88	; 0x58
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	da08      	bge.n	8004110 <__swhatbuf_r+0x24>
 80040fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	602a      	str	r2, [r5, #0]
 8004106:	061a      	lsls	r2, r3, #24
 8004108:	d410      	bmi.n	800412c <__swhatbuf_r+0x40>
 800410a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800410e:	e00e      	b.n	800412e <__swhatbuf_r+0x42>
 8004110:	466a      	mov	r2, sp
 8004112:	f000 f8bb 	bl	800428c <_fstat_r>
 8004116:	2800      	cmp	r0, #0
 8004118:	dbf1      	blt.n	80040fe <__swhatbuf_r+0x12>
 800411a:	9a01      	ldr	r2, [sp, #4]
 800411c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004124:	425a      	negs	r2, r3
 8004126:	415a      	adcs	r2, r3
 8004128:	602a      	str	r2, [r5, #0]
 800412a:	e7ee      	b.n	800410a <__swhatbuf_r+0x1e>
 800412c:	2340      	movs	r3, #64	; 0x40
 800412e:	2000      	movs	r0, #0
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	b016      	add	sp, #88	; 0x58
 8004134:	bd70      	pop	{r4, r5, r6, pc}
	...

08004138 <__smakebuf_r>:
 8004138:	898b      	ldrh	r3, [r1, #12]
 800413a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800413c:	079d      	lsls	r5, r3, #30
 800413e:	4606      	mov	r6, r0
 8004140:	460c      	mov	r4, r1
 8004142:	d507      	bpl.n	8004154 <__smakebuf_r+0x1c>
 8004144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	6123      	str	r3, [r4, #16]
 800414c:	2301      	movs	r3, #1
 800414e:	6163      	str	r3, [r4, #20]
 8004150:	b002      	add	sp, #8
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	ab01      	add	r3, sp, #4
 8004156:	466a      	mov	r2, sp
 8004158:	f7ff ffc8 	bl	80040ec <__swhatbuf_r>
 800415c:	9900      	ldr	r1, [sp, #0]
 800415e:	4605      	mov	r5, r0
 8004160:	4630      	mov	r0, r6
 8004162:	f7ff fa57 	bl	8003614 <_malloc_r>
 8004166:	b948      	cbnz	r0, 800417c <__smakebuf_r+0x44>
 8004168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800416c:	059a      	lsls	r2, r3, #22
 800416e:	d4ef      	bmi.n	8004150 <__smakebuf_r+0x18>
 8004170:	f023 0303 	bic.w	r3, r3, #3
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	e7e3      	b.n	8004144 <__smakebuf_r+0xc>
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <__smakebuf_r+0x7c>)
 800417e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	6020      	str	r0, [r4, #0]
 8004184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	9b00      	ldr	r3, [sp, #0]
 800418c:	6163      	str	r3, [r4, #20]
 800418e:	9b01      	ldr	r3, [sp, #4]
 8004190:	6120      	str	r0, [r4, #16]
 8004192:	b15b      	cbz	r3, 80041ac <__smakebuf_r+0x74>
 8004194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004198:	4630      	mov	r0, r6
 800419a:	f000 f889 	bl	80042b0 <_isatty_r>
 800419e:	b128      	cbz	r0, 80041ac <__smakebuf_r+0x74>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	89a0      	ldrh	r0, [r4, #12]
 80041ae:	4305      	orrs	r5, r0
 80041b0:	81a5      	strh	r5, [r4, #12]
 80041b2:	e7cd      	b.n	8004150 <__smakebuf_r+0x18>
 80041b4:	0800342d 	.word	0x0800342d

080041b8 <__malloc_lock>:
 80041b8:	4801      	ldr	r0, [pc, #4]	; (80041c0 <__malloc_lock+0x8>)
 80041ba:	f7ff ba09 	b.w	80035d0 <__retarget_lock_acquire_recursive>
 80041be:	bf00      	nop
 80041c0:	200001bc 	.word	0x200001bc

080041c4 <__malloc_unlock>:
 80041c4:	4801      	ldr	r0, [pc, #4]	; (80041cc <__malloc_unlock+0x8>)
 80041c6:	f7ff ba04 	b.w	80035d2 <__retarget_lock_release_recursive>
 80041ca:	bf00      	nop
 80041cc:	200001bc 	.word	0x200001bc

080041d0 <_free_r>:
 80041d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d044      	beq.n	8004260 <_free_r+0x90>
 80041d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041da:	9001      	str	r0, [sp, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f1a1 0404 	sub.w	r4, r1, #4
 80041e2:	bfb8      	it	lt
 80041e4:	18e4      	addlt	r4, r4, r3
 80041e6:	f7ff ffe7 	bl	80041b8 <__malloc_lock>
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <_free_r+0x94>)
 80041ec:	9801      	ldr	r0, [sp, #4]
 80041ee:	6813      	ldr	r3, [r2, #0]
 80041f0:	b933      	cbnz	r3, 8004200 <_free_r+0x30>
 80041f2:	6063      	str	r3, [r4, #4]
 80041f4:	6014      	str	r4, [r2, #0]
 80041f6:	b003      	add	sp, #12
 80041f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041fc:	f7ff bfe2 	b.w	80041c4 <__malloc_unlock>
 8004200:	42a3      	cmp	r3, r4
 8004202:	d908      	bls.n	8004216 <_free_r+0x46>
 8004204:	6825      	ldr	r5, [r4, #0]
 8004206:	1961      	adds	r1, r4, r5
 8004208:	428b      	cmp	r3, r1
 800420a:	bf01      	itttt	eq
 800420c:	6819      	ldreq	r1, [r3, #0]
 800420e:	685b      	ldreq	r3, [r3, #4]
 8004210:	1949      	addeq	r1, r1, r5
 8004212:	6021      	streq	r1, [r4, #0]
 8004214:	e7ed      	b.n	80041f2 <_free_r+0x22>
 8004216:	461a      	mov	r2, r3
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b10b      	cbz	r3, 8004220 <_free_r+0x50>
 800421c:	42a3      	cmp	r3, r4
 800421e:	d9fa      	bls.n	8004216 <_free_r+0x46>
 8004220:	6811      	ldr	r1, [r2, #0]
 8004222:	1855      	adds	r5, r2, r1
 8004224:	42a5      	cmp	r5, r4
 8004226:	d10b      	bne.n	8004240 <_free_r+0x70>
 8004228:	6824      	ldr	r4, [r4, #0]
 800422a:	4421      	add	r1, r4
 800422c:	1854      	adds	r4, r2, r1
 800422e:	42a3      	cmp	r3, r4
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	d1e0      	bne.n	80041f6 <_free_r+0x26>
 8004234:	681c      	ldr	r4, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	6053      	str	r3, [r2, #4]
 800423a:	4421      	add	r1, r4
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	e7da      	b.n	80041f6 <_free_r+0x26>
 8004240:	d902      	bls.n	8004248 <_free_r+0x78>
 8004242:	230c      	movs	r3, #12
 8004244:	6003      	str	r3, [r0, #0]
 8004246:	e7d6      	b.n	80041f6 <_free_r+0x26>
 8004248:	6825      	ldr	r5, [r4, #0]
 800424a:	1961      	adds	r1, r4, r5
 800424c:	428b      	cmp	r3, r1
 800424e:	bf04      	itt	eq
 8004250:	6819      	ldreq	r1, [r3, #0]
 8004252:	685b      	ldreq	r3, [r3, #4]
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	bf04      	itt	eq
 8004258:	1949      	addeq	r1, r1, r5
 800425a:	6021      	streq	r1, [r4, #0]
 800425c:	6054      	str	r4, [r2, #4]
 800425e:	e7ca      	b.n	80041f6 <_free_r+0x26>
 8004260:	b003      	add	sp, #12
 8004262:	bd30      	pop	{r4, r5, pc}
 8004264:	200001c0 	.word	0x200001c0

08004268 <_read_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d07      	ldr	r5, [pc, #28]	; (8004288 <_read_r+0x20>)
 800426c:	4604      	mov	r4, r0
 800426e:	4608      	mov	r0, r1
 8004270:	4611      	mov	r1, r2
 8004272:	2200      	movs	r2, #0
 8004274:	602a      	str	r2, [r5, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f7fc fd60 	bl	8000d3c <_read>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_read_r+0x1e>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_read_r+0x1e>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	200001c8 	.word	0x200001c8

0800428c <_fstat_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d07      	ldr	r5, [pc, #28]	; (80042ac <_fstat_r+0x20>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	f7fc fd94 	bl	8000dc6 <_fstat>
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	d102      	bne.n	80042a8 <_fstat_r+0x1c>
 80042a2:	682b      	ldr	r3, [r5, #0]
 80042a4:	b103      	cbz	r3, 80042a8 <_fstat_r+0x1c>
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
 80042aa:	bf00      	nop
 80042ac:	200001c8 	.word	0x200001c8

080042b0 <_isatty_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4d06      	ldr	r5, [pc, #24]	; (80042cc <_isatty_r+0x1c>)
 80042b4:	2300      	movs	r3, #0
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	f7fc fd93 	bl	8000de6 <_isatty>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_isatty_r+0x1a>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_isatty_r+0x1a>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	200001c8 	.word	0x200001c8

080042d0 <_init>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr

080042dc <_fini>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	bf00      	nop
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr
