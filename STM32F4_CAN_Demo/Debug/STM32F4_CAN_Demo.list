
STM32F4_CAN_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004864  08004864  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800486c  0800486c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000000cc  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b777  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e94  00000000  00000000  0002b81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000880  00000000  00000000  0002e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ffe3  00000000  00000000  0002e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbe0  00000000  00000000  0004e863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbc68  00000000  00000000  0005a443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001160ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c84  00000000  00000000  001160fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800474c 	.word	0x0800474c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800474c 	.word	0x0800474c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_CAN1_Init+0x68>)
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <MX_CAN1_Init+0x6c>)
 800057c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_CAN1_Init+0x68>)
 8000580:	2204      	movs	r2, #4
 8000582:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_CAN1_Init+0x68>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_CAN1_Init+0x68>)
 800058c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000590:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_CAN1_Init+0x68>)
 8000594:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000598:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_CAN1_Init+0x68>)
 800059c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80005a0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_CAN1_Init+0x68>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_CAN1_Init+0x68>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_CAN1_Init+0x68>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_CAN1_Init+0x68>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_CAN1_Init+0x68>)
 80005bc:	2200      	movs	r2, #0
 80005be:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_CAN1_Init+0x68>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_CAN1_Init+0x68>)
 80005c8:	f000 fc90 	bl	8000eec <HAL_CAN_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005d2:	f000 f99f 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000094 	.word	0x20000094
 80005e0:	40006400 	.word	0x40006400

080005e4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_CAN2_Init+0x68>)
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <MX_CAN2_Init+0x6c>)
 80005ec:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_CAN2_Init+0x68>)
 80005f0:	2204      	movs	r2, #4
 80005f2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_CAN2_Init+0x68>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_CAN2_Init+0x68>)
 80005fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000600:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_CAN2_Init+0x68>)
 8000604:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000608:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_CAN2_Init+0x68>)
 800060c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000610:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_CAN2_Init+0x68>)
 8000614:	2200      	movs	r2, #0
 8000616:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_CAN2_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_CAN2_Init+0x68>)
 8000620:	2200      	movs	r2, #0
 8000622:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_CAN2_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_CAN2_Init+0x68>)
 800062c:	2200      	movs	r2, #0
 800062e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_CAN2_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_CAN2_Init+0x68>)
 8000638:	f000 fc58 	bl	8000eec <HAL_CAN_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000642:	f000 f967 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000bc 	.word	0x200000bc
 8000650:	40006800 	.word	0x40006800

08000654 <CAN_Transmit>:
    FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
  }
}

void CAN_Transmit(CAN_HandleTypeDef* hcan)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	; 0x30
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef Can_Header = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
  HAL_StatusTypeDef Status;
  uint32_t Mailbox = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 fe10 	bl	8001298 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000678:	62f8      	str	r0, [r7, #44]	; 0x2c
  if(FreeLevel == 0) return;
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b00      	cmp	r3, #0
 800067e:	d021      	beq.n	80006c4 <CAN_Transmit+0x70>

  Can_Header.DLC = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	623b      	str	r3, [r7, #32]
  Can_Header.StdId = CAN_Transmiter_ID;
 8000684:	2355      	movs	r3, #85	; 0x55
 8000686:	613b      	str	r3, [r7, #16]


  Status = HAL_CAN_AddTxMessage(hcan, &Can_Header, CAN_TX_Buffer, &Mailbox);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	f107 0110 	add.w	r1, r7, #16
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <CAN_Transmit+0x78>)
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 fd25 	bl	80010e2 <HAL_CAN_AddTxMessage>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if(Status == HAL_OK)
 800069e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d105      	bne.n	80006b2 <CAN_Transmit+0x5e>
  {
    printf("Message in mailbox %ld \r\n", Mailbox);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <CAN_Transmit+0x7c>)
 80006ac:	f003 f8c0 	bl	8003830 <iprintf>
 80006b0:	e009      	b.n	80006c6 <CAN_Transmit+0x72>
  }
  else
  {
    printf("Transmit Error Status %d Code = 0x%.8lx \r\n", Status, hcan->ErrorCode);
 80006b2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	461a      	mov	r2, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <CAN_Transmit+0x80>)
 80006be:	f003 f8b7 	bl	8003830 <iprintf>
 80006c2:	e000      	b.n	80006c6 <CAN_Transmit+0x72>
  if(FreeLevel == 0) return;
 80006c4:	bf00      	nop
  }
}
 80006c6:	3730      	adds	r7, #48	; 0x30
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	0800476c 	.word	0x0800476c
 80006d4:	08004788 	.word	0x08004788

080006d8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80006e0:	1d39      	adds	r1, r7, #4
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	2201      	movs	r2, #1
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <__io_putchar+0x20>)
 80006e8:	f002 f8a9 	bl	800283e <HAL_UART_Transmit>
  return ch;
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000e4 	.word	0x200000e4

080006fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART1_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000734:	f002 f836 	bl	80027a4 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f8e9 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000e4 	.word	0x200000e4
 800074c:	40011000 	.word	0x40011000

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 fb58 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f822 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f000 f88a 	bl	8000874 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000760:	f7ff ff08 	bl	8000574 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000764:	f7ff ff3e 	bl	80005e4 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 8000768:	f7ff ffc8 	bl	80006fc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800076c:	2102      	movs	r1, #2
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <main+0x48>)
 8000770:	f000 fdc7 	bl	8001302 <HAL_CAN_ActivateNotification>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <main+0x2e>
  {
    Error_Handler();
 800077a:	f000 f8cb 	bl	8000914 <Error_Handler>
  }
  while (1)
  {
    CAN_Transmit(&hcan1);
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <main+0x48>)
 8000780:	f7ff ff68 	bl	8000654 <CAN_Transmit>
    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000784:	2102      	movs	r1, #2
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <main+0x4c>)
 8000788:	f000 fdbb 	bl	8001302 <HAL_CAN_ActivateNotification>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f5      	beq.n	800077e <main+0x2e>
    {
      Error_Handler();
 8000792:	f000 f8bf 	bl	8000914 <Error_Handler>
    CAN_Transmit(&hcan1);
 8000796:	e7f2      	b.n	800077e <main+0x2e>
 8000798:	20000094 	.word	0x20000094
 800079c:	200000bc 	.word	0x200000bc

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2230      	movs	r2, #48	; 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 f836 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a27      	ldr	r2, [pc, #156]	; (800086c <SystemClock_Config+0xcc>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <SystemClock_Config+0xcc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SystemClock_Config+0xd0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <SystemClock_Config+0xd0>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <SystemClock_Config+0xd0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000810:	2308      	movs	r3, #8
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000814:	23a8      	movs	r3, #168	; 0xa8
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fb25 	bl	8001e74 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000830:	f000 f870 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2105      	movs	r1, #5
 8000852:	4618      	mov	r0, r3
 8000854:	f001 fd86 	bl	8002364 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800085e:	f000 f859 	bl	8000914 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	; 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_GPIO_Init+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <MX_GPIO_Init+0x98>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_GPIO_Init+0x98>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_GPIO_Init+0x98>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <MX_GPIO_Init+0x98>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_GPIO_Init+0x98>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_GPIO_Init+0x98>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <MX_GPIO_Init+0x98>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_GPIO_Init+0x98>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2101      	movs	r1, #1
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x9c>)
 80008e4:	f001 faac 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0x9c>)
 8000900:	f001 f902 	bl	8001b08 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a52      	ldr	r2, [pc, #328]	; (8000ad8 <HAL_CAN_MspInit+0x168>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d146      	bne.n	8000a20 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000992:	4b52      	ldr	r3, [pc, #328]	; (8000adc <HAL_CAN_MspInit+0x16c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a50      	ldr	r2, [pc, #320]	; (8000adc <HAL_CAN_MspInit+0x16c>)
 800099a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800099c:	4b4f      	ldr	r3, [pc, #316]	; (8000adc <HAL_CAN_MspInit+0x16c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10d      	bne.n	80009c0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 80009ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a45      	ldr	r2, [pc, #276]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009ee:	2309      	movs	r3, #9
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	483a      	ldr	r0, [pc, #232]	; (8000ae4 <HAL_CAN_MspInit+0x174>)
 80009fa:	f001 f885 	bl	8001b08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2013      	movs	r0, #19
 8000a04:	f000 ffb7 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a08:	2013      	movs	r0, #19
 8000a0a:	f000 ffd0 	bl	80019ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2014      	movs	r0, #20
 8000a14:	f000 ffaf 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a18:	2014      	movs	r0, #20
 8000a1a:	f000 ffc8 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000a1e:	e057      	b.n	8000ad0 <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <HAL_CAN_MspInit+0x178>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d152      	bne.n	8000ad0 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_CAN_MspInit+0x16c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HAL_CAN_MspInit+0x16c>)
 8000a4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_CAN_MspInit+0x16c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10d      	bne.n	8000a74 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_CAN_MspInit+0x170>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a90:	2360      	movs	r3, #96	; 0x60
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000aa0:	2309      	movs	r3, #9
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4810      	ldr	r0, [pc, #64]	; (8000aec <HAL_CAN_MspInit+0x17c>)
 8000aac:	f001 f82c 	bl	8001b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	203f      	movs	r0, #63	; 0x3f
 8000ab6:	f000 ff5e 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000aba:	203f      	movs	r0, #63	; 0x3f
 8000abc:	f000 ff77 	bl	80019ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2040      	movs	r0, #64	; 0x40
 8000ac6:	f000 ff56 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000aca:	2040      	movs	r0, #64	; 0x40
 8000acc:	f000 ff6f 	bl	80019ae <HAL_NVIC_EnableIRQ>
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40006400 	.word	0x40006400
 8000adc:	20000128 	.word	0x20000128
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40006800 	.word	0x40006800
 8000aec:	40020400 	.word	0x40020400

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <HAL_UART_MspInit+0x94>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d134      	bne.n	8000b7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_UART_MspInit+0x98>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <HAL_UART_MspInit+0x98>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0x98>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_UART_MspInit+0x98>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0x98>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_UART_MspInit+0x98>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_UART_MspInit+0x9c>)
 8000b68:	f000 ffce 	bl	8001b08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2025      	movs	r0, #37	; 0x25
 8000b72:	f000 ff00 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b76:	2025      	movs	r0, #37	; 0x25
 8000b78:	f000 ff19 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f966 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <CAN1_TX_IRQHandler+0x10>)
 8000bea:	f000 fbb0 	bl	800134e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094

08000bf8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <CAN1_RX0_IRQHandler+0x10>)
 8000bfe:	f000 fba6 	bl	800134e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000094 	.word	0x20000094

08000c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <USART1_IRQHandler+0x10>)
 8000c12:	f001 fea7 	bl	8002964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000e4 	.word	0x200000e4

08000c20 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <CAN2_TX_IRQHandler+0x10>)
 8000c26:	f000 fb92 	bl	800134e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000bc 	.word	0x200000bc

08000c34 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <CAN2_RX0_IRQHandler+0x10>)
 8000c3a:	f000 fb88 	bl	800134e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000bc 	.word	0x200000bc

08000c48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e00a      	b.n	8000c70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	4601      	mov	r1, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	b2ca      	uxtb	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf0      	blt.n	8000c5a <_read+0x12>
	}

return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e009      	b.n	8000ca8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd1b 	bl	80006d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf1      	blt.n	8000c94 <_write+0x12>
	}
	return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_close>:

int _close(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
	return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f002 fd3a 	bl	80037cc <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	2000012c 	.word	0x2000012c
 8000d8c:	20000148 	.word	0x20000148

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd7 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 fcf9 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fcb3 	bl	8000750 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000df8:	08004874 	.word	0x08004874
  ldr r2, =_sbss
 8000dfc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e00:	20000144 	.word	0x20000144

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fd95 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fd70 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fdad 	bl	80019ca <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e88:	f000 fd75 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000010 	.word	0x20000010
 8000ed0:	20000130 	.word	0x20000130

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000130 	.word	0x20000130

08000eec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0ed      	b.n	80010da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fd30 	bl	8000970 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f20:	f7ff ffd8 	bl	8000ed4 <HAL_GetTick>
 8000f24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f26:	e012      	b.n	8000f4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f28:	f7ff ffd4 	bl	8000ed4 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b0a      	cmp	r3, #10
 8000f34:	d90b      	bls.n	8000f4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2205      	movs	r2, #5
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e0c5      	b.n	80010da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0e5      	beq.n	8000f28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0202 	bic.w	r2, r2, #2
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f6c:	f7ff ffb2 	bl	8000ed4 <HAL_GetTick>
 8000f70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f72:	e012      	b.n	8000f9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f74:	f7ff ffae 	bl	8000ed4 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d90b      	bls.n	8000f9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2205      	movs	r2, #5
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e09f      	b.n	80010da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e5      	bne.n	8000f74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7e1b      	ldrb	r3, [r3, #24]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e007      	b.n	8000fd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7e5b      	ldrb	r3, [r3, #25]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7e9b      	ldrb	r3, [r3, #26]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d108      	bne.n	8001016 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0220 	orr.w	r2, r2, #32
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e007      	b.n	8001026 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0220 	bic.w	r2, r2, #32
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7edb      	ldrb	r3, [r3, #27]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0210 	bic.w	r2, r2, #16
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e007      	b.n	8001050 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0210 	orr.w	r2, r2, #16
 800104e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7f1b      	ldrb	r3, [r3, #28]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d108      	bne.n	800106a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0208 	orr.w	r2, r2, #8
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e007      	b.n	800107a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0208 	bic.w	r2, r2, #8
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7f5b      	ldrb	r3, [r3, #29]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d108      	bne.n	8001094 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f042 0204 	orr.w	r2, r2, #4
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	e007      	b.n	80010a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0204 	bic.w	r2, r2, #4
 80010a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	ea42 0103 	orr.w	r1, r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b089      	sub	sp, #36	; 0x24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d003      	beq.n	800110e <HAL_CAN_AddTxMessage+0x2c>
 8001106:	7ffb      	ldrb	r3, [r7, #31]
 8001108:	2b02      	cmp	r3, #2
 800110a:	f040 80b8 	bne.w	800127e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80a0 	beq.w	800126e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	0e1b      	lsrs	r3, r3, #24
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d907      	bls.n	800114e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e09e      	b.n	800128c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10d      	bne.n	800117c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	6809      	ldr	r1, [r1, #0]
 800116e:	431a      	orrs	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3318      	adds	r3, #24
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	440b      	add	r3, r1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e00f      	b.n	800119c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001186:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118c:	68f9      	ldr	r1, [r7, #12]
 800118e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001190:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3318      	adds	r3, #24
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	440b      	add	r3, r1
 800119a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3318      	adds	r3, #24
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	3304      	adds	r3, #4
 80011ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	7d1b      	ldrb	r3, [r3, #20]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d111      	bne.n	80011dc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3318      	adds	r3, #24
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3304      	adds	r3, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	6811      	ldr	r1, [r2, #0]
 80011cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3318      	adds	r3, #24
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	440b      	add	r3, r1
 80011d8:	3304      	adds	r3, #4
 80011da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3307      	adds	r3, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	061a      	lsls	r2, r3, #24
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3306      	adds	r3, #6
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3305      	adds	r3, #5
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	4313      	orrs	r3, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	3204      	adds	r2, #4
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	4610      	mov	r0, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	6811      	ldr	r1, [r2, #0]
 8001204:	ea43 0200 	orr.w	r2, r3, r0
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	440b      	add	r3, r1
 800120e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001212:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3303      	adds	r3, #3
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	061a      	lsls	r2, r3, #24
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3302      	adds	r3, #2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	4313      	orrs	r3, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	4610      	mov	r0, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	ea43 0200 	orr.w	r2, r3, r0
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	440b      	add	r3, r1
 8001244:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001248:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3318      	adds	r3, #24
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6811      	ldr	r1, [r2, #0]
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3318      	adds	r3, #24
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e00e      	b.n	800128c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e006      	b.n	800128c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
  }
}
 800128c:	4618      	mov	r0, r3
 800128e:	3724      	adds	r7, #36	; 0x24
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012aa:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d002      	beq.n	80012b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d11d      	bne.n	80012f4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3301      	adds	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001312:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d002      	beq.n	8001320 <HAL_CAN_ActivateNotification+0x1e>
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d109      	bne.n	8001334 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6959      	ldr	r1, [r3, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	e006      	b.n	8001342 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
  }
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b08a      	sub	sp, #40	; 0x28
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d07c      	beq.n	800148e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d023      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f983 	bl	80016bc <HAL_CAN_TxMailbox0CompleteCallback>
 80013b6:	e016      	b.n	80013e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e00c      	b.n	80013e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	e002      	b.n	80013e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f989 	bl	80016f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d024      	beq.n	800143a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f963 	bl	80016d0 <HAL_CAN_TxMailbox1CompleteCallback>
 800140a:	e016      	b.n	800143a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	e00c      	b.n	800143a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
 8001432:	e002      	b.n	800143a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f969 	bl	800170c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d024      	beq.n	800148e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800144c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f943 	bl	80016e4 <HAL_CAN_TxMailbox2CompleteCallback>
 800145e:	e016      	b.n	800148e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	e00c      	b.n	800148e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d004      	beq.n	8001488 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
 8001486:	e002      	b.n	800148e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f949 	bl	8001720 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2210      	movs	r2, #16
 80014b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2208      	movs	r2, #8
 80014cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f93a 	bl	8001748 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f921 	bl	8001734 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2210      	movs	r2, #16
 8001514:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2208      	movs	r2, #8
 8001530:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f91c 	bl	8001770 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f903 	bl	800175c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00b      	beq.n	8001578 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2210      	movs	r2, #16
 8001570:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f906 	bl	8001784 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2208      	movs	r2, #8
 8001592:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f8ff 	bl	8001798 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d07b      	beq.n	800169c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d072      	beq.n	8001694 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001608:	2b00      	cmp	r3, #0
 800160a:	d043      	beq.n	8001694 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001612:	2b00      	cmp	r3, #0
 8001614:	d03e      	beq.n	8001694 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800161c:	2b60      	cmp	r3, #96	; 0x60
 800161e:	d02b      	beq.n	8001678 <HAL_CAN_IRQHandler+0x32a>
 8001620:	2b60      	cmp	r3, #96	; 0x60
 8001622:	d82e      	bhi.n	8001682 <HAL_CAN_IRQHandler+0x334>
 8001624:	2b50      	cmp	r3, #80	; 0x50
 8001626:	d022      	beq.n	800166e <HAL_CAN_IRQHandler+0x320>
 8001628:	2b50      	cmp	r3, #80	; 0x50
 800162a:	d82a      	bhi.n	8001682 <HAL_CAN_IRQHandler+0x334>
 800162c:	2b40      	cmp	r3, #64	; 0x40
 800162e:	d019      	beq.n	8001664 <HAL_CAN_IRQHandler+0x316>
 8001630:	2b40      	cmp	r3, #64	; 0x40
 8001632:	d826      	bhi.n	8001682 <HAL_CAN_IRQHandler+0x334>
 8001634:	2b30      	cmp	r3, #48	; 0x30
 8001636:	d010      	beq.n	800165a <HAL_CAN_IRQHandler+0x30c>
 8001638:	2b30      	cmp	r3, #48	; 0x30
 800163a:	d822      	bhi.n	8001682 <HAL_CAN_IRQHandler+0x334>
 800163c:	2b10      	cmp	r3, #16
 800163e:	d002      	beq.n	8001646 <HAL_CAN_IRQHandler+0x2f8>
 8001640:	2b20      	cmp	r3, #32
 8001642:	d005      	beq.n	8001650 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001644:	e01d      	b.n	8001682 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800164e:	e019      	b.n	8001684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001658:	e014      	b.n	8001684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001662:	e00f      	b.n	8001684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800166c:	e00a      	b.n	8001684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001676:	e005      	b.n	8001684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001680:	e000      	b.n	8001684 <HAL_CAN_IRQHandler+0x336>
            break;
 8001682:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001692:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2204      	movs	r2, #4
 800169a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f87c 	bl	80017ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff29 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff3e 	bl	8001808 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff31 	bl	8001824 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fa70 	bl	8000ed4 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d008      	beq.n	8001a14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e052      	b.n	8001aba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0216 	bic.w	r2, r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d103      	bne.n	8001a44 <HAL_DMA_Abort+0x62>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0208 	bic.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a64:	e013      	b.n	8001a8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a66:	f7ff fa35 	bl	8000ed4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d90c      	bls.n	8001a8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e015      	b.n	8001aba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e4      	bne.n	8001a66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	223f      	movs	r2, #63	; 0x3f
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d004      	beq.n	8001ae0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e00c      	b.n	8001afa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2205      	movs	r2, #5
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e16b      	b.n	8001dfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 815a 	bne.w	8001df6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80b4 	beq.w	8001df6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <HAL_GPIO_Init+0x30c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a5f      	ldr	r2, [pc, #380]	; (8001e14 <HAL_GPIO_Init+0x30c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_GPIO_Init+0x30c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a5b      	ldr	r2, [pc, #364]	; (8001e18 <HAL_GPIO_Init+0x310>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_GPIO_Init+0x314>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d02b      	beq.n	8001d2e <HAL_GPIO_Init+0x226>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_GPIO_Init+0x318>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d025      	beq.n	8001d2a <HAL_GPIO_Init+0x222>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a50      	ldr	r2, [pc, #320]	; (8001e24 <HAL_GPIO_Init+0x31c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01f      	beq.n	8001d26 <HAL_GPIO_Init+0x21e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4f      	ldr	r2, [pc, #316]	; (8001e28 <HAL_GPIO_Init+0x320>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0x21a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4e      	ldr	r2, [pc, #312]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x216>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4d      	ldr	r2, [pc, #308]	; (8001e30 <HAL_GPIO_Init+0x328>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x212>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4c      	ldr	r2, [pc, #304]	; (8001e34 <HAL_GPIO_Init+0x32c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x20e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4b      	ldr	r2, [pc, #300]	; (8001e38 <HAL_GPIO_Init+0x330>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x20a>
 8001d0e:	2307      	movs	r3, #7
 8001d10:	e00e      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d12:	2308      	movs	r3, #8
 8001d14:	e00c      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d16:	2306      	movs	r3, #6
 8001d18:	e00a      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x228>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d40:	4935      	ldr	r1, [pc, #212]	; (8001e18 <HAL_GPIO_Init+0x310>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f67f ae90 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40021400 	.word	0x40021400
 8001e34:	40021800 	.word	0x40021800
 8001e38:	40021c00 	.word	0x40021c00
 8001e3c:	40013c00 	.word	0x40013c00

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e5c:	e003      	b.n	8001e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e267      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d075      	beq.n	8001f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e92:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b85      	ldr	r3, [pc, #532]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e242      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x74>
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a75      	ldr	r2, [pc, #468]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b70      	ldr	r3, [pc, #448]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6f      	ldr	r2, [pc, #444]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6c      	ldr	r2, [pc, #432]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a68      	ldr	r2, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ffd2 	bl	8000ed4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe ffce 	bl	8000ed4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e207      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe ffbe 	bl	8000ed4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ffba 	bl	8000ed4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1f3      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1c7      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4937      	ldr	r1, [pc, #220]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x244>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe ff73 	bl	8000ed4 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7fe ff6f 	bl	8000ed4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1a8      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4925      	ldr	r1, [pc, #148]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x244>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe ff52 	bl	8000ed4 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002034:	f7fe ff4e 	bl	8000ed4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e187      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d036      	beq.n	80020cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_RCC_OscConfig+0x248>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe ff32 	bl	8000ed4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe ff2e 	bl	8000ed4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e167      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x200>
 8002092:	e01b      	b.n	80020cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x248>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe ff1b 	bl	8000ed4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e00e      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a2:	f7fe ff17 	bl	8000ed4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d907      	bls.n	80020c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e150      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	42470000 	.word	0x42470000
 80020bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ea      	bne.n	80020a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8097 	beq.w	8002208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a7c      	ldr	r2, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b7a      	ldr	r3, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b77      	ldr	r3, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a73      	ldr	r2, [pc, #460]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7fe fed7 	bl	8000ed4 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7fe fed3 	bl	8000ed4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e10c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x2ea>
 8002150:	4b64      	ldr	r3, [pc, #400]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a63      	ldr	r2, [pc, #396]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x30c>
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a5e      	ldr	r2, [pc, #376]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a5b      	ldr	r2, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 8002180:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a57      	ldr	r2, [pc, #348]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a54      	ldr	r2, [pc, #336]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0304 	bic.w	r3, r3, #4
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fe98 	bl	8000ed4 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fe94 	bl	8000ed4 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0cb      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ee      	beq.n	80021a8 <HAL_RCC_OscConfig+0x334>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7fe fe82 	bl	8000ed4 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fe7e 	bl	8000ed4 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0b5      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ee      	bne.n	80021d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a1 	beq.w	8002354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d05c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d141      	bne.n	80022aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fe52 	bl	8000ed4 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fe4e 	bl	8000ed4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e087      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	3b01      	subs	r3, #1
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	491b      	ldr	r1, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fe27 	bl	8000ed4 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228a:	f7fe fe23 	bl	8000ed4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e05c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x416>
 80022a8:	e054      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fe10 	bl	8000ed4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fe0c 	bl	8000ed4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e045      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
 80022d6:	e03d      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e038      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d028      	beq.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d121      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11a      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002328:	4293      	cmp	r3, r2
 800232a:	d111      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cc      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90c      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d044      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d119      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e067      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe fd3e 	bl	8000ed4 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe fd3a 	bl	8000ed4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20c      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fc9e 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00
 8002520:	40023800 	.word	0x40023800
 8002524:	080047b4 	.word	0x080047b4
 8002528:	20000008 	.word	0x20000008
 800252c:	2000000c 	.word	0x2000000c

08002530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002534:	b094      	sub	sp, #80	; 0x50
 8002536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
 800253c:	2300      	movs	r3, #0
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002540:	2300      	movs	r3, #0
 8002542:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002548:	4b79      	ldr	r3, [pc, #484]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d00d      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 8002554:	2b08      	cmp	r3, #8
 8002556:	f200 80e1 	bhi.w	800271c <HAL_RCC_GetSysClockFreq+0x1ec>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x34>
 800255e:	2b04      	cmp	r3, #4
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x3a>
 8002562:	e0db      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_GetSysClockFreq+0x204>)
 8002566:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002568:	e0db      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256a:	4b73      	ldr	r3, [pc, #460]	; (8002738 <HAL_RCC_GetSysClockFreq+0x208>)
 800256c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800256e:	e0d8      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b6d      	ldr	r3, [pc, #436]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	2200      	movs	r2, #0
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002590:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025a2:	4622      	mov	r2, r4
 80025a4:	462b      	mov	r3, r5
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4621      	mov	r1, r4
 80025bc:	1a51      	subs	r1, r2, r1
 80025be:	6139      	str	r1, [r7, #16]
 80025c0:	4629      	mov	r1, r5
 80025c2:	eb63 0301 	sbc.w	r3, r3, r1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d4:	4659      	mov	r1, fp
 80025d6:	018b      	lsls	r3, r1, #6
 80025d8:	4651      	mov	r1, sl
 80025da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025de:	4651      	mov	r1, sl
 80025e0:	018a      	lsls	r2, r1, #6
 80025e2:	4651      	mov	r1, sl
 80025e4:	ebb2 0801 	subs.w	r8, r2, r1
 80025e8:	4659      	mov	r1, fp
 80025ea:	eb63 0901 	sbc.w	r9, r3, r1
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002602:	4690      	mov	r8, r2
 8002604:	4699      	mov	r9, r3
 8002606:	4623      	mov	r3, r4
 8002608:	eb18 0303 	adds.w	r3, r8, r3
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	462b      	mov	r3, r5
 8002610:	eb49 0303 	adc.w	r3, r9, r3
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002622:	4629      	mov	r1, r5
 8002624:	024b      	lsls	r3, r1, #9
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800262c:	4621      	mov	r1, r4
 800262e:	024a      	lsls	r2, r1, #9
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002636:	2200      	movs	r2, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
 800263a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800263c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002640:	f7fd fe16 	bl	8000270 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4613      	mov	r3, r2
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800264c:	e058      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	4618      	mov	r0, r3
 8002658:	4611      	mov	r1, r2
 800265a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002668:	4642      	mov	r2, r8
 800266a:	464b      	mov	r3, r9
 800266c:	f04f 0000 	mov.w	r0, #0
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	0159      	lsls	r1, r3, #5
 8002676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267a:	0150      	lsls	r0, r2, #5
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4641      	mov	r1, r8
 8002682:	ebb2 0a01 	subs.w	sl, r2, r1
 8002686:	4649      	mov	r1, r9
 8002688:	eb63 0b01 	sbc.w	fp, r3, r1
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800269c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026a0:	ebb2 040a 	subs.w	r4, r2, sl
 80026a4:	eb63 050b 	sbc.w	r5, r3, fp
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	00eb      	lsls	r3, r5, #3
 80026b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b6:	00e2      	lsls	r2, r4, #3
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	4643      	mov	r3, r8
 80026be:	18e3      	adds	r3, r4, r3
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	464b      	mov	r3, r9
 80026c4:	eb45 0303 	adc.w	r3, r5, r3
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d6:	4629      	mov	r1, r5
 80026d8:	028b      	lsls	r3, r1, #10
 80026da:	4621      	mov	r1, r4
 80026dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e0:	4621      	mov	r1, r4
 80026e2:	028a      	lsls	r2, r1, #10
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ea:	2200      	movs	r2, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	61fa      	str	r2, [r7, #28]
 80026f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f4:	f7fd fdbc 	bl	8000270 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4613      	mov	r3, r2
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetSysClockFreq+0x204>)
 800271e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002724:	4618      	mov	r0, r3
 8002726:	3750      	adds	r7, #80	; 0x50
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	00f42400 	.word	0x00f42400
 8002738:	007a1200 	.word	0x007a1200

0800273c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_RCC_GetHCLKFreq+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000008 	.word	0x20000008

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002758:	f7ff fff0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0a9b      	lsrs	r3, r3, #10
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	080047c4 	.word	0x080047c4

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002780:	f7ff ffdc 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0b5b      	lsrs	r3, r3, #13
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	080047c4 	.word	0x080047c4

080027a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e03f      	b.n	8002836 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe f990 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fd7b 	bl	80032e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800281c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b08a      	sub	sp, #40	; 0x28
 8002842:	af02      	add	r7, sp, #8
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	d17c      	bne.n	8002958 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_UART_Transmit+0x2c>
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e075      	b.n	800295a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_UART_Transmit+0x3e>
 8002878:	2302      	movs	r3, #2
 800287a:	e06e      	b.n	800295a <HAL_UART_Transmit+0x11c>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2221      	movs	r2, #33	; 0x21
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002892:	f7fe fb1f 	bl	8000ed4 <HAL_GetTick>
 8002896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	88fa      	ldrh	r2, [r7, #6]
 800289c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ac:	d108      	bne.n	80028c0 <HAL_UART_Transmit+0x82>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d104      	bne.n	80028c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	e003      	b.n	80028c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028d0:	e02a      	b.n	8002928 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 faf9 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e036      	b.n	800295a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002900:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	3302      	adds	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e007      	b.n	800291a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	3301      	adds	r3, #1
 8002918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1cf      	bne.n	80028d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	2140      	movs	r1, #64	; 0x40
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fac9 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e006      	b.n	800295a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0ba      	sub	sp, #232	; 0xe8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_UART_IRQHandler+0x66>
 80029b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fbd3 	bl	800316e <UART_Receive_IT>
      return;
 80029c8:	e256      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80de 	beq.w	8002b90 <HAL_UART_IRQHandler+0x22c>
 80029d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80d1 	beq.w	8002b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_UART_IRQHandler+0xae>
 80029fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_UART_IRQHandler+0xd2>
 8002a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_UART_IRQHandler+0xf6>
 8002a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d011      	beq.n	8002a8a <HAL_UART_IRQHandler+0x126>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0208 	orr.w	r2, r3, #8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 81ed 	beq.w	8002e6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x14e>
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fb5e 	bl	800316e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_UART_IRQHandler+0x17a>
 8002ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04f      	beq.n	8002b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa66 	bl	8002fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d141      	bne.n	8002b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3314      	adds	r3, #20
 8002af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1d9      	bne.n	8002af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d013      	beq.n	8002b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	4a7d      	ldr	r2, [pc, #500]	; (8002d40 <HAL_UART_IRQHandler+0x3dc>)
 8002b4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe ffb5 	bl	8001ac2 <HAL_DMA_Abort_IT>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e00e      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f99a 	bl	8002ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e00a      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f996 	bl	8002ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	e006      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f992 	bl	8002ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b8a:	e170      	b.n	8002e6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	bf00      	nop
    return;
 8002b8e:	e16e      	b.n	8002e6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 814a 	bne.w	8002e2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8143 	beq.w	8002e2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 813c 	beq.w	8002e2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	f040 80b4 	bne.w	8002d44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8140 	beq.w	8002e72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	f080 8139 	bcs.w	8002e72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c12:	f000 8088 	beq.w	8002d26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1d9      	bne.n	8002c16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3314      	adds	r3, #20
 8002c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3314      	adds	r3, #20
 8002c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e1      	bne.n	8002c62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e3      	bne.n	8002c9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf6:	f023 0310 	bic.w	r3, r3, #16
 8002cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d08:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e3      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fe5e 	bl	80019e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8c0 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d3c:	e099      	b.n	8002e72 <HAL_UART_IRQHandler+0x50e>
 8002d3e:	bf00      	nop
 8002d40:	08003077 	.word	0x08003077
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 808b 	beq.w	8002e76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8086 	beq.w	8002e76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e3      	bne.n	8002d6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3314      	adds	r3, #20
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	623b      	str	r3, [r7, #32]
   return(result);
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e3      	bne.n	8002da2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0310 	bic.w	r3, r3, #16
 8002dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e3      	bne.n	8002de8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f848 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e2c:	e023      	b.n	8002e76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_UART_IRQHandler+0x4ea>
 8002e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f929 	bl	800309e <UART_Transmit_IT>
    return;
 8002e4c:	e014      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00e      	beq.n	8002e78 <HAL_UART_IRQHandler+0x514>
 8002e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f969 	bl	800313e <UART_EndTransmit_IT>
    return;
 8002e6c:	e004      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
    return;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
      return;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
      return;
 8002e76:	bf00      	nop
  }
}
 8002e78:	37e8      	adds	r7, #232	; 0xe8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop

08002e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b090      	sub	sp, #64	; 0x40
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee4:	e050      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eec:	d04c      	beq.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ef4:	f7fd ffee 	bl	8000ed4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d241      	bcs.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f24:	637a      	str	r2, [r7, #52]	; 0x34
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	613b      	str	r3, [r7, #16]
   return(result);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3314      	adds	r3, #20
 8002f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f58:	623a      	str	r2, [r7, #32]
 8002f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	69f9      	ldr	r1, [r7, #28]
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e5      	bne.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e00f      	b.n	8002fa8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d09f      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3740      	adds	r7, #64	; 0x40
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b095      	sub	sp, #84	; 0x54
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fd8:	643a      	str	r2, [r7, #64]	; 0x40
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800300c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e5      	bne.n	8002fec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	2b01      	cmp	r3, #1
 8003026:	d119      	bne.n	800305c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	60bb      	str	r3, [r7, #8]
   return(result);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f023 0310 	bic.w	r3, r3, #16
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003048:	61ba      	str	r2, [r7, #24]
 800304a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	613b      	str	r3, [r7, #16]
   return(result);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e5      	bne.n	8003028 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
}
 800306a:	bf00      	nop
 800306c:	3754      	adds	r7, #84	; 0x54
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff ff09 	bl	8002ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b21      	cmp	r3, #33	; 0x21
 80030b0:	d13e      	bne.n	8003130 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ba:	d114      	bne.n	80030e6 <UART_Transmit_IT+0x48>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d110      	bne.n	80030e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	1c9a      	adds	r2, r3, #2
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]
 80030e4:	e008      	b.n	80030f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	1c59      	adds	r1, r3, #1
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6211      	str	r1, [r2, #32]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29b      	uxth	r3, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4619      	mov	r1, r3
 8003106:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10f      	bne.n	800312c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003154:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fe8e 	bl	8002e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b08c      	sub	sp, #48	; 0x30
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b22      	cmp	r3, #34	; 0x22
 8003180:	f040 80ab 	bne.w	80032da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	d117      	bne.n	80031be <UART_Receive_IT+0x50>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d113      	bne.n	80031be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
 80031bc:	e026      	b.n	800320c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d007      	beq.n	80031e2 <UART_Receive_IT+0x74>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <UART_Receive_IT+0x82>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e008      	b.n	8003202 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29b      	uxth	r3, r3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4619      	mov	r1, r3
 800321a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800321c:	2b00      	cmp	r3, #0
 800321e:	d15a      	bne.n	80032d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0220 	bic.w	r2, r2, #32
 800322e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800323e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	2b01      	cmp	r3, #1
 800325e:	d135      	bne.n	80032cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	613b      	str	r3, [r7, #16]
   return(result);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f023 0310 	bic.w	r3, r3, #16
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003286:	623a      	str	r2, [r7, #32]
 8003288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	69f9      	ldr	r1, [r7, #28]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	61bb      	str	r3, [r7, #24]
   return(result);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e5      	bne.n	8003266 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d10a      	bne.n	80032be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff fdf9 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
 80032ca:	e002      	b.n	80032d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fde1 	bl	8002e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e002      	b.n	80032dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3730      	adds	r7, #48	; 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e8:	b0c0      	sub	sp, #256	; 0x100
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	68d9      	ldr	r1, [r3, #12]
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	ea40 0301 	orr.w	r3, r0, r1
 800330c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	431a      	orrs	r2, r3
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	431a      	orrs	r2, r3
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800333c:	f021 010c 	bic.w	r1, r1, #12
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800334a:	430b      	orrs	r3, r1
 800334c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	6999      	ldr	r1, [r3, #24]
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	ea40 0301 	orr.w	r3, r0, r1
 800336a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <UART_SetConfig+0x2cc>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d005      	beq.n	8003384 <UART_SetConfig+0xa0>
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4b8d      	ldr	r3, [pc, #564]	; (80035b4 <UART_SetConfig+0x2d0>)
 8003380:	429a      	cmp	r2, r3
 8003382:	d104      	bne.n	800338e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003384:	f7ff f9fa 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8003388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800338c:	e003      	b.n	8003396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800338e:	f7ff f9e1 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 8003392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a0:	f040 810c 	bne.w	80035bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033b6:	4622      	mov	r2, r4
 80033b8:	462b      	mov	r3, r5
 80033ba:	1891      	adds	r1, r2, r2
 80033bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80033be:	415b      	adcs	r3, r3
 80033c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033c6:	4621      	mov	r1, r4
 80033c8:	eb12 0801 	adds.w	r8, r2, r1
 80033cc:	4629      	mov	r1, r5
 80033ce:	eb43 0901 	adc.w	r9, r3, r1
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e6:	4690      	mov	r8, r2
 80033e8:	4699      	mov	r9, r3
 80033ea:	4623      	mov	r3, r4
 80033ec:	eb18 0303 	adds.w	r3, r8, r3
 80033f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033f4:	462b      	mov	r3, r5
 80033f6:	eb49 0303 	adc.w	r3, r9, r3
 80033fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800340a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800340e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003412:	460b      	mov	r3, r1
 8003414:	18db      	adds	r3, r3, r3
 8003416:	653b      	str	r3, [r7, #80]	; 0x50
 8003418:	4613      	mov	r3, r2
 800341a:	eb42 0303 	adc.w	r3, r2, r3
 800341e:	657b      	str	r3, [r7, #84]	; 0x54
 8003420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003428:	f7fc ff22 	bl	8000270 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <UART_SetConfig+0x2d4>)
 8003432:	fba3 2302 	umull	r2, r3, r3, r2
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	011c      	lsls	r4, r3, #4
 800343a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343e:	2200      	movs	r2, #0
 8003440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800344c:	4642      	mov	r2, r8
 800344e:	464b      	mov	r3, r9
 8003450:	1891      	adds	r1, r2, r2
 8003452:	64b9      	str	r1, [r7, #72]	; 0x48
 8003454:	415b      	adcs	r3, r3
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800345c:	4641      	mov	r1, r8
 800345e:	eb12 0a01 	adds.w	sl, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb43 0b01 	adc.w	fp, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800347c:	4692      	mov	sl, r2
 800347e:	469b      	mov	fp, r3
 8003480:	4643      	mov	r3, r8
 8003482:	eb1a 0303 	adds.w	r3, sl, r3
 8003486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800348a:	464b      	mov	r3, r9
 800348c:	eb4b 0303 	adc.w	r3, fp, r3
 8003490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034a8:	460b      	mov	r3, r1
 80034aa:	18db      	adds	r3, r3, r3
 80034ac:	643b      	str	r3, [r7, #64]	; 0x40
 80034ae:	4613      	mov	r3, r2
 80034b0:	eb42 0303 	adc.w	r3, r2, r3
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
 80034b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034be:	f7fc fed7 	bl	8000270 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4611      	mov	r1, r2
 80034c8:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <UART_SetConfig+0x2d4>)
 80034ca:	fba3 2301 	umull	r2, r3, r3, r1
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2264      	movs	r2, #100	; 0x64
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	1acb      	subs	r3, r1, r3
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <UART_SetConfig+0x2d4>)
 80034e0:	fba3 2302 	umull	r2, r3, r3, r2
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034ec:	441c      	add	r4, r3
 80034ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003500:	4642      	mov	r2, r8
 8003502:	464b      	mov	r3, r9
 8003504:	1891      	adds	r1, r2, r2
 8003506:	63b9      	str	r1, [r7, #56]	; 0x38
 8003508:	415b      	adcs	r3, r3
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800350c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003510:	4641      	mov	r1, r8
 8003512:	1851      	adds	r1, r2, r1
 8003514:	6339      	str	r1, [r7, #48]	; 0x30
 8003516:	4649      	mov	r1, r9
 8003518:	414b      	adcs	r3, r1
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003528:	4659      	mov	r1, fp
 800352a:	00cb      	lsls	r3, r1, #3
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003532:	4651      	mov	r1, sl
 8003534:	00ca      	lsls	r2, r1, #3
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	4603      	mov	r3, r0
 800353c:	4642      	mov	r2, r8
 800353e:	189b      	adds	r3, r3, r2
 8003540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800355c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003564:	460b      	mov	r3, r1
 8003566:	18db      	adds	r3, r3, r3
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
 800356a:	4613      	mov	r3, r2
 800356c:	eb42 0303 	adc.w	r3, r2, r3
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800357a:	f7fc fe79 	bl	8000270 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <UART_SetConfig+0x2d4>)
 8003584:	fba3 1302 	umull	r1, r3, r3, r2
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	2164      	movs	r1, #100	; 0x64
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	3332      	adds	r3, #50	; 0x32
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <UART_SetConfig+0x2d4>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 0207 	and.w	r2, r3, #7
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4422      	add	r2, r4
 80035aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035ac:	e105      	b.n	80037ba <UART_SetConfig+0x4d6>
 80035ae:	bf00      	nop
 80035b0:	40011000 	.word	0x40011000
 80035b4:	40011400 	.word	0x40011400
 80035b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c0:	2200      	movs	r2, #0
 80035c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ce:	4642      	mov	r2, r8
 80035d0:	464b      	mov	r3, r9
 80035d2:	1891      	adds	r1, r2, r2
 80035d4:	6239      	str	r1, [r7, #32]
 80035d6:	415b      	adcs	r3, r3
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035de:	4641      	mov	r1, r8
 80035e0:	1854      	adds	r4, r2, r1
 80035e2:	4649      	mov	r1, r9
 80035e4:	eb43 0501 	adc.w	r5, r3, r1
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	00eb      	lsls	r3, r5, #3
 80035f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f6:	00e2      	lsls	r2, r4, #3
 80035f8:	4614      	mov	r4, r2
 80035fa:	461d      	mov	r5, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	18e3      	adds	r3, r4, r3
 8003600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003604:	464b      	mov	r3, r9
 8003606:	eb45 0303 	adc.w	r3, r5, r3
 800360a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800361a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800362a:	4629      	mov	r1, r5
 800362c:	008b      	lsls	r3, r1, #2
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003634:	4621      	mov	r1, r4
 8003636:	008a      	lsls	r2, r1, #2
 8003638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800363c:	f7fc fe18 	bl	8000270 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <UART_SetConfig+0x4e4>)
 8003646:	fba3 2302 	umull	r2, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	011c      	lsls	r4, r3, #4
 800364e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800365c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	1891      	adds	r1, r2, r2
 8003666:	61b9      	str	r1, [r7, #24]
 8003668:	415b      	adcs	r3, r3
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003670:	4641      	mov	r1, r8
 8003672:	1851      	adds	r1, r2, r1
 8003674:	6139      	str	r1, [r7, #16]
 8003676:	4649      	mov	r1, r9
 8003678:	414b      	adcs	r3, r1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003688:	4659      	mov	r1, fp
 800368a:	00cb      	lsls	r3, r1, #3
 800368c:	4651      	mov	r1, sl
 800368e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003692:	4651      	mov	r1, sl
 8003694:	00ca      	lsls	r2, r1, #3
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	4603      	mov	r3, r0
 800369c:	4642      	mov	r2, r8
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036a4:	464b      	mov	r3, r9
 80036a6:	460a      	mov	r2, r1
 80036a8:	eb42 0303 	adc.w	r3, r2, r3
 80036ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80036ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036c8:	4649      	mov	r1, r9
 80036ca:	008b      	lsls	r3, r1, #2
 80036cc:	4641      	mov	r1, r8
 80036ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d2:	4641      	mov	r1, r8
 80036d4:	008a      	lsls	r2, r1, #2
 80036d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036da:	f7fc fdc9 	bl	8000270 <__aeabi_uldivmod>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <UART_SetConfig+0x4e4>)
 80036e4:	fba3 1302 	umull	r1, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	2164      	movs	r1, #100	; 0x64
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	3332      	adds	r3, #50	; 0x32
 80036f6:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <UART_SetConfig+0x4e4>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003702:	441c      	add	r4, r3
 8003704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003708:	2200      	movs	r2, #0
 800370a:	673b      	str	r3, [r7, #112]	; 0x70
 800370c:	677a      	str	r2, [r7, #116]	; 0x74
 800370e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003712:	4642      	mov	r2, r8
 8003714:	464b      	mov	r3, r9
 8003716:	1891      	adds	r1, r2, r2
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	415b      	adcs	r3, r3
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003722:	4641      	mov	r1, r8
 8003724:	1851      	adds	r1, r2, r1
 8003726:	6039      	str	r1, [r7, #0]
 8003728:	4649      	mov	r1, r9
 800372a:	414b      	adcs	r3, r1
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800373a:	4659      	mov	r1, fp
 800373c:	00cb      	lsls	r3, r1, #3
 800373e:	4651      	mov	r1, sl
 8003740:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003744:	4651      	mov	r1, sl
 8003746:	00ca      	lsls	r2, r1, #3
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	4603      	mov	r3, r0
 800374e:	4642      	mov	r2, r8
 8003750:	189b      	adds	r3, r3, r2
 8003752:	66bb      	str	r3, [r7, #104]	; 0x68
 8003754:	464b      	mov	r3, r9
 8003756:	460a      	mov	r2, r1
 8003758:	eb42 0303 	adc.w	r3, r2, r3
 800375c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	663b      	str	r3, [r7, #96]	; 0x60
 8003768:	667a      	str	r2, [r7, #100]	; 0x64
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003776:	4649      	mov	r1, r9
 8003778:	008b      	lsls	r3, r1, #2
 800377a:	4641      	mov	r1, r8
 800377c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003780:	4641      	mov	r1, r8
 8003782:	008a      	lsls	r2, r1, #2
 8003784:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003788:	f7fc fd72 	bl	8000270 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <UART_SetConfig+0x4e4>)
 8003792:	fba3 1302 	umull	r1, r3, r3, r2
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2164      	movs	r1, #100	; 0x64
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	3332      	adds	r3, #50	; 0x32
 80037a4:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <UART_SetConfig+0x4e4>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	f003 020f 	and.w	r2, r3, #15
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4422      	add	r2, r4
 80037b8:	609a      	str	r2, [r3, #8]
}
 80037ba:	bf00      	nop
 80037bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c6:	bf00      	nop
 80037c8:	51eb851f 	.word	0x51eb851f

080037cc <__errno>:
 80037cc:	4b01      	ldr	r3, [pc, #4]	; (80037d4 <__errno+0x8>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000014 	.word	0x20000014

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4d0d      	ldr	r5, [pc, #52]	; (8003810 <__libc_init_array+0x38>)
 80037dc:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	2600      	movs	r6, #0
 80037e4:	42a6      	cmp	r6, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	4d0b      	ldr	r5, [pc, #44]	; (8003818 <__libc_init_array+0x40>)
 80037ea:	4c0c      	ldr	r4, [pc, #48]	; (800381c <__libc_init_array+0x44>)
 80037ec:	f000 ffae 	bl	800474c <_init>
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	2600      	movs	r6, #0
 80037f6:	42a6      	cmp	r6, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003800:	4798      	blx	r3
 8003802:	3601      	adds	r6, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f855 3b04 	ldr.w	r3, [r5], #4
 800380a:	4798      	blx	r3
 800380c:	3601      	adds	r6, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	0800486c 	.word	0x0800486c
 8003814:	0800486c 	.word	0x0800486c
 8003818:	0800486c 	.word	0x0800486c
 800381c:	08004870 	.word	0x08004870

08003820 <memset>:
 8003820:	4402      	add	r2, r0
 8003822:	4603      	mov	r3, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <iprintf>:
 8003830:	b40f      	push	{r0, r1, r2, r3}
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <iprintf+0x2c>)
 8003834:	b513      	push	{r0, r1, r4, lr}
 8003836:	681c      	ldr	r4, [r3, #0]
 8003838:	b124      	cbz	r4, 8003844 <iprintf+0x14>
 800383a:	69a3      	ldr	r3, [r4, #24]
 800383c:	b913      	cbnz	r3, 8003844 <iprintf+0x14>
 800383e:	4620      	mov	r0, r4
 8003840:	f000 f9e8 	bl	8003c14 <__sinit>
 8003844:	ab05      	add	r3, sp, #20
 8003846:	9a04      	ldr	r2, [sp, #16]
 8003848:	68a1      	ldr	r1, [r4, #8]
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	4620      	mov	r0, r4
 800384e:	f000 fbf1 	bl	8004034 <_vfiprintf_r>
 8003852:	b002      	add	sp, #8
 8003854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003858:	b004      	add	sp, #16
 800385a:	4770      	bx	lr
 800385c:	20000014 	.word	0x20000014

08003860 <__swbuf_r>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	460e      	mov	r6, r1
 8003864:	4614      	mov	r4, r2
 8003866:	4605      	mov	r5, r0
 8003868:	b118      	cbz	r0, 8003872 <__swbuf_r+0x12>
 800386a:	6983      	ldr	r3, [r0, #24]
 800386c:	b90b      	cbnz	r3, 8003872 <__swbuf_r+0x12>
 800386e:	f000 f9d1 	bl	8003c14 <__sinit>
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <__swbuf_r+0x98>)
 8003874:	429c      	cmp	r4, r3
 8003876:	d12b      	bne.n	80038d0 <__swbuf_r+0x70>
 8003878:	686c      	ldr	r4, [r5, #4]
 800387a:	69a3      	ldr	r3, [r4, #24]
 800387c:	60a3      	str	r3, [r4, #8]
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	071a      	lsls	r2, r3, #28
 8003882:	d52f      	bpl.n	80038e4 <__swbuf_r+0x84>
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	b36b      	cbz	r3, 80038e4 <__swbuf_r+0x84>
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	1ac0      	subs	r0, r0, r3
 800388e:	6963      	ldr	r3, [r4, #20]
 8003890:	b2f6      	uxtb	r6, r6
 8003892:	4283      	cmp	r3, r0
 8003894:	4637      	mov	r7, r6
 8003896:	dc04      	bgt.n	80038a2 <__swbuf_r+0x42>
 8003898:	4621      	mov	r1, r4
 800389a:	4628      	mov	r0, r5
 800389c:	f000 f926 	bl	8003aec <_fflush_r>
 80038a0:	bb30      	cbnz	r0, 80038f0 <__swbuf_r+0x90>
 80038a2:	68a3      	ldr	r3, [r4, #8]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60a3      	str	r3, [r4, #8]
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	6022      	str	r2, [r4, #0]
 80038ae:	701e      	strb	r6, [r3, #0]
 80038b0:	6963      	ldr	r3, [r4, #20]
 80038b2:	3001      	adds	r0, #1
 80038b4:	4283      	cmp	r3, r0
 80038b6:	d004      	beq.n	80038c2 <__swbuf_r+0x62>
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	07db      	lsls	r3, r3, #31
 80038bc:	d506      	bpl.n	80038cc <__swbuf_r+0x6c>
 80038be:	2e0a      	cmp	r6, #10
 80038c0:	d104      	bne.n	80038cc <__swbuf_r+0x6c>
 80038c2:	4621      	mov	r1, r4
 80038c4:	4628      	mov	r0, r5
 80038c6:	f000 f911 	bl	8003aec <_fflush_r>
 80038ca:	b988      	cbnz	r0, 80038f0 <__swbuf_r+0x90>
 80038cc:	4638      	mov	r0, r7
 80038ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <__swbuf_r+0x9c>)
 80038d2:	429c      	cmp	r4, r3
 80038d4:	d101      	bne.n	80038da <__swbuf_r+0x7a>
 80038d6:	68ac      	ldr	r4, [r5, #8]
 80038d8:	e7cf      	b.n	800387a <__swbuf_r+0x1a>
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <__swbuf_r+0xa0>)
 80038dc:	429c      	cmp	r4, r3
 80038de:	bf08      	it	eq
 80038e0:	68ec      	ldreq	r4, [r5, #12]
 80038e2:	e7ca      	b.n	800387a <__swbuf_r+0x1a>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 f80c 	bl	8003904 <__swsetup_r>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d0cb      	beq.n	8003888 <__swbuf_r+0x28>
 80038f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80038f4:	e7ea      	b.n	80038cc <__swbuf_r+0x6c>
 80038f6:	bf00      	nop
 80038f8:	080047f0 	.word	0x080047f0
 80038fc:	08004810 	.word	0x08004810
 8003900:	080047d0 	.word	0x080047d0

08003904 <__swsetup_r>:
 8003904:	4b32      	ldr	r3, [pc, #200]	; (80039d0 <__swsetup_r+0xcc>)
 8003906:	b570      	push	{r4, r5, r6, lr}
 8003908:	681d      	ldr	r5, [r3, #0]
 800390a:	4606      	mov	r6, r0
 800390c:	460c      	mov	r4, r1
 800390e:	b125      	cbz	r5, 800391a <__swsetup_r+0x16>
 8003910:	69ab      	ldr	r3, [r5, #24]
 8003912:	b913      	cbnz	r3, 800391a <__swsetup_r+0x16>
 8003914:	4628      	mov	r0, r5
 8003916:	f000 f97d 	bl	8003c14 <__sinit>
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <__swsetup_r+0xd0>)
 800391c:	429c      	cmp	r4, r3
 800391e:	d10f      	bne.n	8003940 <__swsetup_r+0x3c>
 8003920:	686c      	ldr	r4, [r5, #4]
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003928:	0719      	lsls	r1, r3, #28
 800392a:	d42c      	bmi.n	8003986 <__swsetup_r+0x82>
 800392c:	06dd      	lsls	r5, r3, #27
 800392e:	d411      	bmi.n	8003954 <__swsetup_r+0x50>
 8003930:	2309      	movs	r3, #9
 8003932:	6033      	str	r3, [r6, #0]
 8003934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800393e:	e03e      	b.n	80039be <__swsetup_r+0xba>
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <__swsetup_r+0xd4>)
 8003942:	429c      	cmp	r4, r3
 8003944:	d101      	bne.n	800394a <__swsetup_r+0x46>
 8003946:	68ac      	ldr	r4, [r5, #8]
 8003948:	e7eb      	b.n	8003922 <__swsetup_r+0x1e>
 800394a:	4b24      	ldr	r3, [pc, #144]	; (80039dc <__swsetup_r+0xd8>)
 800394c:	429c      	cmp	r4, r3
 800394e:	bf08      	it	eq
 8003950:	68ec      	ldreq	r4, [r5, #12]
 8003952:	e7e6      	b.n	8003922 <__swsetup_r+0x1e>
 8003954:	0758      	lsls	r0, r3, #29
 8003956:	d512      	bpl.n	800397e <__swsetup_r+0x7a>
 8003958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800395a:	b141      	cbz	r1, 800396e <__swsetup_r+0x6a>
 800395c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003960:	4299      	cmp	r1, r3
 8003962:	d002      	beq.n	800396a <__swsetup_r+0x66>
 8003964:	4630      	mov	r0, r6
 8003966:	f000 fa5b 	bl	8003e20 <_free_r>
 800396a:	2300      	movs	r3, #0
 800396c:	6363      	str	r3, [r4, #52]	; 0x34
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003974:	81a3      	strh	r3, [r4, #12]
 8003976:	2300      	movs	r3, #0
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	6923      	ldr	r3, [r4, #16]
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	81a3      	strh	r3, [r4, #12]
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	b94b      	cbnz	r3, 800399e <__swsetup_r+0x9a>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003994:	d003      	beq.n	800399e <__swsetup_r+0x9a>
 8003996:	4621      	mov	r1, r4
 8003998:	4630      	mov	r0, r6
 800399a:	f000 fa01 	bl	8003da0 <__smakebuf_r>
 800399e:	89a0      	ldrh	r0, [r4, #12]
 80039a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039a4:	f010 0301 	ands.w	r3, r0, #1
 80039a8:	d00a      	beq.n	80039c0 <__swsetup_r+0xbc>
 80039aa:	2300      	movs	r3, #0
 80039ac:	60a3      	str	r3, [r4, #8]
 80039ae:	6963      	ldr	r3, [r4, #20]
 80039b0:	425b      	negs	r3, r3
 80039b2:	61a3      	str	r3, [r4, #24]
 80039b4:	6923      	ldr	r3, [r4, #16]
 80039b6:	b943      	cbnz	r3, 80039ca <__swsetup_r+0xc6>
 80039b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039bc:	d1ba      	bne.n	8003934 <__swsetup_r+0x30>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	0781      	lsls	r1, r0, #30
 80039c2:	bf58      	it	pl
 80039c4:	6963      	ldrpl	r3, [r4, #20]
 80039c6:	60a3      	str	r3, [r4, #8]
 80039c8:	e7f4      	b.n	80039b4 <__swsetup_r+0xb0>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e7f7      	b.n	80039be <__swsetup_r+0xba>
 80039ce:	bf00      	nop
 80039d0:	20000014 	.word	0x20000014
 80039d4:	080047f0 	.word	0x080047f0
 80039d8:	08004810 	.word	0x08004810
 80039dc:	080047d0 	.word	0x080047d0

080039e0 <__sflush_r>:
 80039e0:	898a      	ldrh	r2, [r1, #12]
 80039e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e6:	4605      	mov	r5, r0
 80039e8:	0710      	lsls	r0, r2, #28
 80039ea:	460c      	mov	r4, r1
 80039ec:	d458      	bmi.n	8003aa0 <__sflush_r+0xc0>
 80039ee:	684b      	ldr	r3, [r1, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dc05      	bgt.n	8003a00 <__sflush_r+0x20>
 80039f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	dc02      	bgt.n	8003a00 <__sflush_r+0x20>
 80039fa:	2000      	movs	r0, #0
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	d0f9      	beq.n	80039fa <__sflush_r+0x1a>
 8003a06:	2300      	movs	r3, #0
 8003a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a0c:	682f      	ldr	r7, [r5, #0]
 8003a0e:	602b      	str	r3, [r5, #0]
 8003a10:	d032      	beq.n	8003a78 <__sflush_r+0x98>
 8003a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	075a      	lsls	r2, r3, #29
 8003a18:	d505      	bpl.n	8003a26 <__sflush_r+0x46>
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	1ac0      	subs	r0, r0, r3
 8003a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a20:	b10b      	cbz	r3, 8003a26 <__sflush_r+0x46>
 8003a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a24:	1ac0      	subs	r0, r0, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a2c:	6a21      	ldr	r1, [r4, #32]
 8003a2e:	4628      	mov	r0, r5
 8003a30:	47b0      	blx	r6
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	d106      	bne.n	8003a46 <__sflush_r+0x66>
 8003a38:	6829      	ldr	r1, [r5, #0]
 8003a3a:	291d      	cmp	r1, #29
 8003a3c:	d82c      	bhi.n	8003a98 <__sflush_r+0xb8>
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <__sflush_r+0x108>)
 8003a40:	40ca      	lsrs	r2, r1
 8003a42:	07d6      	lsls	r6, r2, #31
 8003a44:	d528      	bpl.n	8003a98 <__sflush_r+0xb8>
 8003a46:	2200      	movs	r2, #0
 8003a48:	6062      	str	r2, [r4, #4]
 8003a4a:	04d9      	lsls	r1, r3, #19
 8003a4c:	6922      	ldr	r2, [r4, #16]
 8003a4e:	6022      	str	r2, [r4, #0]
 8003a50:	d504      	bpl.n	8003a5c <__sflush_r+0x7c>
 8003a52:	1c42      	adds	r2, r0, #1
 8003a54:	d101      	bne.n	8003a5a <__sflush_r+0x7a>
 8003a56:	682b      	ldr	r3, [r5, #0]
 8003a58:	b903      	cbnz	r3, 8003a5c <__sflush_r+0x7c>
 8003a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8003a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a5e:	602f      	str	r7, [r5, #0]
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d0ca      	beq.n	80039fa <__sflush_r+0x1a>
 8003a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <__sflush_r+0x92>
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 f9d7 	bl	8003e20 <_free_r>
 8003a72:	2000      	movs	r0, #0
 8003a74:	6360      	str	r0, [r4, #52]	; 0x34
 8003a76:	e7c1      	b.n	80039fc <__sflush_r+0x1c>
 8003a78:	6a21      	ldr	r1, [r4, #32]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	47b0      	blx	r6
 8003a80:	1c41      	adds	r1, r0, #1
 8003a82:	d1c7      	bne.n	8003a14 <__sflush_r+0x34>
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0c4      	beq.n	8003a14 <__sflush_r+0x34>
 8003a8a:	2b1d      	cmp	r3, #29
 8003a8c:	d001      	beq.n	8003a92 <__sflush_r+0xb2>
 8003a8e:	2b16      	cmp	r3, #22
 8003a90:	d101      	bne.n	8003a96 <__sflush_r+0xb6>
 8003a92:	602f      	str	r7, [r5, #0]
 8003a94:	e7b1      	b.n	80039fa <__sflush_r+0x1a>
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	e7ad      	b.n	80039fc <__sflush_r+0x1c>
 8003aa0:	690f      	ldr	r7, [r1, #16]
 8003aa2:	2f00      	cmp	r7, #0
 8003aa4:	d0a9      	beq.n	80039fa <__sflush_r+0x1a>
 8003aa6:	0793      	lsls	r3, r2, #30
 8003aa8:	680e      	ldr	r6, [r1, #0]
 8003aaa:	bf08      	it	eq
 8003aac:	694b      	ldreq	r3, [r1, #20]
 8003aae:	600f      	str	r7, [r1, #0]
 8003ab0:	bf18      	it	ne
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	eba6 0807 	sub.w	r8, r6, r7
 8003ab8:	608b      	str	r3, [r1, #8]
 8003aba:	f1b8 0f00 	cmp.w	r8, #0
 8003abe:	dd9c      	ble.n	80039fa <__sflush_r+0x1a>
 8003ac0:	6a21      	ldr	r1, [r4, #32]
 8003ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ac4:	4643      	mov	r3, r8
 8003ac6:	463a      	mov	r2, r7
 8003ac8:	4628      	mov	r0, r5
 8003aca:	47b0      	blx	r6
 8003acc:	2800      	cmp	r0, #0
 8003ace:	dc06      	bgt.n	8003ade <__sflush_r+0xfe>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003adc:	e78e      	b.n	80039fc <__sflush_r+0x1c>
 8003ade:	4407      	add	r7, r0
 8003ae0:	eba8 0800 	sub.w	r8, r8, r0
 8003ae4:	e7e9      	b.n	8003aba <__sflush_r+0xda>
 8003ae6:	bf00      	nop
 8003ae8:	20400001 	.word	0x20400001

08003aec <_fflush_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	4605      	mov	r5, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	b913      	cbnz	r3, 8003afc <_fflush_r+0x10>
 8003af6:	2500      	movs	r5, #0
 8003af8:	4628      	mov	r0, r5
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	b118      	cbz	r0, 8003b06 <_fflush_r+0x1a>
 8003afe:	6983      	ldr	r3, [r0, #24]
 8003b00:	b90b      	cbnz	r3, 8003b06 <_fflush_r+0x1a>
 8003b02:	f000 f887 	bl	8003c14 <__sinit>
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <_fflush_r+0x6c>)
 8003b08:	429c      	cmp	r4, r3
 8003b0a:	d11b      	bne.n	8003b44 <_fflush_r+0x58>
 8003b0c:	686c      	ldr	r4, [r5, #4]
 8003b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ef      	beq.n	8003af6 <_fflush_r+0xa>
 8003b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b18:	07d0      	lsls	r0, r2, #31
 8003b1a:	d404      	bmi.n	8003b26 <_fflush_r+0x3a>
 8003b1c:	0599      	lsls	r1, r3, #22
 8003b1e:	d402      	bmi.n	8003b26 <_fflush_r+0x3a>
 8003b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b22:	f000 f915 	bl	8003d50 <__retarget_lock_acquire_recursive>
 8003b26:	4628      	mov	r0, r5
 8003b28:	4621      	mov	r1, r4
 8003b2a:	f7ff ff59 	bl	80039e0 <__sflush_r>
 8003b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b30:	07da      	lsls	r2, r3, #31
 8003b32:	4605      	mov	r5, r0
 8003b34:	d4e0      	bmi.n	8003af8 <_fflush_r+0xc>
 8003b36:	89a3      	ldrh	r3, [r4, #12]
 8003b38:	059b      	lsls	r3, r3, #22
 8003b3a:	d4dd      	bmi.n	8003af8 <_fflush_r+0xc>
 8003b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b3e:	f000 f908 	bl	8003d52 <__retarget_lock_release_recursive>
 8003b42:	e7d9      	b.n	8003af8 <_fflush_r+0xc>
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <_fflush_r+0x70>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	d101      	bne.n	8003b4e <_fflush_r+0x62>
 8003b4a:	68ac      	ldr	r4, [r5, #8]
 8003b4c:	e7df      	b.n	8003b0e <_fflush_r+0x22>
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <_fflush_r+0x74>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	bf08      	it	eq
 8003b54:	68ec      	ldreq	r4, [r5, #12]
 8003b56:	e7da      	b.n	8003b0e <_fflush_r+0x22>
 8003b58:	080047f0 	.word	0x080047f0
 8003b5c:	08004810 	.word	0x08004810
 8003b60:	080047d0 	.word	0x080047d0

08003b64 <std>:
 8003b64:	2300      	movs	r3, #0
 8003b66:	b510      	push	{r4, lr}
 8003b68:	4604      	mov	r4, r0
 8003b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b72:	6083      	str	r3, [r0, #8]
 8003b74:	8181      	strh	r1, [r0, #12]
 8003b76:	6643      	str	r3, [r0, #100]	; 0x64
 8003b78:	81c2      	strh	r2, [r0, #14]
 8003b7a:	6183      	str	r3, [r0, #24]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	2208      	movs	r2, #8
 8003b80:	305c      	adds	r0, #92	; 0x5c
 8003b82:	f7ff fe4d 	bl	8003820 <memset>
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <std+0x38>)
 8003b88:	6263      	str	r3, [r4, #36]	; 0x24
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <std+0x3c>)
 8003b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <std+0x40>)
 8003b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <std+0x44>)
 8003b94:	6224      	str	r4, [r4, #32]
 8003b96:	6323      	str	r3, [r4, #48]	; 0x30
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	bf00      	nop
 8003b9c:	080045dd 	.word	0x080045dd
 8003ba0:	080045ff 	.word	0x080045ff
 8003ba4:	08004637 	.word	0x08004637
 8003ba8:	0800465b 	.word	0x0800465b

08003bac <_cleanup_r>:
 8003bac:	4901      	ldr	r1, [pc, #4]	; (8003bb4 <_cleanup_r+0x8>)
 8003bae:	f000 b8af 	b.w	8003d10 <_fwalk_reent>
 8003bb2:	bf00      	nop
 8003bb4:	08003aed 	.word	0x08003aed

08003bb8 <__sfmoreglue>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	2268      	movs	r2, #104	; 0x68
 8003bbc:	1e4d      	subs	r5, r1, #1
 8003bbe:	4355      	muls	r5, r2
 8003bc0:	460e      	mov	r6, r1
 8003bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bc6:	f000 f997 	bl	8003ef8 <_malloc_r>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	b140      	cbz	r0, 8003be0 <__sfmoreglue+0x28>
 8003bce:	2100      	movs	r1, #0
 8003bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8003bd4:	300c      	adds	r0, #12
 8003bd6:	60a0      	str	r0, [r4, #8]
 8003bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bdc:	f7ff fe20 	bl	8003820 <memset>
 8003be0:	4620      	mov	r0, r4
 8003be2:	bd70      	pop	{r4, r5, r6, pc}

08003be4 <__sfp_lock_acquire>:
 8003be4:	4801      	ldr	r0, [pc, #4]	; (8003bec <__sfp_lock_acquire+0x8>)
 8003be6:	f000 b8b3 	b.w	8003d50 <__retarget_lock_acquire_recursive>
 8003bea:	bf00      	nop
 8003bec:	20000135 	.word	0x20000135

08003bf0 <__sfp_lock_release>:
 8003bf0:	4801      	ldr	r0, [pc, #4]	; (8003bf8 <__sfp_lock_release+0x8>)
 8003bf2:	f000 b8ae 	b.w	8003d52 <__retarget_lock_release_recursive>
 8003bf6:	bf00      	nop
 8003bf8:	20000135 	.word	0x20000135

08003bfc <__sinit_lock_acquire>:
 8003bfc:	4801      	ldr	r0, [pc, #4]	; (8003c04 <__sinit_lock_acquire+0x8>)
 8003bfe:	f000 b8a7 	b.w	8003d50 <__retarget_lock_acquire_recursive>
 8003c02:	bf00      	nop
 8003c04:	20000136 	.word	0x20000136

08003c08 <__sinit_lock_release>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__sinit_lock_release+0x8>)
 8003c0a:	f000 b8a2 	b.w	8003d52 <__retarget_lock_release_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20000136 	.word	0x20000136

08003c14 <__sinit>:
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4604      	mov	r4, r0
 8003c18:	f7ff fff0 	bl	8003bfc <__sinit_lock_acquire>
 8003c1c:	69a3      	ldr	r3, [r4, #24]
 8003c1e:	b11b      	cbz	r3, 8003c28 <__sinit+0x14>
 8003c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c24:	f7ff bff0 	b.w	8003c08 <__sinit_lock_release>
 8003c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <__sinit+0x68>)
 8003c30:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <__sinit+0x6c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c36:	42a3      	cmp	r3, r4
 8003c38:	bf04      	itt	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	61a3      	streq	r3, [r4, #24]
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 f820 	bl	8003c84 <__sfp>
 8003c44:	6060      	str	r0, [r4, #4]
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f81c 	bl	8003c84 <__sfp>
 8003c4c:	60a0      	str	r0, [r4, #8]
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f000 f818 	bl	8003c84 <__sfp>
 8003c54:	2200      	movs	r2, #0
 8003c56:	60e0      	str	r0, [r4, #12]
 8003c58:	2104      	movs	r1, #4
 8003c5a:	6860      	ldr	r0, [r4, #4]
 8003c5c:	f7ff ff82 	bl	8003b64 <std>
 8003c60:	68a0      	ldr	r0, [r4, #8]
 8003c62:	2201      	movs	r2, #1
 8003c64:	2109      	movs	r1, #9
 8003c66:	f7ff ff7d 	bl	8003b64 <std>
 8003c6a:	68e0      	ldr	r0, [r4, #12]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	2112      	movs	r1, #18
 8003c70:	f7ff ff78 	bl	8003b64 <std>
 8003c74:	2301      	movs	r3, #1
 8003c76:	61a3      	str	r3, [r4, #24]
 8003c78:	e7d2      	b.n	8003c20 <__sinit+0xc>
 8003c7a:	bf00      	nop
 8003c7c:	080047cc 	.word	0x080047cc
 8003c80:	08003bad 	.word	0x08003bad

08003c84 <__sfp>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	4607      	mov	r7, r0
 8003c88:	f7ff ffac 	bl	8003be4 <__sfp_lock_acquire>
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <__sfp+0x84>)
 8003c8e:	681e      	ldr	r6, [r3, #0]
 8003c90:	69b3      	ldr	r3, [r6, #24]
 8003c92:	b913      	cbnz	r3, 8003c9a <__sfp+0x16>
 8003c94:	4630      	mov	r0, r6
 8003c96:	f7ff ffbd 	bl	8003c14 <__sinit>
 8003c9a:	3648      	adds	r6, #72	; 0x48
 8003c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	d503      	bpl.n	8003cac <__sfp+0x28>
 8003ca4:	6833      	ldr	r3, [r6, #0]
 8003ca6:	b30b      	cbz	r3, 8003cec <__sfp+0x68>
 8003ca8:	6836      	ldr	r6, [r6, #0]
 8003caa:	e7f7      	b.n	8003c9c <__sfp+0x18>
 8003cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cb0:	b9d5      	cbnz	r5, 8003ce8 <__sfp+0x64>
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <__sfp+0x88>)
 8003cb4:	60e3      	str	r3, [r4, #12]
 8003cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cba:	6665      	str	r5, [r4, #100]	; 0x64
 8003cbc:	f000 f847 	bl	8003d4e <__retarget_lock_init_recursive>
 8003cc0:	f7ff ff96 	bl	8003bf0 <__sfp_lock_release>
 8003cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ccc:	6025      	str	r5, [r4, #0]
 8003cce:	61a5      	str	r5, [r4, #24]
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cd8:	f7ff fda2 	bl	8003820 <memset>
 8003cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce8:	3468      	adds	r4, #104	; 0x68
 8003cea:	e7d9      	b.n	8003ca0 <__sfp+0x1c>
 8003cec:	2104      	movs	r1, #4
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f7ff ff62 	bl	8003bb8 <__sfmoreglue>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	6030      	str	r0, [r6, #0]
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d1d5      	bne.n	8003ca8 <__sfp+0x24>
 8003cfc:	f7ff ff78 	bl	8003bf0 <__sfp_lock_release>
 8003d00:	230c      	movs	r3, #12
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	e7ee      	b.n	8003ce4 <__sfp+0x60>
 8003d06:	bf00      	nop
 8003d08:	080047cc 	.word	0x080047cc
 8003d0c:	ffff0001 	.word	0xffff0001

08003d10 <_fwalk_reent>:
 8003d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d14:	4606      	mov	r6, r0
 8003d16:	4688      	mov	r8, r1
 8003d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d1c:	2700      	movs	r7, #0
 8003d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d22:	f1b9 0901 	subs.w	r9, r9, #1
 8003d26:	d505      	bpl.n	8003d34 <_fwalk_reent+0x24>
 8003d28:	6824      	ldr	r4, [r4, #0]
 8003d2a:	2c00      	cmp	r4, #0
 8003d2c:	d1f7      	bne.n	8003d1e <_fwalk_reent+0xe>
 8003d2e:	4638      	mov	r0, r7
 8003d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d34:	89ab      	ldrh	r3, [r5, #12]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d907      	bls.n	8003d4a <_fwalk_reent+0x3a>
 8003d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	d003      	beq.n	8003d4a <_fwalk_reent+0x3a>
 8003d42:	4629      	mov	r1, r5
 8003d44:	4630      	mov	r0, r6
 8003d46:	47c0      	blx	r8
 8003d48:	4307      	orrs	r7, r0
 8003d4a:	3568      	adds	r5, #104	; 0x68
 8003d4c:	e7e9      	b.n	8003d22 <_fwalk_reent+0x12>

08003d4e <__retarget_lock_init_recursive>:
 8003d4e:	4770      	bx	lr

08003d50 <__retarget_lock_acquire_recursive>:
 8003d50:	4770      	bx	lr

08003d52 <__retarget_lock_release_recursive>:
 8003d52:	4770      	bx	lr

08003d54 <__swhatbuf_r>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	460e      	mov	r6, r1
 8003d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	b096      	sub	sp, #88	; 0x58
 8003d60:	4614      	mov	r4, r2
 8003d62:	461d      	mov	r5, r3
 8003d64:	da08      	bge.n	8003d78 <__swhatbuf_r+0x24>
 8003d66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	602a      	str	r2, [r5, #0]
 8003d6e:	061a      	lsls	r2, r3, #24
 8003d70:	d410      	bmi.n	8003d94 <__swhatbuf_r+0x40>
 8003d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d76:	e00e      	b.n	8003d96 <__swhatbuf_r+0x42>
 8003d78:	466a      	mov	r2, sp
 8003d7a:	f000 fc95 	bl	80046a8 <_fstat_r>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	dbf1      	blt.n	8003d66 <__swhatbuf_r+0x12>
 8003d82:	9a01      	ldr	r2, [sp, #4]
 8003d84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d8c:	425a      	negs	r2, r3
 8003d8e:	415a      	adcs	r2, r3
 8003d90:	602a      	str	r2, [r5, #0]
 8003d92:	e7ee      	b.n	8003d72 <__swhatbuf_r+0x1e>
 8003d94:	2340      	movs	r3, #64	; 0x40
 8003d96:	2000      	movs	r0, #0
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	b016      	add	sp, #88	; 0x58
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003da0 <__smakebuf_r>:
 8003da0:	898b      	ldrh	r3, [r1, #12]
 8003da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003da4:	079d      	lsls	r5, r3, #30
 8003da6:	4606      	mov	r6, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	d507      	bpl.n	8003dbc <__smakebuf_r+0x1c>
 8003dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	2301      	movs	r3, #1
 8003db6:	6163      	str	r3, [r4, #20]
 8003db8:	b002      	add	sp, #8
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	ab01      	add	r3, sp, #4
 8003dbe:	466a      	mov	r2, sp
 8003dc0:	f7ff ffc8 	bl	8003d54 <__swhatbuf_r>
 8003dc4:	9900      	ldr	r1, [sp, #0]
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f895 	bl	8003ef8 <_malloc_r>
 8003dce:	b948      	cbnz	r0, 8003de4 <__smakebuf_r+0x44>
 8003dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd4:	059a      	lsls	r2, r3, #22
 8003dd6:	d4ef      	bmi.n	8003db8 <__smakebuf_r+0x18>
 8003dd8:	f023 0303 	bic.w	r3, r3, #3
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	e7e3      	b.n	8003dac <__smakebuf_r+0xc>
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <__smakebuf_r+0x7c>)
 8003de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	6020      	str	r0, [r4, #0]
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	9b00      	ldr	r3, [sp, #0]
 8003df4:	6163      	str	r3, [r4, #20]
 8003df6:	9b01      	ldr	r3, [sp, #4]
 8003df8:	6120      	str	r0, [r4, #16]
 8003dfa:	b15b      	cbz	r3, 8003e14 <__smakebuf_r+0x74>
 8003dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 fc63 	bl	80046cc <_isatty_r>
 8003e06:	b128      	cbz	r0, 8003e14 <__smakebuf_r+0x74>
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	81a3      	strh	r3, [r4, #12]
 8003e14:	89a0      	ldrh	r0, [r4, #12]
 8003e16:	4305      	orrs	r5, r0
 8003e18:	81a5      	strh	r5, [r4, #12]
 8003e1a:	e7cd      	b.n	8003db8 <__smakebuf_r+0x18>
 8003e1c:	08003bad 	.word	0x08003bad

08003e20 <_free_r>:
 8003e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e22:	2900      	cmp	r1, #0
 8003e24:	d044      	beq.n	8003eb0 <_free_r+0x90>
 8003e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e2a:	9001      	str	r0, [sp, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e32:	bfb8      	it	lt
 8003e34:	18e4      	addlt	r4, r4, r3
 8003e36:	f000 fc6b 	bl	8004710 <__malloc_lock>
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <_free_r+0x94>)
 8003e3c:	9801      	ldr	r0, [sp, #4]
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	b933      	cbnz	r3, 8003e50 <_free_r+0x30>
 8003e42:	6063      	str	r3, [r4, #4]
 8003e44:	6014      	str	r4, [r2, #0]
 8003e46:	b003      	add	sp, #12
 8003e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e4c:	f000 bc66 	b.w	800471c <__malloc_unlock>
 8003e50:	42a3      	cmp	r3, r4
 8003e52:	d908      	bls.n	8003e66 <_free_r+0x46>
 8003e54:	6825      	ldr	r5, [r4, #0]
 8003e56:	1961      	adds	r1, r4, r5
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	bf01      	itttt	eq
 8003e5c:	6819      	ldreq	r1, [r3, #0]
 8003e5e:	685b      	ldreq	r3, [r3, #4]
 8003e60:	1949      	addeq	r1, r1, r5
 8003e62:	6021      	streq	r1, [r4, #0]
 8003e64:	e7ed      	b.n	8003e42 <_free_r+0x22>
 8003e66:	461a      	mov	r2, r3
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	b10b      	cbz	r3, 8003e70 <_free_r+0x50>
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	d9fa      	bls.n	8003e66 <_free_r+0x46>
 8003e70:	6811      	ldr	r1, [r2, #0]
 8003e72:	1855      	adds	r5, r2, r1
 8003e74:	42a5      	cmp	r5, r4
 8003e76:	d10b      	bne.n	8003e90 <_free_r+0x70>
 8003e78:	6824      	ldr	r4, [r4, #0]
 8003e7a:	4421      	add	r1, r4
 8003e7c:	1854      	adds	r4, r2, r1
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	d1e0      	bne.n	8003e46 <_free_r+0x26>
 8003e84:	681c      	ldr	r4, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	4421      	add	r1, r4
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	e7da      	b.n	8003e46 <_free_r+0x26>
 8003e90:	d902      	bls.n	8003e98 <_free_r+0x78>
 8003e92:	230c      	movs	r3, #12
 8003e94:	6003      	str	r3, [r0, #0]
 8003e96:	e7d6      	b.n	8003e46 <_free_r+0x26>
 8003e98:	6825      	ldr	r5, [r4, #0]
 8003e9a:	1961      	adds	r1, r4, r5
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	bf04      	itt	eq
 8003ea0:	6819      	ldreq	r1, [r3, #0]
 8003ea2:	685b      	ldreq	r3, [r3, #4]
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	bf04      	itt	eq
 8003ea8:	1949      	addeq	r1, r1, r5
 8003eaa:	6021      	streq	r1, [r4, #0]
 8003eac:	6054      	str	r4, [r2, #4]
 8003eae:	e7ca      	b.n	8003e46 <_free_r+0x26>
 8003eb0:	b003      	add	sp, #12
 8003eb2:	bd30      	pop	{r4, r5, pc}
 8003eb4:	20000138 	.word	0x20000138

08003eb8 <sbrk_aligned>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4e0e      	ldr	r6, [pc, #56]	; (8003ef4 <sbrk_aligned+0x3c>)
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	6831      	ldr	r1, [r6, #0]
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	b911      	cbnz	r1, 8003eca <sbrk_aligned+0x12>
 8003ec4:	f000 fb7a 	bl	80045bc <_sbrk_r>
 8003ec8:	6030      	str	r0, [r6, #0]
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 fb75 	bl	80045bc <_sbrk_r>
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	d00a      	beq.n	8003eec <sbrk_aligned+0x34>
 8003ed6:	1cc4      	adds	r4, r0, #3
 8003ed8:	f024 0403 	bic.w	r4, r4, #3
 8003edc:	42a0      	cmp	r0, r4
 8003ede:	d007      	beq.n	8003ef0 <sbrk_aligned+0x38>
 8003ee0:	1a21      	subs	r1, r4, r0
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 fb6a 	bl	80045bc <_sbrk_r>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d101      	bne.n	8003ef0 <sbrk_aligned+0x38>
 8003eec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	2000013c 	.word	0x2000013c

08003ef8 <_malloc_r>:
 8003ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efc:	1ccd      	adds	r5, r1, #3
 8003efe:	f025 0503 	bic.w	r5, r5, #3
 8003f02:	3508      	adds	r5, #8
 8003f04:	2d0c      	cmp	r5, #12
 8003f06:	bf38      	it	cc
 8003f08:	250c      	movcc	r5, #12
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	db01      	blt.n	8003f14 <_malloc_r+0x1c>
 8003f10:	42a9      	cmp	r1, r5
 8003f12:	d905      	bls.n	8003f20 <_malloc_r+0x28>
 8003f14:	230c      	movs	r3, #12
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	2600      	movs	r6, #0
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f20:	4e2e      	ldr	r6, [pc, #184]	; (8003fdc <_malloc_r+0xe4>)
 8003f22:	f000 fbf5 	bl	8004710 <__malloc_lock>
 8003f26:	6833      	ldr	r3, [r6, #0]
 8003f28:	461c      	mov	r4, r3
 8003f2a:	bb34      	cbnz	r4, 8003f7a <_malloc_r+0x82>
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f7ff ffc2 	bl	8003eb8 <sbrk_aligned>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	4604      	mov	r4, r0
 8003f38:	d14d      	bne.n	8003fd6 <_malloc_r+0xde>
 8003f3a:	6834      	ldr	r4, [r6, #0]
 8003f3c:	4626      	mov	r6, r4
 8003f3e:	2e00      	cmp	r6, #0
 8003f40:	d140      	bne.n	8003fc4 <_malloc_r+0xcc>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	4631      	mov	r1, r6
 8003f46:	4638      	mov	r0, r7
 8003f48:	eb04 0803 	add.w	r8, r4, r3
 8003f4c:	f000 fb36 	bl	80045bc <_sbrk_r>
 8003f50:	4580      	cmp	r8, r0
 8003f52:	d13a      	bne.n	8003fca <_malloc_r+0xd2>
 8003f54:	6821      	ldr	r1, [r4, #0]
 8003f56:	3503      	adds	r5, #3
 8003f58:	1a6d      	subs	r5, r5, r1
 8003f5a:	f025 0503 	bic.w	r5, r5, #3
 8003f5e:	3508      	adds	r5, #8
 8003f60:	2d0c      	cmp	r5, #12
 8003f62:	bf38      	it	cc
 8003f64:	250c      	movcc	r5, #12
 8003f66:	4629      	mov	r1, r5
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f7ff ffa5 	bl	8003eb8 <sbrk_aligned>
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d02b      	beq.n	8003fca <_malloc_r+0xd2>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	442b      	add	r3, r5
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	e00e      	b.n	8003f98 <_malloc_r+0xa0>
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	1b52      	subs	r2, r2, r5
 8003f7e:	d41e      	bmi.n	8003fbe <_malloc_r+0xc6>
 8003f80:	2a0b      	cmp	r2, #11
 8003f82:	d916      	bls.n	8003fb2 <_malloc_r+0xba>
 8003f84:	1961      	adds	r1, r4, r5
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	6025      	str	r5, [r4, #0]
 8003f8a:	bf18      	it	ne
 8003f8c:	6059      	strne	r1, [r3, #4]
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	bf08      	it	eq
 8003f92:	6031      	streq	r1, [r6, #0]
 8003f94:	5162      	str	r2, [r4, r5]
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f104 060b 	add.w	r6, r4, #11
 8003f9e:	f000 fbbd 	bl	800471c <__malloc_unlock>
 8003fa2:	f026 0607 	bic.w	r6, r6, #7
 8003fa6:	1d23      	adds	r3, r4, #4
 8003fa8:	1af2      	subs	r2, r6, r3
 8003faa:	d0b6      	beq.n	8003f1a <_malloc_r+0x22>
 8003fac:	1b9b      	subs	r3, r3, r6
 8003fae:	50a3      	str	r3, [r4, r2]
 8003fb0:	e7b3      	b.n	8003f1a <_malloc_r+0x22>
 8003fb2:	6862      	ldr	r2, [r4, #4]
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	bf0c      	ite	eq
 8003fb8:	6032      	streq	r2, [r6, #0]
 8003fba:	605a      	strne	r2, [r3, #4]
 8003fbc:	e7ec      	b.n	8003f98 <_malloc_r+0xa0>
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	6864      	ldr	r4, [r4, #4]
 8003fc2:	e7b2      	b.n	8003f2a <_malloc_r+0x32>
 8003fc4:	4634      	mov	r4, r6
 8003fc6:	6876      	ldr	r6, [r6, #4]
 8003fc8:	e7b9      	b.n	8003f3e <_malloc_r+0x46>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f000 fba4 	bl	800471c <__malloc_unlock>
 8003fd4:	e7a1      	b.n	8003f1a <_malloc_r+0x22>
 8003fd6:	6025      	str	r5, [r4, #0]
 8003fd8:	e7de      	b.n	8003f98 <_malloc_r+0xa0>
 8003fda:	bf00      	nop
 8003fdc:	20000138 	.word	0x20000138

08003fe0 <__sfputc_r>:
 8003fe0:	6893      	ldr	r3, [r2, #8]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	b410      	push	{r4}
 8003fe8:	6093      	str	r3, [r2, #8]
 8003fea:	da08      	bge.n	8003ffe <__sfputc_r+0x1e>
 8003fec:	6994      	ldr	r4, [r2, #24]
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	db01      	blt.n	8003ff6 <__sfputc_r+0x16>
 8003ff2:	290a      	cmp	r1, #10
 8003ff4:	d103      	bne.n	8003ffe <__sfputc_r+0x1e>
 8003ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ffa:	f7ff bc31 	b.w	8003860 <__swbuf_r>
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	1c58      	adds	r0, r3, #1
 8004002:	6010      	str	r0, [r2, #0]
 8004004:	7019      	strb	r1, [r3, #0]
 8004006:	4608      	mov	r0, r1
 8004008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800400c:	4770      	bx	lr

0800400e <__sfputs_r>:
 800400e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004010:	4606      	mov	r6, r0
 8004012:	460f      	mov	r7, r1
 8004014:	4614      	mov	r4, r2
 8004016:	18d5      	adds	r5, r2, r3
 8004018:	42ac      	cmp	r4, r5
 800401a:	d101      	bne.n	8004020 <__sfputs_r+0x12>
 800401c:	2000      	movs	r0, #0
 800401e:	e007      	b.n	8004030 <__sfputs_r+0x22>
 8004020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004024:	463a      	mov	r2, r7
 8004026:	4630      	mov	r0, r6
 8004028:	f7ff ffda 	bl	8003fe0 <__sfputc_r>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d1f3      	bne.n	8004018 <__sfputs_r+0xa>
 8004030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004034 <_vfiprintf_r>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	460d      	mov	r5, r1
 800403a:	b09d      	sub	sp, #116	; 0x74
 800403c:	4614      	mov	r4, r2
 800403e:	4698      	mov	r8, r3
 8004040:	4606      	mov	r6, r0
 8004042:	b118      	cbz	r0, 800404c <_vfiprintf_r+0x18>
 8004044:	6983      	ldr	r3, [r0, #24]
 8004046:	b90b      	cbnz	r3, 800404c <_vfiprintf_r+0x18>
 8004048:	f7ff fde4 	bl	8003c14 <__sinit>
 800404c:	4b89      	ldr	r3, [pc, #548]	; (8004274 <_vfiprintf_r+0x240>)
 800404e:	429d      	cmp	r5, r3
 8004050:	d11b      	bne.n	800408a <_vfiprintf_r+0x56>
 8004052:	6875      	ldr	r5, [r6, #4]
 8004054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004056:	07d9      	lsls	r1, r3, #31
 8004058:	d405      	bmi.n	8004066 <_vfiprintf_r+0x32>
 800405a:	89ab      	ldrh	r3, [r5, #12]
 800405c:	059a      	lsls	r2, r3, #22
 800405e:	d402      	bmi.n	8004066 <_vfiprintf_r+0x32>
 8004060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004062:	f7ff fe75 	bl	8003d50 <__retarget_lock_acquire_recursive>
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	d501      	bpl.n	8004070 <_vfiprintf_r+0x3c>
 800406c:	692b      	ldr	r3, [r5, #16]
 800406e:	b9eb      	cbnz	r3, 80040ac <_vfiprintf_r+0x78>
 8004070:	4629      	mov	r1, r5
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff fc46 	bl	8003904 <__swsetup_r>
 8004078:	b1c0      	cbz	r0, 80040ac <_vfiprintf_r+0x78>
 800407a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800407c:	07dc      	lsls	r4, r3, #31
 800407e:	d50e      	bpl.n	800409e <_vfiprintf_r+0x6a>
 8004080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004084:	b01d      	add	sp, #116	; 0x74
 8004086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408a:	4b7b      	ldr	r3, [pc, #492]	; (8004278 <_vfiprintf_r+0x244>)
 800408c:	429d      	cmp	r5, r3
 800408e:	d101      	bne.n	8004094 <_vfiprintf_r+0x60>
 8004090:	68b5      	ldr	r5, [r6, #8]
 8004092:	e7df      	b.n	8004054 <_vfiprintf_r+0x20>
 8004094:	4b79      	ldr	r3, [pc, #484]	; (800427c <_vfiprintf_r+0x248>)
 8004096:	429d      	cmp	r5, r3
 8004098:	bf08      	it	eq
 800409a:	68f5      	ldreq	r5, [r6, #12]
 800409c:	e7da      	b.n	8004054 <_vfiprintf_r+0x20>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	0598      	lsls	r0, r3, #22
 80040a2:	d4ed      	bmi.n	8004080 <_vfiprintf_r+0x4c>
 80040a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a6:	f7ff fe54 	bl	8003d52 <__retarget_lock_release_recursive>
 80040aa:	e7e9      	b.n	8004080 <_vfiprintf_r+0x4c>
 80040ac:	2300      	movs	r3, #0
 80040ae:	9309      	str	r3, [sp, #36]	; 0x24
 80040b0:	2320      	movs	r3, #32
 80040b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ba:	2330      	movs	r3, #48	; 0x30
 80040bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004280 <_vfiprintf_r+0x24c>
 80040c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040c4:	f04f 0901 	mov.w	r9, #1
 80040c8:	4623      	mov	r3, r4
 80040ca:	469a      	mov	sl, r3
 80040cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040d0:	b10a      	cbz	r2, 80040d6 <_vfiprintf_r+0xa2>
 80040d2:	2a25      	cmp	r2, #37	; 0x25
 80040d4:	d1f9      	bne.n	80040ca <_vfiprintf_r+0x96>
 80040d6:	ebba 0b04 	subs.w	fp, sl, r4
 80040da:	d00b      	beq.n	80040f4 <_vfiprintf_r+0xc0>
 80040dc:	465b      	mov	r3, fp
 80040de:	4622      	mov	r2, r4
 80040e0:	4629      	mov	r1, r5
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7ff ff93 	bl	800400e <__sfputs_r>
 80040e8:	3001      	adds	r0, #1
 80040ea:	f000 80aa 	beq.w	8004242 <_vfiprintf_r+0x20e>
 80040ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040f0:	445a      	add	r2, fp
 80040f2:	9209      	str	r2, [sp, #36]	; 0x24
 80040f4:	f89a 3000 	ldrb.w	r3, [sl]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a2 	beq.w	8004242 <_vfiprintf_r+0x20e>
 80040fe:	2300      	movs	r3, #0
 8004100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004108:	f10a 0a01 	add.w	sl, sl, #1
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	9307      	str	r3, [sp, #28]
 8004110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004114:	931a      	str	r3, [sp, #104]	; 0x68
 8004116:	4654      	mov	r4, sl
 8004118:	2205      	movs	r2, #5
 800411a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411e:	4858      	ldr	r0, [pc, #352]	; (8004280 <_vfiprintf_r+0x24c>)
 8004120:	f7fc f856 	bl	80001d0 <memchr>
 8004124:	9a04      	ldr	r2, [sp, #16]
 8004126:	b9d8      	cbnz	r0, 8004160 <_vfiprintf_r+0x12c>
 8004128:	06d1      	lsls	r1, r2, #27
 800412a:	bf44      	itt	mi
 800412c:	2320      	movmi	r3, #32
 800412e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004132:	0713      	lsls	r3, r2, #28
 8004134:	bf44      	itt	mi
 8004136:	232b      	movmi	r3, #43	; 0x2b
 8004138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800413c:	f89a 3000 	ldrb.w	r3, [sl]
 8004140:	2b2a      	cmp	r3, #42	; 0x2a
 8004142:	d015      	beq.n	8004170 <_vfiprintf_r+0x13c>
 8004144:	9a07      	ldr	r2, [sp, #28]
 8004146:	4654      	mov	r4, sl
 8004148:	2000      	movs	r0, #0
 800414a:	f04f 0c0a 	mov.w	ip, #10
 800414e:	4621      	mov	r1, r4
 8004150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004154:	3b30      	subs	r3, #48	; 0x30
 8004156:	2b09      	cmp	r3, #9
 8004158:	d94e      	bls.n	80041f8 <_vfiprintf_r+0x1c4>
 800415a:	b1b0      	cbz	r0, 800418a <_vfiprintf_r+0x156>
 800415c:	9207      	str	r2, [sp, #28]
 800415e:	e014      	b.n	800418a <_vfiprintf_r+0x156>
 8004160:	eba0 0308 	sub.w	r3, r0, r8
 8004164:	fa09 f303 	lsl.w	r3, r9, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	46a2      	mov	sl, r4
 800416e:	e7d2      	b.n	8004116 <_vfiprintf_r+0xe2>
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	1d19      	adds	r1, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	9103      	str	r1, [sp, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	bfbb      	ittet	lt
 800417c:	425b      	neglt	r3, r3
 800417e:	f042 0202 	orrlt.w	r2, r2, #2
 8004182:	9307      	strge	r3, [sp, #28]
 8004184:	9307      	strlt	r3, [sp, #28]
 8004186:	bfb8      	it	lt
 8004188:	9204      	strlt	r2, [sp, #16]
 800418a:	7823      	ldrb	r3, [r4, #0]
 800418c:	2b2e      	cmp	r3, #46	; 0x2e
 800418e:	d10c      	bne.n	80041aa <_vfiprintf_r+0x176>
 8004190:	7863      	ldrb	r3, [r4, #1]
 8004192:	2b2a      	cmp	r3, #42	; 0x2a
 8004194:	d135      	bne.n	8004202 <_vfiprintf_r+0x1ce>
 8004196:	9b03      	ldr	r3, [sp, #12]
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	9203      	str	r2, [sp, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041a6:	3402      	adds	r4, #2
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004290 <_vfiprintf_r+0x25c>
 80041ae:	7821      	ldrb	r1, [r4, #0]
 80041b0:	2203      	movs	r2, #3
 80041b2:	4650      	mov	r0, sl
 80041b4:	f7fc f80c 	bl	80001d0 <memchr>
 80041b8:	b140      	cbz	r0, 80041cc <_vfiprintf_r+0x198>
 80041ba:	2340      	movs	r3, #64	; 0x40
 80041bc:	eba0 000a 	sub.w	r0, r0, sl
 80041c0:	fa03 f000 	lsl.w	r0, r3, r0
 80041c4:	9b04      	ldr	r3, [sp, #16]
 80041c6:	4303      	orrs	r3, r0
 80041c8:	3401      	adds	r4, #1
 80041ca:	9304      	str	r3, [sp, #16]
 80041cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d0:	482c      	ldr	r0, [pc, #176]	; (8004284 <_vfiprintf_r+0x250>)
 80041d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041d6:	2206      	movs	r2, #6
 80041d8:	f7fb fffa 	bl	80001d0 <memchr>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d03f      	beq.n	8004260 <_vfiprintf_r+0x22c>
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <_vfiprintf_r+0x254>)
 80041e2:	bb1b      	cbnz	r3, 800422c <_vfiprintf_r+0x1f8>
 80041e4:	9b03      	ldr	r3, [sp, #12]
 80041e6:	3307      	adds	r3, #7
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	3308      	adds	r3, #8
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	443b      	add	r3, r7
 80041f4:	9309      	str	r3, [sp, #36]	; 0x24
 80041f6:	e767      	b.n	80040c8 <_vfiprintf_r+0x94>
 80041f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80041fc:	460c      	mov	r4, r1
 80041fe:	2001      	movs	r0, #1
 8004200:	e7a5      	b.n	800414e <_vfiprintf_r+0x11a>
 8004202:	2300      	movs	r3, #0
 8004204:	3401      	adds	r4, #1
 8004206:	9305      	str	r3, [sp, #20]
 8004208:	4619      	mov	r1, r3
 800420a:	f04f 0c0a 	mov.w	ip, #10
 800420e:	4620      	mov	r0, r4
 8004210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004214:	3a30      	subs	r2, #48	; 0x30
 8004216:	2a09      	cmp	r2, #9
 8004218:	d903      	bls.n	8004222 <_vfiprintf_r+0x1ee>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0c5      	beq.n	80041aa <_vfiprintf_r+0x176>
 800421e:	9105      	str	r1, [sp, #20]
 8004220:	e7c3      	b.n	80041aa <_vfiprintf_r+0x176>
 8004222:	fb0c 2101 	mla	r1, ip, r1, r2
 8004226:	4604      	mov	r4, r0
 8004228:	2301      	movs	r3, #1
 800422a:	e7f0      	b.n	800420e <_vfiprintf_r+0x1da>
 800422c:	ab03      	add	r3, sp, #12
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	462a      	mov	r2, r5
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <_vfiprintf_r+0x258>)
 8004234:	a904      	add	r1, sp, #16
 8004236:	4630      	mov	r0, r6
 8004238:	f3af 8000 	nop.w
 800423c:	4607      	mov	r7, r0
 800423e:	1c78      	adds	r0, r7, #1
 8004240:	d1d6      	bne.n	80041f0 <_vfiprintf_r+0x1bc>
 8004242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004244:	07d9      	lsls	r1, r3, #31
 8004246:	d405      	bmi.n	8004254 <_vfiprintf_r+0x220>
 8004248:	89ab      	ldrh	r3, [r5, #12]
 800424a:	059a      	lsls	r2, r3, #22
 800424c:	d402      	bmi.n	8004254 <_vfiprintf_r+0x220>
 800424e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004250:	f7ff fd7f 	bl	8003d52 <__retarget_lock_release_recursive>
 8004254:	89ab      	ldrh	r3, [r5, #12]
 8004256:	065b      	lsls	r3, r3, #25
 8004258:	f53f af12 	bmi.w	8004080 <_vfiprintf_r+0x4c>
 800425c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800425e:	e711      	b.n	8004084 <_vfiprintf_r+0x50>
 8004260:	ab03      	add	r3, sp, #12
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	462a      	mov	r2, r5
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <_vfiprintf_r+0x258>)
 8004268:	a904      	add	r1, sp, #16
 800426a:	4630      	mov	r0, r6
 800426c:	f000 f880 	bl	8004370 <_printf_i>
 8004270:	e7e4      	b.n	800423c <_vfiprintf_r+0x208>
 8004272:	bf00      	nop
 8004274:	080047f0 	.word	0x080047f0
 8004278:	08004810 	.word	0x08004810
 800427c:	080047d0 	.word	0x080047d0
 8004280:	08004830 	.word	0x08004830
 8004284:	0800483a 	.word	0x0800483a
 8004288:	00000000 	.word	0x00000000
 800428c:	0800400f 	.word	0x0800400f
 8004290:	08004836 	.word	0x08004836

08004294 <_printf_common>:
 8004294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	4616      	mov	r6, r2
 800429a:	4699      	mov	r9, r3
 800429c:	688a      	ldr	r2, [r1, #8]
 800429e:	690b      	ldr	r3, [r1, #16]
 80042a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	bfb8      	it	lt
 80042a8:	4613      	movlt	r3, r2
 80042aa:	6033      	str	r3, [r6, #0]
 80042ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b0:	4607      	mov	r7, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	b10a      	cbz	r2, 80042ba <_printf_common+0x26>
 80042b6:	3301      	adds	r3, #1
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	0699      	lsls	r1, r3, #26
 80042be:	bf42      	ittt	mi
 80042c0:	6833      	ldrmi	r3, [r6, #0]
 80042c2:	3302      	addmi	r3, #2
 80042c4:	6033      	strmi	r3, [r6, #0]
 80042c6:	6825      	ldr	r5, [r4, #0]
 80042c8:	f015 0506 	ands.w	r5, r5, #6
 80042cc:	d106      	bne.n	80042dc <_printf_common+0x48>
 80042ce:	f104 0a19 	add.w	sl, r4, #25
 80042d2:	68e3      	ldr	r3, [r4, #12]
 80042d4:	6832      	ldr	r2, [r6, #0]
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	42ab      	cmp	r3, r5
 80042da:	dc26      	bgt.n	800432a <_printf_common+0x96>
 80042dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042e0:	1e13      	subs	r3, r2, #0
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	bf18      	it	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	0692      	lsls	r2, r2, #26
 80042ea:	d42b      	bmi.n	8004344 <_printf_common+0xb0>
 80042ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042f0:	4649      	mov	r1, r9
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d01e      	beq.n	8004338 <_printf_common+0xa4>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	68e5      	ldr	r5, [r4, #12]
 80042fe:	6832      	ldr	r2, [r6, #0]
 8004300:	f003 0306 	and.w	r3, r3, #6
 8004304:	2b04      	cmp	r3, #4
 8004306:	bf08      	it	eq
 8004308:	1aad      	subeq	r5, r5, r2
 800430a:	68a3      	ldr	r3, [r4, #8]
 800430c:	6922      	ldr	r2, [r4, #16]
 800430e:	bf0c      	ite	eq
 8004310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004314:	2500      	movne	r5, #0
 8004316:	4293      	cmp	r3, r2
 8004318:	bfc4      	itt	gt
 800431a:	1a9b      	subgt	r3, r3, r2
 800431c:	18ed      	addgt	r5, r5, r3
 800431e:	2600      	movs	r6, #0
 8004320:	341a      	adds	r4, #26
 8004322:	42b5      	cmp	r5, r6
 8004324:	d11a      	bne.n	800435c <_printf_common+0xc8>
 8004326:	2000      	movs	r0, #0
 8004328:	e008      	b.n	800433c <_printf_common+0xa8>
 800432a:	2301      	movs	r3, #1
 800432c:	4652      	mov	r2, sl
 800432e:	4649      	mov	r1, r9
 8004330:	4638      	mov	r0, r7
 8004332:	47c0      	blx	r8
 8004334:	3001      	adds	r0, #1
 8004336:	d103      	bne.n	8004340 <_printf_common+0xac>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	3501      	adds	r5, #1
 8004342:	e7c6      	b.n	80042d2 <_printf_common+0x3e>
 8004344:	18e1      	adds	r1, r4, r3
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	2030      	movs	r0, #48	; 0x30
 800434a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800434e:	4422      	add	r2, r4
 8004350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004358:	3302      	adds	r3, #2
 800435a:	e7c7      	b.n	80042ec <_printf_common+0x58>
 800435c:	2301      	movs	r3, #1
 800435e:	4622      	mov	r2, r4
 8004360:	4649      	mov	r1, r9
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	3001      	adds	r0, #1
 8004368:	d0e6      	beq.n	8004338 <_printf_common+0xa4>
 800436a:	3601      	adds	r6, #1
 800436c:	e7d9      	b.n	8004322 <_printf_common+0x8e>
	...

08004370 <_printf_i>:
 8004370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	7e0f      	ldrb	r7, [r1, #24]
 8004376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004378:	2f78      	cmp	r7, #120	; 0x78
 800437a:	4691      	mov	r9, r2
 800437c:	4680      	mov	r8, r0
 800437e:	460c      	mov	r4, r1
 8004380:	469a      	mov	sl, r3
 8004382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004386:	d807      	bhi.n	8004398 <_printf_i+0x28>
 8004388:	2f62      	cmp	r7, #98	; 0x62
 800438a:	d80a      	bhi.n	80043a2 <_printf_i+0x32>
 800438c:	2f00      	cmp	r7, #0
 800438e:	f000 80d8 	beq.w	8004542 <_printf_i+0x1d2>
 8004392:	2f58      	cmp	r7, #88	; 0x58
 8004394:	f000 80a3 	beq.w	80044de <_printf_i+0x16e>
 8004398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800439c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043a0:	e03a      	b.n	8004418 <_printf_i+0xa8>
 80043a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043a6:	2b15      	cmp	r3, #21
 80043a8:	d8f6      	bhi.n	8004398 <_printf_i+0x28>
 80043aa:	a101      	add	r1, pc, #4	; (adr r1, 80043b0 <_printf_i+0x40>)
 80043ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043b0:	08004409 	.word	0x08004409
 80043b4:	0800441d 	.word	0x0800441d
 80043b8:	08004399 	.word	0x08004399
 80043bc:	08004399 	.word	0x08004399
 80043c0:	08004399 	.word	0x08004399
 80043c4:	08004399 	.word	0x08004399
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	08004399 	.word	0x08004399
 80043d0:	08004399 	.word	0x08004399
 80043d4:	08004399 	.word	0x08004399
 80043d8:	08004399 	.word	0x08004399
 80043dc:	08004529 	.word	0x08004529
 80043e0:	0800444d 	.word	0x0800444d
 80043e4:	0800450b 	.word	0x0800450b
 80043e8:	08004399 	.word	0x08004399
 80043ec:	08004399 	.word	0x08004399
 80043f0:	0800454b 	.word	0x0800454b
 80043f4:	08004399 	.word	0x08004399
 80043f8:	0800444d 	.word	0x0800444d
 80043fc:	08004399 	.word	0x08004399
 8004400:	08004399 	.word	0x08004399
 8004404:	08004513 	.word	0x08004513
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	602a      	str	r2, [r5, #0]
 8004410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004418:	2301      	movs	r3, #1
 800441a:	e0a3      	b.n	8004564 <_printf_i+0x1f4>
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	6829      	ldr	r1, [r5, #0]
 8004420:	0606      	lsls	r6, r0, #24
 8004422:	f101 0304 	add.w	r3, r1, #4
 8004426:	d50a      	bpl.n	800443e <_printf_i+0xce>
 8004428:	680e      	ldr	r6, [r1, #0]
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	2e00      	cmp	r6, #0
 800442e:	da03      	bge.n	8004438 <_printf_i+0xc8>
 8004430:	232d      	movs	r3, #45	; 0x2d
 8004432:	4276      	negs	r6, r6
 8004434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004438:	485e      	ldr	r0, [pc, #376]	; (80045b4 <_printf_i+0x244>)
 800443a:	230a      	movs	r3, #10
 800443c:	e019      	b.n	8004472 <_printf_i+0x102>
 800443e:	680e      	ldr	r6, [r1, #0]
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004446:	bf18      	it	ne
 8004448:	b236      	sxthne	r6, r6
 800444a:	e7ef      	b.n	800442c <_printf_i+0xbc>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	1d19      	adds	r1, r3, #4
 8004452:	6029      	str	r1, [r5, #0]
 8004454:	0601      	lsls	r1, r0, #24
 8004456:	d501      	bpl.n	800445c <_printf_i+0xec>
 8004458:	681e      	ldr	r6, [r3, #0]
 800445a:	e002      	b.n	8004462 <_printf_i+0xf2>
 800445c:	0646      	lsls	r6, r0, #25
 800445e:	d5fb      	bpl.n	8004458 <_printf_i+0xe8>
 8004460:	881e      	ldrh	r6, [r3, #0]
 8004462:	4854      	ldr	r0, [pc, #336]	; (80045b4 <_printf_i+0x244>)
 8004464:	2f6f      	cmp	r7, #111	; 0x6f
 8004466:	bf0c      	ite	eq
 8004468:	2308      	moveq	r3, #8
 800446a:	230a      	movne	r3, #10
 800446c:	2100      	movs	r1, #0
 800446e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004472:	6865      	ldr	r5, [r4, #4]
 8004474:	60a5      	str	r5, [r4, #8]
 8004476:	2d00      	cmp	r5, #0
 8004478:	bfa2      	ittt	ge
 800447a:	6821      	ldrge	r1, [r4, #0]
 800447c:	f021 0104 	bicge.w	r1, r1, #4
 8004480:	6021      	strge	r1, [r4, #0]
 8004482:	b90e      	cbnz	r6, 8004488 <_printf_i+0x118>
 8004484:	2d00      	cmp	r5, #0
 8004486:	d04d      	beq.n	8004524 <_printf_i+0x1b4>
 8004488:	4615      	mov	r5, r2
 800448a:	fbb6 f1f3 	udiv	r1, r6, r3
 800448e:	fb03 6711 	mls	r7, r3, r1, r6
 8004492:	5dc7      	ldrb	r7, [r0, r7]
 8004494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004498:	4637      	mov	r7, r6
 800449a:	42bb      	cmp	r3, r7
 800449c:	460e      	mov	r6, r1
 800449e:	d9f4      	bls.n	800448a <_printf_i+0x11a>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d10b      	bne.n	80044bc <_printf_i+0x14c>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	07de      	lsls	r6, r3, #31
 80044a8:	d508      	bpl.n	80044bc <_printf_i+0x14c>
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	6861      	ldr	r1, [r4, #4]
 80044ae:	4299      	cmp	r1, r3
 80044b0:	bfde      	ittt	le
 80044b2:	2330      	movle	r3, #48	; 0x30
 80044b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044bc:	1b52      	subs	r2, r2, r5
 80044be:	6122      	str	r2, [r4, #16]
 80044c0:	f8cd a000 	str.w	sl, [sp]
 80044c4:	464b      	mov	r3, r9
 80044c6:	aa03      	add	r2, sp, #12
 80044c8:	4621      	mov	r1, r4
 80044ca:	4640      	mov	r0, r8
 80044cc:	f7ff fee2 	bl	8004294 <_printf_common>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d14c      	bne.n	800456e <_printf_i+0x1fe>
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044d8:	b004      	add	sp, #16
 80044da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044de:	4835      	ldr	r0, [pc, #212]	; (80045b4 <_printf_i+0x244>)
 80044e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044e4:	6829      	ldr	r1, [r5, #0]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80044ec:	6029      	str	r1, [r5, #0]
 80044ee:	061d      	lsls	r5, r3, #24
 80044f0:	d514      	bpl.n	800451c <_printf_i+0x1ac>
 80044f2:	07df      	lsls	r7, r3, #31
 80044f4:	bf44      	itt	mi
 80044f6:	f043 0320 	orrmi.w	r3, r3, #32
 80044fa:	6023      	strmi	r3, [r4, #0]
 80044fc:	b91e      	cbnz	r6, 8004506 <_printf_i+0x196>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	f023 0320 	bic.w	r3, r3, #32
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	2310      	movs	r3, #16
 8004508:	e7b0      	b.n	800446c <_printf_i+0xfc>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	f043 0320 	orr.w	r3, r3, #32
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	2378      	movs	r3, #120	; 0x78
 8004514:	4828      	ldr	r0, [pc, #160]	; (80045b8 <_printf_i+0x248>)
 8004516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800451a:	e7e3      	b.n	80044e4 <_printf_i+0x174>
 800451c:	0659      	lsls	r1, r3, #25
 800451e:	bf48      	it	mi
 8004520:	b2b6      	uxthmi	r6, r6
 8004522:	e7e6      	b.n	80044f2 <_printf_i+0x182>
 8004524:	4615      	mov	r5, r2
 8004526:	e7bb      	b.n	80044a0 <_printf_i+0x130>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	6826      	ldr	r6, [r4, #0]
 800452c:	6961      	ldr	r1, [r4, #20]
 800452e:	1d18      	adds	r0, r3, #4
 8004530:	6028      	str	r0, [r5, #0]
 8004532:	0635      	lsls	r5, r6, #24
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	d501      	bpl.n	800453c <_printf_i+0x1cc>
 8004538:	6019      	str	r1, [r3, #0]
 800453a:	e002      	b.n	8004542 <_printf_i+0x1d2>
 800453c:	0670      	lsls	r0, r6, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0x1c8>
 8004540:	8019      	strh	r1, [r3, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	6123      	str	r3, [r4, #16]
 8004546:	4615      	mov	r5, r2
 8004548:	e7ba      	b.n	80044c0 <_printf_i+0x150>
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	602a      	str	r2, [r5, #0]
 8004550:	681d      	ldr	r5, [r3, #0]
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	2100      	movs	r1, #0
 8004556:	4628      	mov	r0, r5
 8004558:	f7fb fe3a 	bl	80001d0 <memchr>
 800455c:	b108      	cbz	r0, 8004562 <_printf_i+0x1f2>
 800455e:	1b40      	subs	r0, r0, r5
 8004560:	6060      	str	r0, [r4, #4]
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	6123      	str	r3, [r4, #16]
 8004566:	2300      	movs	r3, #0
 8004568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800456c:	e7a8      	b.n	80044c0 <_printf_i+0x150>
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	462a      	mov	r2, r5
 8004572:	4649      	mov	r1, r9
 8004574:	4640      	mov	r0, r8
 8004576:	47d0      	blx	sl
 8004578:	3001      	adds	r0, #1
 800457a:	d0ab      	beq.n	80044d4 <_printf_i+0x164>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	079b      	lsls	r3, r3, #30
 8004580:	d413      	bmi.n	80045aa <_printf_i+0x23a>
 8004582:	68e0      	ldr	r0, [r4, #12]
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	4298      	cmp	r0, r3
 8004588:	bfb8      	it	lt
 800458a:	4618      	movlt	r0, r3
 800458c:	e7a4      	b.n	80044d8 <_printf_i+0x168>
 800458e:	2301      	movs	r3, #1
 8004590:	4632      	mov	r2, r6
 8004592:	4649      	mov	r1, r9
 8004594:	4640      	mov	r0, r8
 8004596:	47d0      	blx	sl
 8004598:	3001      	adds	r0, #1
 800459a:	d09b      	beq.n	80044d4 <_printf_i+0x164>
 800459c:	3501      	adds	r5, #1
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	9903      	ldr	r1, [sp, #12]
 80045a2:	1a5b      	subs	r3, r3, r1
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dcf2      	bgt.n	800458e <_printf_i+0x21e>
 80045a8:	e7eb      	b.n	8004582 <_printf_i+0x212>
 80045aa:	2500      	movs	r5, #0
 80045ac:	f104 0619 	add.w	r6, r4, #25
 80045b0:	e7f5      	b.n	800459e <_printf_i+0x22e>
 80045b2:	bf00      	nop
 80045b4:	08004841 	.word	0x08004841
 80045b8:	08004852 	.word	0x08004852

080045bc <_sbrk_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d06      	ldr	r5, [pc, #24]	; (80045d8 <_sbrk_r+0x1c>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	f7fc fbac 	bl	8000d24 <_sbrk>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d102      	bne.n	80045d6 <_sbrk_r+0x1a>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	b103      	cbz	r3, 80045d6 <_sbrk_r+0x1a>
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	20000140 	.word	0x20000140

080045dc <__sread>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	460c      	mov	r4, r1
 80045e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e4:	f000 f8a0 	bl	8004728 <_read_r>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	bfab      	itete	ge
 80045ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045ee:	89a3      	ldrhlt	r3, [r4, #12]
 80045f0:	181b      	addge	r3, r3, r0
 80045f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045f6:	bfac      	ite	ge
 80045f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80045fa:	81a3      	strhlt	r3, [r4, #12]
 80045fc:	bd10      	pop	{r4, pc}

080045fe <__swrite>:
 80045fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004602:	461f      	mov	r7, r3
 8004604:	898b      	ldrh	r3, [r1, #12]
 8004606:	05db      	lsls	r3, r3, #23
 8004608:	4605      	mov	r5, r0
 800460a:	460c      	mov	r4, r1
 800460c:	4616      	mov	r6, r2
 800460e:	d505      	bpl.n	800461c <__swrite+0x1e>
 8004610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004614:	2302      	movs	r3, #2
 8004616:	2200      	movs	r2, #0
 8004618:	f000 f868 	bl	80046ec <_lseek_r>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004626:	81a3      	strh	r3, [r4, #12]
 8004628:	4632      	mov	r2, r6
 800462a:	463b      	mov	r3, r7
 800462c:	4628      	mov	r0, r5
 800462e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004632:	f000 b817 	b.w	8004664 <_write_r>

08004636 <__sseek>:
 8004636:	b510      	push	{r4, lr}
 8004638:	460c      	mov	r4, r1
 800463a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463e:	f000 f855 	bl	80046ec <_lseek_r>
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	bf15      	itete	ne
 8004648:	6560      	strne	r0, [r4, #84]	; 0x54
 800464a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800464e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004652:	81a3      	strheq	r3, [r4, #12]
 8004654:	bf18      	it	ne
 8004656:	81a3      	strhne	r3, [r4, #12]
 8004658:	bd10      	pop	{r4, pc}

0800465a <__sclose>:
 800465a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465e:	f000 b813 	b.w	8004688 <_close_r>
	...

08004664 <_write_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d07      	ldr	r5, [pc, #28]	; (8004684 <_write_r+0x20>)
 8004668:	4604      	mov	r4, r0
 800466a:	4608      	mov	r0, r1
 800466c:	4611      	mov	r1, r2
 800466e:	2200      	movs	r2, #0
 8004670:	602a      	str	r2, [r5, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fc fb05 	bl	8000c82 <_write>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_write_r+0x1e>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_write_r+0x1e>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000140 	.word	0x20000140

08004688 <_close_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4d06      	ldr	r5, [pc, #24]	; (80046a4 <_close_r+0x1c>)
 800468c:	2300      	movs	r3, #0
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	602b      	str	r3, [r5, #0]
 8004694:	f7fc fb11 	bl	8000cba <_close>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_close_r+0x1a>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_close_r+0x1a>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	20000140 	.word	0x20000140

080046a8 <_fstat_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <_fstat_r+0x20>)
 80046ac:	2300      	movs	r3, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	f7fc fb0c 	bl	8000cd2 <_fstat>
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	d102      	bne.n	80046c4 <_fstat_r+0x1c>
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	b103      	cbz	r3, 80046c4 <_fstat_r+0x1c>
 80046c2:	6023      	str	r3, [r4, #0]
 80046c4:	bd38      	pop	{r3, r4, r5, pc}
 80046c6:	bf00      	nop
 80046c8:	20000140 	.word	0x20000140

080046cc <_isatty_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d06      	ldr	r5, [pc, #24]	; (80046e8 <_isatty_r+0x1c>)
 80046d0:	2300      	movs	r3, #0
 80046d2:	4604      	mov	r4, r0
 80046d4:	4608      	mov	r0, r1
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	f7fc fb0b 	bl	8000cf2 <_isatty>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_isatty_r+0x1a>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_isatty_r+0x1a>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	20000140 	.word	0x20000140

080046ec <_lseek_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d07      	ldr	r5, [pc, #28]	; (800470c <_lseek_r+0x20>)
 80046f0:	4604      	mov	r4, r0
 80046f2:	4608      	mov	r0, r1
 80046f4:	4611      	mov	r1, r2
 80046f6:	2200      	movs	r2, #0
 80046f8:	602a      	str	r2, [r5, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f7fc fb04 	bl	8000d08 <_lseek>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_lseek_r+0x1e>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_lseek_r+0x1e>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	20000140 	.word	0x20000140

08004710 <__malloc_lock>:
 8004710:	4801      	ldr	r0, [pc, #4]	; (8004718 <__malloc_lock+0x8>)
 8004712:	f7ff bb1d 	b.w	8003d50 <__retarget_lock_acquire_recursive>
 8004716:	bf00      	nop
 8004718:	20000134 	.word	0x20000134

0800471c <__malloc_unlock>:
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <__malloc_unlock+0x8>)
 800471e:	f7ff bb18 	b.w	8003d52 <__retarget_lock_release_recursive>
 8004722:	bf00      	nop
 8004724:	20000134 	.word	0x20000134

08004728 <_read_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4d07      	ldr	r5, [pc, #28]	; (8004748 <_read_r+0x20>)
 800472c:	4604      	mov	r4, r0
 800472e:	4608      	mov	r0, r1
 8004730:	4611      	mov	r1, r2
 8004732:	2200      	movs	r2, #0
 8004734:	602a      	str	r2, [r5, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f7fc fa86 	bl	8000c48 <_read>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_read_r+0x1e>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_read_r+0x1e>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	20000140 	.word	0x20000140

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
