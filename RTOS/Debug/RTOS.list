
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005228  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005448  08005448  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005450  08005450  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000049bc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200049cc  200049cc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128cf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a72  00000000  00000000  0003290f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00035388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  00036238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002998  00000000  00000000  00037000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010616  00000000  00000000  00039998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c145b  00000000  00000000  00049fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010b409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c88  00000000  00000000  0010b45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053a0 	.word	0x080053a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080053a0 	.word	0x080053a0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa14 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f826 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8b8 	bl	8000654 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f88c 	bl	8000600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f002 f9d2 	bl	8002890 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ec:	4a09      	ldr	r2, [pc, #36]	; (8000514 <main+0x40>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x44>)
 80004f2:	f002 fa17 	bl	8002924 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x48>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x4c>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <main+0x50>)
 8000502:	f002 fa0f 	bl	8002924 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <main+0x54>)
 800050a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800050c:	f002 f9e4 	bl	80028d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x3c>
 8000512:	bf00      	nop
 8000514:	080053e8 	.word	0x080053e8
 8000518:	080006f5 	.word	0x080006f5
 800051c:	20000070 	.word	0x20000070
 8000520:	0800540c 	.word	0x0800540c
 8000524:	08000711 	.word	0x08000711
 8000528:	20000074 	.word	0x20000074

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 ff28 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a0:	23a8      	movs	r3, #168	; 0xa8
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fd8d 	bl	80010d0 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 f8b6 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2105      	movs	r1, #5
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 ffee 	bl	80015c0 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ea:	f000 f89f 	bl	800072c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_USART1_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000638:	f001 f9e2 	bl	8001a00 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f000 f873 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000002c 	.word	0x2000002c
 8000650:	40011000 	.word	0x40011000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_GPIO_Init+0x98>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <MX_GPIO_Init+0x98>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_GPIO_Init+0x98>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_GPIO_Init+0x98>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <MX_GPIO_Init+0x98>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_GPIO_Init+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_GPIO_Init+0x98>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <MX_GPIO_Init+0x98>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_GPIO_Init+0x98>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	210f      	movs	r1, #15
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0x9c>)
 80006c4:	f000 fcd0 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_GPIO_Init+0x9c>)
 80006e0:	f000 fb26 	bl	8000d30 <HAL_GPIO_Init>

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020400 	.word	0x40020400

080006f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80006fc:	2064      	movs	r0, #100	; 0x64
 80006fe:	f002 f9a3 	bl	8002a48 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, LED0_Pin);
 8000702:	2101      	movs	r1, #1
 8000704:	4801      	ldr	r0, [pc, #4]	; (800070c <StartDefaultTask+0x18>)
 8000706:	f000 fcc8 	bl	800109a <HAL_GPIO_TogglePin>
    osDelay(100);
 800070a:	e7f7      	b.n	80006fc <StartDefaultTask+0x8>
 800070c:	40020400 	.word	0x40020400

08000710 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000718:	20c8      	movs	r0, #200	; 0xc8
 800071a:	f002 f995 	bl	8002a48 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800071e:	2102      	movs	r1, #2
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <StartTask02+0x18>)
 8000722:	f000 fcba 	bl	800109a <HAL_GPIO_TogglePin>
    osDelay(200);
 8000726:	e7f7      	b.n	8000718 <StartTask02+0x8>
 8000728:	40020400 	.word	0x40020400

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_MspInit+0x54>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <HAL_MspInit+0x54>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x54>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_MspInit+0x54>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_MspInit+0x54>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_MspInit+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 fa0e 	bl	8000b9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d134      	bne.n	800081c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007fc:	2307      	movs	r3, #7
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <HAL_UART_MspInit+0x9c>)
 8000808:	f000 fa92 	bl	8000d30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2105      	movs	r1, #5
 8000810:	2025      	movs	r0, #37	; 0x25
 8000812:	f000 f9c4 	bl	8000b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000816:	2025      	movs	r0, #37	; 0x25
 8000818:	f000 f9dd 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40011000 	.word	0x40011000
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f8a2 	bl	80009a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000864:	f003 fcfe 	bl	8004264 <xTaskGetSchedulerState>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d001      	beq.n	8000872 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800086e:	f004 fae3 	bl	8004e38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART1_IRQHandler+0x10>)
 800087e:	f001 f90d 	bl	8001a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000002c 	.word	0x2000002c

0800088c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008cc:	4c0b      	ldr	r4, [pc, #44]	; (80008fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008da:	f7ff ffd7 	bl	800088c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008de:	f004 fd25 	bl	800532c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fdf7 	bl	80004d4 <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f4:	08005458 	.word	0x08005458
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	200049cc 	.word	0x200049cc

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <HAL_Init+0x40>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_Init+0x40>)
 800091a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_Init+0x40>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f92b 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff fefe 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023c00 	.word	0x40023c00

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f943 	bl	8000bf2 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000984:	f000 f90b 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000004 	.word	0x20000004

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000078 	.word	0x20000078

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000078 	.word	0x20000078

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <__NVIC_EnableIRQ+0x38>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b68:	f7ff ff8e 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff29 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff3e 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff8e 	bl	8000adc <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff31 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffa2 	bl	8000b44 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff feda 	bl	80009d0 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d008      	beq.n	8000c3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e052      	b.n	8000ce2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0216 	bic.w	r2, r2, #22
 8000c4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <HAL_DMA_Abort+0x62>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d007      	beq.n	8000c7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0208 	bic.w	r2, r2, #8
 8000c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0201 	bic.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c8c:	e013      	b.n	8000cb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c8e:	f7ff fe9f 	bl	80009d0 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d90c      	bls.n	8000cb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e015      	b.n	8000ce2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1e4      	bne.n	8000c8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc8:	223f      	movs	r2, #63	; 0x3f
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d004      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e00c      	b.n	8000d22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2205      	movs	r2, #5
 8000d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e16b      	b.n	8001024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 815a 	bne.w	800101e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80b4 	beq.w	800101e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b60      	ldr	r3, [pc, #384]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a5f      	ldr	r2, [pc, #380]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a5b      	ldr	r2, [pc, #364]	; (8001040 <HAL_GPIO_Init+0x310>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x314>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d02b      	beq.n	8000f56 <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_GPIO_Init+0x318>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a50      	ldr	r2, [pc, #320]	; (800104c <HAL_GPIO_Init+0x31c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	; (8001058 <HAL_GPIO_Init+0x328>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <HAL_GPIO_Init+0x32c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_GPIO_Init+0x330>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x20a>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e00e      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <HAL_GPIO_Init+0x310>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a32      	ldr	r2, [pc, #200]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_GPIO_Init+0x334>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f ae90 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40021400 	.word	0x40021400
 800105c:	40021800 	.word	0x40021800
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001084:	e003      	b.n	800108e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	619a      	str	r2, [r3, #24]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ac:	887a      	ldrh	r2, [r7, #2]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4013      	ands	r3, r2
 80010b2:	041a      	lsls	r2, r3, #16
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	400b      	ands	r3, r1
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e267      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d075      	beq.n	80011da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ee:	4b88      	ldr	r3, [pc, #544]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d00c      	beq.n	8001114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fa:	4b85      	ldr	r3, [pc, #532]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001102:	2b08      	cmp	r3, #8
 8001104:	d112      	bne.n	800112c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001106:	4b82      	ldr	r3, [pc, #520]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001112:	d10b      	bne.n	800112c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	4b7e      	ldr	r3, [pc, #504]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d05b      	beq.n	80011d8 <HAL_RCC_OscConfig+0x108>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d157      	bne.n	80011d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e242      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001134:	d106      	bne.n	8001144 <HAL_RCC_OscConfig+0x74>
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a75      	ldr	r2, [pc, #468]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e01d      	b.n	8001180 <HAL_RCC_OscConfig+0xb0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x98>
 800114e:	4b70      	ldr	r3, [pc, #448]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6f      	ldr	r2, [pc, #444]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6c      	ldr	r2, [pc, #432]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xb0>
 8001168:	4b69      	ldr	r3, [pc, #420]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a68      	ldr	r2, [pc, #416]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b66      	ldr	r3, [pc, #408]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a65      	ldr	r2, [pc, #404]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc22 	bl	80009d0 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fc1e 	bl	80009d0 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e207      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0xc0>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc0e 	bl	80009d0 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fc0a 	bl	80009d0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1f3      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0xe8>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d063      	beq.n	80012ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e6:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d11c      	bne.n	8001238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x152>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e1c7      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4937      	ldr	r1, [pc, #220]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	e03a      	b.n	80012ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_RCC_OscConfig+0x244>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001246:	f7ff fbc3 	bl	80009d0 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fbbf 	bl	80009d0 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e1a8      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4925      	ldr	r1, [pc, #148]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_RCC_OscConfig+0x244>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fba2 	bl	80009d0 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fb9e 	bl	80009d0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e187      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d036      	beq.n	8001328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d016      	beq.n	80012f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_RCC_OscConfig+0x248>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb82 	bl	80009d0 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb7e 	bl	80009d0 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e167      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_RCC_OscConfig+0x240>)
 80012e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x200>
 80012ee:	e01b      	b.n	8001328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_RCC_OscConfig+0x248>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fb6b 	bl	80009d0 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	e00e      	b.n	800131c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fb67 	bl	80009d0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d907      	bls.n	800131c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e150      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
 8001310:	40023800 	.word	0x40023800
 8001314:	42470000 	.word	0x42470000
 8001318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	4b88      	ldr	r3, [pc, #544]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 800131e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1ea      	bne.n	80012fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8097 	beq.w	8001464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133a:	4b81      	ldr	r3, [pc, #516]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10f      	bne.n	8001366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b7d      	ldr	r3, [pc, #500]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a7c      	ldr	r2, [pc, #496]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b7a      	ldr	r3, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b77      	ldr	r3, [pc, #476]	; (8001544 <HAL_RCC_OscConfig+0x474>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b74      	ldr	r3, [pc, #464]	; (8001544 <HAL_RCC_OscConfig+0x474>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a73      	ldr	r2, [pc, #460]	; (8001544 <HAL_RCC_OscConfig+0x474>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb27 	bl	80009d0 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff fb23 	bl	80009d0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e10c      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <HAL_RCC_OscConfig+0x474>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x2ea>
 80013ac:	4b64      	ldr	r3, [pc, #400]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	4a63      	ldr	r2, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6713      	str	r3, [r2, #112]	; 0x70
 80013b8:	e01c      	b.n	80013f4 <HAL_RCC_OscConfig+0x324>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x30c>
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c6:	4a5e      	ldr	r2, [pc, #376]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6713      	str	r3, [r2, #112]	; 0x70
 80013ce:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d2:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6713      	str	r3, [r2, #112]	; 0x70
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0x324>
 80013dc:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a57      	ldr	r2, [pc, #348]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70
 80013e8:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	4a54      	ldr	r2, [pc, #336]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80013ee:	f023 0304 	bic.w	r3, r3, #4
 80013f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d015      	beq.n	8001428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff fae8 	bl	80009d0 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fae4 	bl	80009d0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0cb      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	4b49      	ldr	r3, [pc, #292]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ee      	beq.n	8001404 <HAL_RCC_OscConfig+0x334>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001428:	f7ff fad2 	bl	80009d0 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff face 	bl	80009d0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0b5      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001446:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1ee      	bne.n	8001430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a38      	ldr	r2, [pc, #224]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 800145e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a1 	beq.w	80015b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b08      	cmp	r3, #8
 8001478:	d05c      	beq.n	8001534 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d141      	bne.n	8001506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x478>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff faa2 	bl	80009d0 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fa9e 	bl	80009d0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e087      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69da      	ldr	r2, [r3, #28]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	3b01      	subs	r3, #1
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	061b      	lsls	r3, r3, #24
 80014d2:	491b      	ldr	r1, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_RCC_OscConfig+0x478>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fa77 	bl	80009d0 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff fa73 	bl	80009d0 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e05c      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x416>
 8001504:	e054      	b.n	80015b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_RCC_OscConfig+0x478>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fa60 	bl	80009d0 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff fa5c 	bl	80009d0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e045      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_RCC_OscConfig+0x470>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x444>
 8001532:	e03d      	b.n	80015b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e038      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000
 8001548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x4ec>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d028      	beq.n	80015ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d121      	bne.n	80015ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d11a      	bne.n	80015ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800157c:	4013      	ands	r3, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001584:	4293      	cmp	r3, r2
 8001586:	d111      	bne.n	80015ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	3b01      	subs	r3, #1
 8001596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d107      	bne.n	80015ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0cc      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d90c      	bls.n	80015fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d044      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d119      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d003      	beq.n	800167e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167a:	2b03      	cmp	r3, #3
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e067      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f023 0203 	bic.w	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4934      	ldr	r1, [pc, #208]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b0:	f7ff f98e 	bl	80009d0 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b8:	f7ff f98a 	bl	80009d0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e04f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 020c 	and.w	r2, r3, #12
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1eb      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d20c      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4602      	mov	r2, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	490a      	ldr	r1, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f8ee 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00
 800177c:	40023800 	.word	0x40023800
 8001780:	08005430 	.word	0x08005430
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001790:	b094      	sub	sp, #80	; 0x50
 8001792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
 8001798:	2300      	movs	r3, #0
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800179c:	2300      	movs	r3, #0
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a4:	4b79      	ldr	r3, [pc, #484]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d00d      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x40>
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	f200 80e1 	bhi.w	8001978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017be:	e0db      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_GetSysClockFreq+0x204>)
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017c4:	e0db      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017c6:	4b73      	ldr	r3, [pc, #460]	; (8001994 <HAL_RCC_GetSysClockFreq+0x208>)
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ca:	e0d8      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017cc:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80017ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
 80017fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017fe:	4622      	mov	r2, r4
 8001800:	462b      	mov	r3, r5
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f04f 0100 	mov.w	r1, #0
 800180a:	0159      	lsls	r1, r3, #5
 800180c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001810:	0150      	lsls	r0, r2, #5
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4621      	mov	r1, r4
 8001818:	1a51      	subs	r1, r2, r1
 800181a:	6139      	str	r1, [r7, #16]
 800181c:	4629      	mov	r1, r5
 800181e:	eb63 0301 	sbc.w	r3, r3, r1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001830:	4659      	mov	r1, fp
 8001832:	018b      	lsls	r3, r1, #6
 8001834:	4651      	mov	r1, sl
 8001836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800183a:	4651      	mov	r1, sl
 800183c:	018a      	lsls	r2, r1, #6
 800183e:	4651      	mov	r1, sl
 8001840:	ebb2 0801 	subs.w	r8, r2, r1
 8001844:	4659      	mov	r1, fp
 8001846:	eb63 0901 	sbc.w	r9, r3, r1
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800185a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800185e:	4690      	mov	r8, r2
 8001860:	4699      	mov	r9, r3
 8001862:	4623      	mov	r3, r4
 8001864:	eb18 0303 	adds.w	r3, r8, r3
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	462b      	mov	r3, r5
 800186c:	eb49 0303 	adc.w	r3, r9, r3
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800187e:	4629      	mov	r1, r5
 8001880:	024b      	lsls	r3, r1, #9
 8001882:	4621      	mov	r1, r4
 8001884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001888:	4621      	mov	r1, r4
 800188a:	024a      	lsls	r2, r1, #9
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001892:	2200      	movs	r2, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
 8001896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800189c:	f7fe fc98 	bl	80001d0 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a8:	e058      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	2200      	movs	r2, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	4611      	mov	r1, r2
 80018b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018c4:	4642      	mov	r2, r8
 80018c6:	464b      	mov	r3, r9
 80018c8:	f04f 0000 	mov.w	r0, #0
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	0159      	lsls	r1, r3, #5
 80018d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d6:	0150      	lsls	r0, r2, #5
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4641      	mov	r1, r8
 80018de:	ebb2 0a01 	subs.w	sl, r2, r1
 80018e2:	4649      	mov	r1, r9
 80018e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018fc:	ebb2 040a 	subs.w	r4, r2, sl
 8001900:	eb63 050b 	sbc.w	r5, r3, fp
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	00eb      	lsls	r3, r5, #3
 800190e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001912:	00e2      	lsls	r2, r4, #3
 8001914:	4614      	mov	r4, r2
 8001916:	461d      	mov	r5, r3
 8001918:	4643      	mov	r3, r8
 800191a:	18e3      	adds	r3, r4, r3
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	464b      	mov	r3, r9
 8001920:	eb45 0303 	adc.w	r3, r5, r3
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001932:	4629      	mov	r1, r5
 8001934:	028b      	lsls	r3, r1, #10
 8001936:	4621      	mov	r1, r4
 8001938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800193c:	4621      	mov	r1, r4
 800193e:	028a      	lsls	r2, r1, #10
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001946:	2200      	movs	r2, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	61fa      	str	r2, [r7, #28]
 800194c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001950:	f7fe fc3e 	bl	80001d0 <__aeabi_uldivmod>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4613      	mov	r3, r2
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	3301      	adds	r3, #1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800196c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800196e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001976:	e002      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetSysClockFreq+0x204>)
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800197c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001980:	4618      	mov	r0, r3
 8001982:	3750      	adds	r7, #80	; 0x50
 8001984:	46bd      	mov	sp, r7
 8001986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	00f42400 	.word	0x00f42400
 8001994:	007a1200 	.word	0x007a1200

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_RCC_GetHCLKFreq+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019b4:	f7ff fff0 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0a9b      	lsrs	r3, r3, #10
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4903      	ldr	r1, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08005440 	.word	0x08005440

080019d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019dc:	f7ff ffdc 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0b5b      	lsrs	r3, r3, #13
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08005440 	.word	0x08005440

08001a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e03f      	b.n	8001a92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe feb2 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2224      	movs	r2, #36	; 0x24
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fc7b 	bl	8002340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0ba      	sub	sp, #232	; 0xe8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_UART_IRQHandler+0x66>
 8001aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fb65 	bl	80021ca <UART_Receive_IT>
      return;
 8001b00:	e256      	b.n	8001fb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80de 	beq.w	8001cc8 <HAL_UART_IRQHandler+0x22c>
 8001b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80d1 	beq.w	8001cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_UART_IRQHandler+0xae>
 8001b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <HAL_UART_IRQHandler+0xd2>
 8001b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f043 0202 	orr.w	r2, r3, #2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <HAL_UART_IRQHandler+0xf6>
 8001b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0204 	orr.w	r2, r3, #4
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d011      	beq.n	8001bc2 <HAL_UART_IRQHandler+0x126>
 8001b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0208 	orr.w	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 81ed 	beq.w	8001fa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_UART_IRQHandler+0x14e>
 8001bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 faf0 	bl	80021ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b40      	cmp	r3, #64	; 0x40
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <HAL_UART_IRQHandler+0x17a>
 8001c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d04f      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f9f8 	bl	800200c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c26:	2b40      	cmp	r3, #64	; 0x40
 8001c28:	d141      	bne.n	8001cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3314      	adds	r3, #20
 8001c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c38:	e853 3f00 	ldrex	r3, [r3]
 8001c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3314      	adds	r3, #20
 8001c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001c56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001c66:	e841 2300 	strex	r3, r2, [r1]
 8001c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1d9      	bne.n	8001c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d013      	beq.n	8001ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	4a7d      	ldr	r2, [pc, #500]	; (8001e78 <HAL_UART_IRQHandler+0x3dc>)
 8001c84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f82d 	bl	8000cea <HAL_DMA_Abort_IT>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca4:	e00e      	b.n	8001cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f99a 	bl	8001fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cac:	e00a      	b.n	8001cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f996 	bl	8001fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb4:	e006      	b.n	8001cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f992 	bl	8001fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001cc2:	e170      	b.n	8001fa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc4:	bf00      	nop
    return;
 8001cc6:	e16e      	b.n	8001fa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	f040 814a 	bne.w	8001f66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8143 	beq.w	8001f66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 813c 	beq.w	8001f66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	f040 80b4 	bne.w	8001e7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8140 	beq.w	8001faa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d32:	429a      	cmp	r2, r3
 8001d34:	f080 8139 	bcs.w	8001faa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d4a:	f000 8088 	beq.w	8001e5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	330c      	adds	r3, #12
 8001d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d5c:	e853 3f00 	ldrex	r3, [r3]
 8001d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	330c      	adds	r3, #12
 8001d76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d8a:	e841 2300 	strex	r3, r2, [r1]
 8001d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1d9      	bne.n	8001d4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3314      	adds	r3, #20
 8001da0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da4:	e853 3f00 	ldrex	r3, [r3]
 8001da8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3314      	adds	r3, #20
 8001dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001dca:	e841 2300 	strex	r3, r2, [r1]
 8001dce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e1      	bne.n	8001d9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3314      	adds	r3, #20
 8001ddc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de0:	e853 3f00 	ldrex	r3, [r3]
 8001de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3314      	adds	r3, #20
 8001df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001dfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e02:	e841 2300 	strex	r3, r2, [r1]
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e3      	bne.n	8001dd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	330c      	adds	r3, #12
 8001e22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e26:	e853 3f00 	ldrex	r3, [r3]
 8001e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2e:	f023 0310 	bic.w	r3, r3, #16
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e40:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e48:	e841 2300 	strex	r3, r2, [r1]
 8001e4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e3      	bne.n	8001e1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fed6 	bl	8000c0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8c0 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e74:	e099      	b.n	8001faa <HAL_UART_IRQHandler+0x50e>
 8001e76:	bf00      	nop
 8001e78:	080020d3 	.word	0x080020d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 808b 	beq.w	8001fae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8086 	beq.w	8001fae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eac:	e853 3f00 	ldrex	r3, [r3]
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8001ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ece:	e841 2300 	strex	r3, r2, [r1]
 8001ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e3      	bne.n	8001ea2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	e853 3f00 	ldrex	r3, [r3]
 8001ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3314      	adds	r3, #20
 8001efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001efe:	633a      	str	r2, [r7, #48]	; 0x30
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f06:	e841 2300 	strex	r3, r2, [r1]
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e3      	bne.n	8001eda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	330c      	adds	r3, #12
 8001f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	e853 3f00 	ldrex	r3, [r3]
 8001f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0310 	bic.w	r3, r3, #16
 8001f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	330c      	adds	r3, #12
 8001f40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001f44:	61fa      	str	r2, [r7, #28]
 8001f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f48:	69b9      	ldr	r1, [r7, #24]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	e841 2300 	strex	r3, r2, [r1]
 8001f50:	617b      	str	r3, [r7, #20]
   return(result);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e3      	bne.n	8001f20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f848 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f64:	e023      	b.n	8001fae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_UART_IRQHandler+0x4ea>
 8001f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8bb 	bl	80020fa <UART_Transmit_IT>
    return;
 8001f84:	e014      	b.n	8001fb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00e      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x514>
 8001f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8fb 	bl	800219a <UART_EndTransmit_IT>
    return;
 8001fa4:	e004      	b.n	8001fb0 <HAL_UART_IRQHandler+0x514>
    return;
 8001fa6:	bf00      	nop
 8001fa8:	e002      	b.n	8001fb0 <HAL_UART_IRQHandler+0x514>
      return;
 8001faa:	bf00      	nop
 8001fac:	e000      	b.n	8001fb0 <HAL_UART_IRQHandler+0x514>
      return;
 8001fae:	bf00      	nop
  }
}
 8001fb0:	37e8      	adds	r7, #232	; 0xe8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800200c:	b480      	push	{r7}
 800200e:	b095      	sub	sp, #84	; 0x54
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	330c      	adds	r3, #12
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	e853 3f00 	ldrex	r3, [r3]
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800202a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	330c      	adds	r3, #12
 8002032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002034:	643a      	str	r2, [r7, #64]	; 0x40
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002038:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800203a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800203c:	e841 2300 	strex	r3, r2, [r1]
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e5      	bne.n	8002014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	3314      	adds	r3, #20
 800204e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	e853 3f00 	ldrex	r3, [r3]
 8002056:	61fb      	str	r3, [r7, #28]
   return(result);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3314      	adds	r3, #20
 8002066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800206e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002070:	e841 2300 	strex	r3, r2, [r1]
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e5      	bne.n	8002048 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	2b01      	cmp	r3, #1
 8002082:	d119      	bne.n	80020b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	330c      	adds	r3, #12
 800208a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	e853 3f00 	ldrex	r3, [r3]
 8002092:	60bb      	str	r3, [r7, #8]
   return(result);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f023 0310 	bic.w	r3, r3, #16
 800209a:	647b      	str	r3, [r7, #68]	; 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	330c      	adds	r3, #12
 80020a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020a4:	61ba      	str	r2, [r7, #24]
 80020a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a8:	6979      	ldr	r1, [r7, #20]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	e841 2300 	strex	r3, r2, [r1]
 80020b0:	613b      	str	r3, [r7, #16]
   return(result);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e5      	bne.n	8002084 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80020c6:	bf00      	nop
 80020c8:	3754      	adds	r7, #84	; 0x54
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff ff77 	bl	8001fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b21      	cmp	r3, #33	; 0x21
 800210c:	d13e      	bne.n	800218c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002116:	d114      	bne.n	8002142 <UART_Transmit_IT+0x48>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d110      	bne.n	8002142 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002134:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	1c9a      	adds	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	621a      	str	r2, [r3, #32]
 8002140:	e008      	b.n	8002154 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	1c59      	adds	r1, r3, #1
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6211      	str	r1, [r2, #32]
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29b      	uxth	r3, r3
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4619      	mov	r1, r3
 8002162:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002176:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002186:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fefc 	bl	8001fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b08c      	sub	sp, #48	; 0x30
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b22      	cmp	r3, #34	; 0x22
 80021dc:	f040 80ab 	bne.w	8002336 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	d117      	bne.n	800221a <UART_Receive_IT+0x50>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d113      	bne.n	800221a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	b29b      	uxth	r3, r3
 8002204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002208:	b29a      	uxth	r2, r3
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	1c9a      	adds	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
 8002218:	e026      	b.n	8002268 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	d007      	beq.n	800223e <UART_Receive_IT+0x74>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <UART_Receive_IT+0x82>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e008      	b.n	800225e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002258:	b2da      	uxtb	r2, r3
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29b      	uxth	r3, r3
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4619      	mov	r1, r3
 8002276:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002278:	2b00      	cmp	r3, #0
 800227a:	d15a      	bne.n	8002332 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0220 	bic.w	r2, r2, #32
 800228a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800229a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d135      	bne.n	8002328 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	613b      	str	r3, [r7, #16]
   return(result);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f023 0310 	bic.w	r3, r3, #16
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e2:	623a      	str	r2, [r7, #32]
 80022e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	69f9      	ldr	r1, [r7, #28]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e5      	bne.n	80022c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b10      	cmp	r3, #16
 8002302:	d10a      	bne.n	800231a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800231e:	4619      	mov	r1, r3
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fe67 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
 8002326:	e002      	b.n	800232e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fe4f 	bl	8001fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e002      	b.n	8002338 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002336:	2302      	movs	r3, #2
  }
}
 8002338:	4618      	mov	r0, r3
 800233a:	3730      	adds	r7, #48	; 0x30
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b0c0      	sub	sp, #256	; 0x100
 8002346:	af00      	add	r7, sp, #0
 8002348:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	ea40 0301 	orr.w	r3, r0, r1
 8002368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	431a      	orrs	r2, r3
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	431a      	orrs	r2, r3
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002398:	f021 010c 	bic.w	r1, r1, #12
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023a6:	430b      	orrs	r3, r1
 80023a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ba:	6999      	ldr	r1, [r3, #24]
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	ea40 0301 	orr.w	r3, r0, r1
 80023c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b8f      	ldr	r3, [pc, #572]	; (800260c <UART_SetConfig+0x2cc>)
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d005      	beq.n	80023e0 <UART_SetConfig+0xa0>
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <UART_SetConfig+0x2d0>)
 80023dc:	429a      	cmp	r2, r3
 80023de:	d104      	bne.n	80023ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e0:	f7ff fafa 	bl	80019d8 <HAL_RCC_GetPCLK2Freq>
 80023e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023e8:	e003      	b.n	80023f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ea:	f7ff fae1 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 80023ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fc:	f040 810c 	bne.w	8002618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002404:	2200      	movs	r2, #0
 8002406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800240a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800240e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002412:	4622      	mov	r2, r4
 8002414:	462b      	mov	r3, r5
 8002416:	1891      	adds	r1, r2, r2
 8002418:	65b9      	str	r1, [r7, #88]	; 0x58
 800241a:	415b      	adcs	r3, r3
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800241e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002422:	4621      	mov	r1, r4
 8002424:	eb12 0801 	adds.w	r8, r2, r1
 8002428:	4629      	mov	r1, r5
 800242a:	eb43 0901 	adc.w	r9, r3, r1
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800243a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800243e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002442:	4690      	mov	r8, r2
 8002444:	4699      	mov	r9, r3
 8002446:	4623      	mov	r3, r4
 8002448:	eb18 0303 	adds.w	r3, r8, r3
 800244c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002450:	462b      	mov	r3, r5
 8002452:	eb49 0303 	adc.w	r3, r9, r3
 8002456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002466:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800246a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800246e:	460b      	mov	r3, r1
 8002470:	18db      	adds	r3, r3, r3
 8002472:	653b      	str	r3, [r7, #80]	; 0x50
 8002474:	4613      	mov	r3, r2
 8002476:	eb42 0303 	adc.w	r3, r2, r3
 800247a:	657b      	str	r3, [r7, #84]	; 0x54
 800247c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002484:	f7fd fea4 	bl	80001d0 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4b61      	ldr	r3, [pc, #388]	; (8002614 <UART_SetConfig+0x2d4>)
 800248e:	fba3 2302 	umull	r2, r3, r3, r2
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	011c      	lsls	r4, r3, #4
 8002496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024a8:	4642      	mov	r2, r8
 80024aa:	464b      	mov	r3, r9
 80024ac:	1891      	adds	r1, r2, r2
 80024ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80024b0:	415b      	adcs	r3, r3
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024b8:	4641      	mov	r1, r8
 80024ba:	eb12 0a01 	adds.w	sl, r2, r1
 80024be:	4649      	mov	r1, r9
 80024c0:	eb43 0b01 	adc.w	fp, r3, r1
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d8:	4692      	mov	sl, r2
 80024da:	469b      	mov	fp, r3
 80024dc:	4643      	mov	r3, r8
 80024de:	eb1a 0303 	adds.w	r3, sl, r3
 80024e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024e6:	464b      	mov	r3, r9
 80024e8:	eb4b 0303 	adc.w	r3, fp, r3
 80024ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002504:	460b      	mov	r3, r1
 8002506:	18db      	adds	r3, r3, r3
 8002508:	643b      	str	r3, [r7, #64]	; 0x40
 800250a:	4613      	mov	r3, r2
 800250c:	eb42 0303 	adc.w	r3, r2, r3
 8002510:	647b      	str	r3, [r7, #68]	; 0x44
 8002512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800251a:	f7fd fe59 	bl	80001d0 <__aeabi_uldivmod>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4611      	mov	r1, r2
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <UART_SetConfig+0x2d4>)
 8002526:	fba3 2301 	umull	r2, r3, r3, r1
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2264      	movs	r2, #100	; 0x64
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	1acb      	subs	r3, r1, r3
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <UART_SetConfig+0x2d4>)
 800253c:	fba3 2302 	umull	r2, r3, r3, r2
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002548:	441c      	add	r4, r3
 800254a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002554:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	1891      	adds	r1, r2, r2
 8002562:	63b9      	str	r1, [r7, #56]	; 0x38
 8002564:	415b      	adcs	r3, r3
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800256c:	4641      	mov	r1, r8
 800256e:	1851      	adds	r1, r2, r1
 8002570:	6339      	str	r1, [r7, #48]	; 0x30
 8002572:	4649      	mov	r1, r9
 8002574:	414b      	adcs	r3, r1
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002584:	4659      	mov	r1, fp
 8002586:	00cb      	lsls	r3, r1, #3
 8002588:	4651      	mov	r1, sl
 800258a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258e:	4651      	mov	r1, sl
 8002590:	00ca      	lsls	r2, r1, #3
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	4603      	mov	r3, r0
 8002598:	4642      	mov	r2, r8
 800259a:	189b      	adds	r3, r3, r2
 800259c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025a0:	464b      	mov	r3, r9
 80025a2:	460a      	mov	r2, r1
 80025a4:	eb42 0303 	adc.w	r3, r2, r3
 80025a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025c0:	460b      	mov	r3, r1
 80025c2:	18db      	adds	r3, r3, r3
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c6:	4613      	mov	r3, r2
 80025c8:	eb42 0303 	adc.w	r3, r2, r3
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025d6:	f7fd fdfb 	bl	80001d0 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <UART_SetConfig+0x2d4>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	2164      	movs	r1, #100	; 0x64
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	3332      	adds	r3, #50	; 0x32
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <UART_SetConfig+0x2d4>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	f003 0207 	and.w	r2, r3, #7
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4422      	add	r2, r4
 8002606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002608:	e105      	b.n	8002816 <UART_SetConfig+0x4d6>
 800260a:	bf00      	nop
 800260c:	40011000 	.word	0x40011000
 8002610:	40011400 	.word	0x40011400
 8002614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800261c:	2200      	movs	r2, #0
 800261e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002622:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800262a:	4642      	mov	r2, r8
 800262c:	464b      	mov	r3, r9
 800262e:	1891      	adds	r1, r2, r2
 8002630:	6239      	str	r1, [r7, #32]
 8002632:	415b      	adcs	r3, r3
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800263a:	4641      	mov	r1, r8
 800263c:	1854      	adds	r4, r2, r1
 800263e:	4649      	mov	r1, r9
 8002640:	eb43 0501 	adc.w	r5, r3, r1
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002660:	464b      	mov	r3, r9
 8002662:	eb45 0303 	adc.w	r3, r5, r3
 8002666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002686:	4629      	mov	r1, r5
 8002688:	008b      	lsls	r3, r1, #2
 800268a:	4621      	mov	r1, r4
 800268c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002690:	4621      	mov	r1, r4
 8002692:	008a      	lsls	r2, r1, #2
 8002694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002698:	f7fd fd9a 	bl	80001d0 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4b60      	ldr	r3, [pc, #384]	; (8002824 <UART_SetConfig+0x4e4>)
 80026a2:	fba3 2302 	umull	r2, r3, r3, r2
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	011c      	lsls	r4, r3, #4
 80026aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026bc:	4642      	mov	r2, r8
 80026be:	464b      	mov	r3, r9
 80026c0:	1891      	adds	r1, r2, r2
 80026c2:	61b9      	str	r1, [r7, #24]
 80026c4:	415b      	adcs	r3, r3
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026cc:	4641      	mov	r1, r8
 80026ce:	1851      	adds	r1, r2, r1
 80026d0:	6139      	str	r1, [r7, #16]
 80026d2:	4649      	mov	r1, r9
 80026d4:	414b      	adcs	r3, r1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e4:	4659      	mov	r1, fp
 80026e6:	00cb      	lsls	r3, r1, #3
 80026e8:	4651      	mov	r1, sl
 80026ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ee:	4651      	mov	r1, sl
 80026f0:	00ca      	lsls	r2, r1, #3
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	4642      	mov	r2, r8
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002700:	464b      	mov	r3, r9
 8002702:	460a      	mov	r2, r1
 8002704:	eb42 0303 	adc.w	r3, r2, r3
 8002708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	67bb      	str	r3, [r7, #120]	; 0x78
 8002716:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002724:	4649      	mov	r1, r9
 8002726:	008b      	lsls	r3, r1, #2
 8002728:	4641      	mov	r1, r8
 800272a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800272e:	4641      	mov	r1, r8
 8002730:	008a      	lsls	r2, r1, #2
 8002732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002736:	f7fd fd4b 	bl	80001d0 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4b39      	ldr	r3, [pc, #228]	; (8002824 <UART_SetConfig+0x4e4>)
 8002740:	fba3 1302 	umull	r1, r3, r3, r2
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	2164      	movs	r1, #100	; 0x64
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	3332      	adds	r3, #50	; 0x32
 8002752:	4a34      	ldr	r2, [pc, #208]	; (8002824 <UART_SetConfig+0x4e4>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275e:	441c      	add	r4, r3
 8002760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002764:	2200      	movs	r2, #0
 8002766:	673b      	str	r3, [r7, #112]	; 0x70
 8002768:	677a      	str	r2, [r7, #116]	; 0x74
 800276a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800276e:	4642      	mov	r2, r8
 8002770:	464b      	mov	r3, r9
 8002772:	1891      	adds	r1, r2, r2
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	415b      	adcs	r3, r3
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800277e:	4641      	mov	r1, r8
 8002780:	1851      	adds	r1, r2, r1
 8002782:	6039      	str	r1, [r7, #0]
 8002784:	4649      	mov	r1, r9
 8002786:	414b      	adcs	r3, r1
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002796:	4659      	mov	r1, fp
 8002798:	00cb      	lsls	r3, r1, #3
 800279a:	4651      	mov	r1, sl
 800279c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a0:	4651      	mov	r1, sl
 80027a2:	00ca      	lsls	r2, r1, #3
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	4642      	mov	r2, r8
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b0:	464b      	mov	r3, r9
 80027b2:	460a      	mov	r2, r1
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	663b      	str	r3, [r7, #96]	; 0x60
 80027c4:	667a      	str	r2, [r7, #100]	; 0x64
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027d2:	4649      	mov	r1, r9
 80027d4:	008b      	lsls	r3, r1, #2
 80027d6:	4641      	mov	r1, r8
 80027d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027dc:	4641      	mov	r1, r8
 80027de:	008a      	lsls	r2, r1, #2
 80027e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027e4:	f7fd fcf4 	bl	80001d0 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <UART_SetConfig+0x4e4>)
 80027ee:	fba3 1302 	umull	r1, r3, r3, r2
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2164      	movs	r1, #100	; 0x64
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	3332      	adds	r3, #50	; 0x32
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <UART_SetConfig+0x4e4>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	f003 020f 	and.w	r2, r3, #15
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4422      	add	r2, r4
 8002814:	609a      	str	r2, [r3, #8]
}
 8002816:	bf00      	nop
 8002818:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	51eb851f 	.word	0x51eb851f

08002828 <__NVIC_SetPriority>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002880:	2100      	movs	r1, #0
 8002882:	f06f 0004 	mvn.w	r0, #4
 8002886:	f7ff ffcf 	bl	8002828 <__NVIC_SetPriority>
#endif
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002896:	f3ef 8305 	mrs	r3, IPSR
 800289a:	603b      	str	r3, [r7, #0]
  return(result);
 800289c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028a2:	f06f 0305 	mvn.w	r3, #5
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	e00c      	b.n	80028c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <osKernelInitialize+0x44>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <osKernelInitialize+0x44>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	e002      	b.n	80028c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	2000007c 	.word	0x2000007c

080028d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028de:	f3ef 8305 	mrs	r3, IPSR
 80028e2:	603b      	str	r3, [r7, #0]
  return(result);
 80028e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80028ea:	f06f 0305 	mvn.w	r3, #5
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	e010      	b.n	8002914 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <osKernelStart+0x48>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d109      	bne.n	800290e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028fa:	f7ff ffbf 	bl	800287c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <osKernelStart+0x48>)
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002904:	f001 f866 	bl	80039d4 <vTaskStartScheduler>
      stat = osOK;
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	e002      	b.n	8002914 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002912:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000007c 	.word	0x2000007c

08002924 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	; 0x38
 8002928:	af04      	add	r7, sp, #16
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002934:	f3ef 8305 	mrs	r3, IPSR
 8002938:	617b      	str	r3, [r7, #20]
  return(result);
 800293a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800293c:	2b00      	cmp	r3, #0
 800293e:	d17e      	bne.n	8002a3e <osThreadNew+0x11a>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07b      	beq.n	8002a3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800294a:	2318      	movs	r3, #24
 800294c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002956:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d045      	beq.n	80029ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <osThreadNew+0x48>
        name = attr->name;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <osThreadNew+0x6e>
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b38      	cmp	r3, #56	; 0x38
 8002984:	d805      	bhi.n	8002992 <osThreadNew+0x6e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <osThreadNew+0x72>
        return (NULL);
 8002992:	2300      	movs	r3, #0
 8002994:	e054      	b.n	8002a40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00e      	beq.n	80029cc <osThreadNew+0xa8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b5b      	cmp	r3, #91	; 0x5b
 80029b4:	d90a      	bls.n	80029cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <osThreadNew+0xa8>
        mem = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e010      	b.n	80029ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10c      	bne.n	80029ee <osThreadNew+0xca>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <osThreadNew+0xca>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <osThreadNew+0xca>
          mem = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e001      	b.n	80029ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d110      	bne.n	8002a16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029fc:	9202      	str	r2, [sp, #8]
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6a3a      	ldr	r2, [r7, #32]
 8002a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 fe0c 	bl	8003628 <xTaskCreateStatic>
 8002a10:	4603      	mov	r3, r0
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e013      	b.n	8002a3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d110      	bne.n	8002a3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fe57 	bl	80036e2 <xTaskCreate>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d001      	beq.n	8002a3e <osThreadNew+0x11a>
            hTask = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a3e:	693b      	ldr	r3, [r7, #16]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a50:	f3ef 8305 	mrs	r3, IPSR
 8002a54:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <osDelay+0x1c>
    stat = osErrorISR;
 8002a5c:	f06f 0305 	mvn.w	r3, #5
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e007      	b.n	8002a74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 ff7c 	bl	800396c <vTaskDelay>
    }
  }

  return (stat);
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <vApplicationGetIdleTaskMemory+0x2c>)
 8002a90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <vApplicationGetIdleTaskMemory+0x30>)
 8002a96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	601a      	str	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000080 	.word	0x20000080
 8002ab0:	200000dc 	.word	0x200000dc

08002ab4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ac4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <vApplicationGetTimerTaskMemory+0x30>)
 8002aca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	200002dc 	.word	0x200002dc
 8002ae4:	20000338 	.word	0x20000338

08002ae8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 0208 	add.w	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f103 0208 	add.w	r2, r3, #8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f103 0208 	add.w	r2, r3, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba0:	d103      	bne.n	8002baa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e00c      	b.n	8002bc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3308      	adds	r3, #8
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e002      	b.n	8002bb8 <vListInsert+0x2e>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d2f6      	bcs.n	8002bb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6852      	ldr	r2, [r2, #4]
 8002c1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d103      	bne.n	8002c30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1e5a      	subs	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c7a:	f002 f84b 	bl	8004d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	68f9      	ldr	r1, [r7, #12]
 8002c88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	441a      	add	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	3b01      	subs	r3, #1
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	22ff      	movs	r2, #255	; 0xff
 8002cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d114      	bne.n	8002cfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01a      	beq.n	8002d0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3310      	adds	r3, #16
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 f903 	bl	8003ee8 <xTaskRemoveFromEventList>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <xQueueGenericReset+0xcc>)
 8002cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	e009      	b.n	8002d0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fef2 	bl	8002ae8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3324      	adds	r3, #36	; 0x24
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff feed 	bl	8002ae8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d0e:	f002 f831 	bl	8004d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <xQueueGenericCreateStatic+0x52>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <xQueueGenericCreateStatic+0x56>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <xQueueGenericCreateStatic+0x58>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	623b      	str	r3, [r7, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <xQueueGenericCreateStatic+0x7e>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericCreateStatic+0x82>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <xQueueGenericCreateStatic+0x84>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	61fb      	str	r3, [r7, #28]
}
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dbe:	2350      	movs	r3, #80	; 0x50
 8002dc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b50      	cmp	r3, #80	; 0x50
 8002dc6:	d00a      	beq.n	8002dde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61bb      	str	r3, [r7, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002dde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002df2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f805 	bl	8002e10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3730      	adds	r7, #48	; 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e002      	b.n	8002e32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e3e:	2101      	movs	r1, #1
 8002e40:	69b8      	ldr	r0, [r7, #24]
 8002e42:	f7ff ff05 	bl	8002c50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08e      	sub	sp, #56	; 0x38
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e66:	2300      	movs	r3, #0
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <xQueueGenericSend+0x32>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d103      	bne.n	8002e98 <xQueueGenericSend+0x40>
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <xQueueGenericSend+0x44>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <xQueueGenericSend+0x46>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <xQueueGenericSend+0x60>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eb4:	bf00      	nop
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x6e>
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericSend+0x72>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericSend+0x74>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	623b      	str	r3, [r7, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee6:	f001 f9bd 	bl	8004264 <xTaskGetSchedulerState>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <xQueueGenericSend+0x9e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueGenericSend+0xa2>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueGenericSend+0xa4>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61fb      	str	r3, [r7, #28]
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f16:	f001 fefd 	bl	8004d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <xQueueGenericSend+0xd4>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d129      	bne.n	8002f80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f32:	f000 fa0b 	bl	800334c <prvCopyDataToQueue>
 8002f36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d010      	beq.n	8002f62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	3324      	adds	r3, #36	; 0x24
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 ffcf 	bl	8003ee8 <xTaskRemoveFromEventList>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <xQueueGenericSend+0x1f8>)
 8002f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	e00a      	b.n	8002f78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f68:	4b39      	ldr	r3, [pc, #228]	; (8003050 <xQueueGenericSend+0x1f8>)
 8002f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f78:	f001 fefc 	bl	8004d74 <vPortExitCritical>
				return pdPASS;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e063      	b.n	8003048 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f86:	f001 fef5 	bl	8004d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e05c      	b.n	8003048 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 f809 	bl	8003fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fa2:	f001 fee7 	bl	8004d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fa6:	f000 fd7b 	bl	8003aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002faa:	f001 feb3 	bl	8004d14 <vPortEnterCritical>
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fba:	d103      	bne.n	8002fc4 <xQueueGenericSend+0x16c>
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd0:	d103      	bne.n	8002fda <xQueueGenericSend+0x182>
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fda:	f001 fecb 	bl	8004d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fde:	1d3a      	adds	r2, r7, #4
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fff8 	bl	8003fdc <xTaskCheckForTimeOut>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d124      	bne.n	800303c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff4:	f000 faa2 	bl	800353c <prvIsQueueFull>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	3310      	adds	r3, #16
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f000 ff1e 	bl	8003e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800300c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300e:	f000 fa2d 	bl	800346c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003012:	f000 fd53 	bl	8003abc <xTaskResumeAll>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f47f af7c 	bne.w	8002f16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <xQueueGenericSend+0x1f8>)
 8003020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	e772      	b.n	8002f16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003032:	f000 fa1b 	bl	800346c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003036:	f000 fd41 	bl	8003abc <xTaskResumeAll>
 800303a:	e76c      	b.n	8002f16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800303c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800303e:	f000 fa15 	bl	800346c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003042:	f000 fd3b 	bl	8003abc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003046:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003048:	4618      	mov	r0, r3
 800304a:	3738      	adds	r7, #56	; 0x38
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	e000ed04 	.word	0xe000ed04

08003054 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b090      	sub	sp, #64	; 0x40
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <xQueueGenericSendFromISR+0x3c>
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <xQueueGenericSendFromISR+0x40>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <xQueueGenericSendFromISR+0x42>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030ac:	bf00      	nop
 80030ae:	e7fe      	b.n	80030ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d103      	bne.n	80030be <xQueueGenericSendFromISR+0x6a>
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <xQueueGenericSendFromISR+0x6e>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <xQueueGenericSendFromISR+0x70>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	623b      	str	r3, [r7, #32]
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030de:	f001 fefb 	bl	8004ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030e2:	f3ef 8211 	mrs	r2, BASEPRI
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	61fa      	str	r2, [r7, #28]
 80030f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <xQueueGenericSendFromISR+0xbc>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d12f      	bne.n	8003170 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003126:	f000 f911 	bl	800334c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800312a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003132:	d112      	bne.n	800315a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d016      	beq.n	800316a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	3324      	adds	r3, #36	; 0x24
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fed1 	bl	8003ee8 <xTaskRemoveFromEventList>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00e      	beq.n	800316a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e007      	b.n	800316a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800315a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800315e:	3301      	adds	r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	b25a      	sxtb	r2, r3
 8003164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800316a:	2301      	movs	r3, #1
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800316e:	e001      	b.n	8003174 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003170:	2300      	movs	r3, #0
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800317e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003182:	4618      	mov	r0, r3
 8003184:	3740      	adds	r7, #64	; 0x40
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	; 0x30
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003198:	2300      	movs	r3, #0
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <xQueueReceive+0x30>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	623b      	str	r3, [r7, #32]
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <xQueueReceive+0x3e>
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <xQueueReceive+0x42>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueReceive+0x44>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueReceive+0x5e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	61fb      	str	r3, [r7, #28]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ea:	f001 f83b 	bl	8004264 <xTaskGetSchedulerState>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <xQueueReceive+0x6e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <xQueueReceive+0x72>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <xQueueReceive+0x74>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <xQueueReceive+0x8e>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	61bb      	str	r3, [r7, #24]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800321a:	f001 fd7b 	bl	8004d14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01f      	beq.n	800326a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322e:	f000 f8f7 	bl	8003420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00f      	beq.n	8003262 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	3310      	adds	r3, #16
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fe4e 	bl	8003ee8 <xTaskRemoveFromEventList>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <xQueueReceive+0x1bc>)
 8003254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003262:	f001 fd87 	bl	8004d74 <vPortExitCritical>
				return pdPASS;
 8003266:	2301      	movs	r3, #1
 8003268:	e069      	b.n	800333e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003270:	f001 fd80 	bl	8004d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003274:	2300      	movs	r3, #0
 8003276:	e062      	b.n	800333e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fe94 	bl	8003fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003288:	2301      	movs	r3, #1
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800328c:	f001 fd72 	bl	8004d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003290:	f000 fc06 	bl	8003aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003294:	f001 fd3e 	bl	8004d14 <vPortEnterCritical>
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a4:	d103      	bne.n	80032ae <xQueueReceive+0x122>
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ba:	d103      	bne.n	80032c4 <xQueueReceive+0x138>
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c4:	f001 fd56 	bl	8004d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032c8:	1d3a      	adds	r2, r7, #4
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fe83 	bl	8003fdc <xTaskCheckForTimeOut>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d123      	bne.n	8003324 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032de:	f000 f917 	bl	8003510 <prvIsQueueEmpty>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	3324      	adds	r3, #36	; 0x24
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fda9 	bl	8003e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f8:	f000 f8b8 	bl	800346c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032fc:	f000 fbde 	bl	8003abc <xTaskResumeAll>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d189      	bne.n	800321a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <xQueueReceive+0x1bc>)
 8003308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	e780      	b.n	800321a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800331a:	f000 f8a7 	bl	800346c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800331e:	f000 fbcd 	bl	8003abc <xTaskResumeAll>
 8003322:	e77a      	b.n	800321a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003326:	f000 f8a1 	bl	800346c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800332a:	f000 fbc7 	bl	8003abc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800332e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003330:	f000 f8ee 	bl	8003510 <prvIsQueueEmpty>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f43f af6f 	beq.w	800321a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800333c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800333e:	4618      	mov	r0, r3
 8003340:	3730      	adds	r7, #48	; 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d14d      	bne.n	800340e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 ff92 	bl	80042a0 <xTaskPriorityDisinherit>
 800337c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	e043      	b.n	800340e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d119      	bne.n	80033c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6858      	ldr	r0, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	461a      	mov	r2, r3
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	f001 ffec 	bl	8005374 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	441a      	add	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d32b      	bcc.n	800340e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e026      	b.n	800340e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68d8      	ldr	r0, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	461a      	mov	r2, r3
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	f001 ffd2 	bl	8005374 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	425b      	negs	r3, r3
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	425b      	negs	r3, r3
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d105      	bne.n	800340e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3b01      	subs	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003416:	697b      	ldr	r3, [r7, #20]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d018      	beq.n	8003464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	429a      	cmp	r2, r3
 800344a:	d303      	bcc.n	8003454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68d9      	ldr	r1, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	461a      	mov	r2, r3
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f001 ff88 	bl	8005374 <memcpy>
	}
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003474:	f001 fc4e 	bl	8004d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800347e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003480:	e011      	b.n	80034a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3324      	adds	r3, #36	; 0x24
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fd2a 	bl	8003ee8 <xTaskRemoveFromEventList>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800349a:	f000 fe01 	bl	80040a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	dce9      	bgt.n	8003482 <prvUnlockQueue+0x16>
 80034ae:	e000      	b.n	80034b2 <prvUnlockQueue+0x46>
					break;
 80034b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	22ff      	movs	r2, #255	; 0xff
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034ba:	f001 fc5b 	bl	8004d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034be:	f001 fc29 	bl	8004d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ca:	e011      	b.n	80034f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d012      	beq.n	80034fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3310      	adds	r3, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fd05 	bl	8003ee8 <xTaskRemoveFromEventList>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e4:	f000 fddc 	bl	80040a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	dce9      	bgt.n	80034cc <prvUnlockQueue+0x60>
 80034f8:	e000      	b.n	80034fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003504:	f001 fc36 	bl	8004d74 <vPortExitCritical>
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003518:	f001 fbfc 	bl	8004d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003524:	2301      	movs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e001      	b.n	800352e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800352e:	f001 fc21 	bl	8004d74 <vPortExitCritical>

	return xReturn;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003544:	f001 fbe6 	bl	8004d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	429a      	cmp	r2, r3
 8003552:	d102      	bne.n	800355a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003554:	2301      	movs	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e001      	b.n	800355e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800355e:	f001 fc09 	bl	8004d74 <vPortExitCritical>

	return xReturn;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e014      	b.n	80035a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <vQueueAddToRegistry+0x50>)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003588:	490c      	ldr	r1, [pc, #48]	; (80035bc <vQueueAddToRegistry+0x50>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <vQueueAddToRegistry+0x50>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800359e:	e006      	b.n	80035ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3301      	adds	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b07      	cmp	r3, #7
 80035aa:	d9e7      	bls.n	800357c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000738 	.word	0x20000738

080035c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035d0:	f001 fba0 	bl	8004d14 <vPortEnterCritical>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e0:	d103      	bne.n	80035ea <vQueueWaitForMessageRestricted+0x2a>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f6:	d103      	bne.n	8003600 <vQueueWaitForMessageRestricted+0x40>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003600:	f001 fbb8 	bl	8004d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3324      	adds	r3, #36	; 0x24
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fc3b 	bl	8003e90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff ff26 	bl	800346c <prvUnlockQueue>
	}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	; 0x38
 800362c:	af04      	add	r7, sp, #16
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <xTaskCreateStatic+0x2a>
	__asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	623b      	str	r3, [r7, #32]
}
 800364e:	bf00      	nop
 8003650:	e7fe      	b.n	8003650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xTaskCreateStatic+0x46>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	61fb      	str	r3, [r7, #28]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800366e:	235c      	movs	r3, #92	; 0x5c
 8003670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b5c      	cmp	r3, #92	; 0x5c
 8003676:	d00a      	beq.n	800368e <xTaskCreateStatic+0x66>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	61bb      	str	r3, [r7, #24]
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800368e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01e      	beq.n	80036d4 <xTaskCreateStatic+0xac>
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01b      	beq.n	80036d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036ae:	2300      	movs	r3, #0
 80036b0:	9303      	str	r3, [sp, #12]
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	9302      	str	r3, [sp, #8]
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f850 	bl	800376c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ce:	f000 f8dd 	bl	800388c <prvAddNewTaskToReadyList>
 80036d2:	e001      	b.n	80036d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036d8:	697b      	ldr	r3, [r7, #20]
	}
 80036da:	4618      	mov	r0, r3
 80036dc:	3728      	adds	r7, #40	; 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08c      	sub	sp, #48	; 0x30
 80036e6:	af04      	add	r7, sp, #16
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fc2e 	bl	8004f58 <pvPortMalloc>
 80036fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003704:	205c      	movs	r0, #92	; 0x5c
 8003706:	f001 fc27 	bl	8004f58 <pvPortMalloc>
 800370a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
 8003718:	e005      	b.n	8003726 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f001 fce8 	bl	80050f0 <vPortFree>
 8003720:	e001      	b.n	8003726 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	2300      	movs	r3, #0
 8003738:	9303      	str	r3, [sp, #12]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f80e 	bl	800376c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003750:	69f8      	ldr	r0, [r7, #28]
 8003752:	f000 f89b 	bl	800388c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003756:	2301      	movs	r3, #1
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e002      	b.n	8003762 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003760:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003762:	69bb      	ldr	r3, [r7, #24]
	}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	461a      	mov	r2, r3
 8003784:	21a5      	movs	r1, #165	; 0xa5
 8003786:	f001 fe03 	bl	8005390 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003794:	3b01      	subs	r3, #1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	617b      	str	r3, [r7, #20]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01f      	beq.n	800380a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e012      	b.n	80037f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	7819      	ldrb	r1, [r3, #0]
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	3334      	adds	r3, #52	; 0x34
 80037e0:	460a      	mov	r2, r1
 80037e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d9e9      	bls.n	80037d0 <prvInitialiseNewTask+0x64>
 80037fc:	e000      	b.n	8003800 <prvInitialiseNewTask+0x94>
			{
				break;
 80037fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003808:	e003      	b.n	8003812 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	2b37      	cmp	r3, #55	; 0x37
 8003816:	d901      	bls.n	800381c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003818:	2337      	movs	r3, #55	; 0x37
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	2200      	movs	r2, #0
 800382c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f978 	bl	8002b28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	3318      	adds	r3, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff f973 	bl	8002b28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	69b8      	ldr	r0, [r7, #24]
 800386c:	f001 f928 	bl	8004ac0 <pxPortInitialiseStack>
 8003870:	4602      	mov	r2, r0
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003882:	bf00      	nop
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003894:	f001 fa3e 	bl	8004d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <prvAddNewTaskToReadyList+0xc4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <prvAddNewTaskToReadyList+0xc4>)
 80038a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038a2:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038aa:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <prvAddNewTaskToReadyList+0xc4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d110      	bne.n	80038da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038b8:	f000 fc16 	bl	80040e8 <prvInitialiseTaskLists>
 80038bc:	e00d      	b.n	80038da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <prvAddNewTaskToReadyList+0xcc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d802      	bhi.n	80038da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <prvAddNewTaskToReadyList+0xd0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a1e      	ldr	r2, [pc, #120]	; (800395c <prvAddNewTaskToReadyList+0xd0>)
 80038e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <prvAddNewTaskToReadyList+0xd0>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <prvAddNewTaskToReadyList+0xd4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d903      	bls.n	8003900 <prvAddNewTaskToReadyList+0x74>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a18      	ldr	r2, [pc, #96]	; (8003960 <prvAddNewTaskToReadyList+0xd4>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <prvAddNewTaskToReadyList+0xd8>)
 800390e:	441a      	add	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7ff f913 	bl	8002b42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800391c:	f001 fa2a 	bl	8004d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <prvAddNewTaskToReadyList+0xcc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvAddNewTaskToReadyList+0xc8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	429a      	cmp	r2, r3
 8003934:	d207      	bcs.n	8003946 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <prvAddNewTaskToReadyList+0xdc>)
 8003938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000c4c 	.word	0x20000c4c
 8003954:	20000778 	.word	0x20000778
 8003958:	20000c58 	.word	0x20000c58
 800395c:	20000c68 	.word	0x20000c68
 8003960:	20000c54 	.word	0x20000c54
 8003964:	2000077c 	.word	0x2000077c
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <vTaskDelay+0x60>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <vTaskDelay+0x30>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60bb      	str	r3, [r7, #8]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800399c:	f000 f880 	bl	8003aa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fcea 	bl	800437c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039a8:	f000 f888 	bl	8003abc <xTaskResumeAll>
 80039ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <vTaskDelay+0x64>)
 80039b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000c74 	.word	0x20000c74
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039e2:	463a      	mov	r2, r7
 80039e4:	1d39      	adds	r1, r7, #4
 80039e6:	f107 0308 	add.w	r3, r7, #8
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f848 	bl	8002a80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	9202      	str	r2, [sp, #8]
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	2300      	movs	r3, #0
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	460a      	mov	r2, r1
 8003a02:	4921      	ldr	r1, [pc, #132]	; (8003a88 <vTaskStartScheduler+0xb4>)
 8003a04:	4821      	ldr	r0, [pc, #132]	; (8003a8c <vTaskStartScheduler+0xb8>)
 8003a06:	f7ff fe0f 	bl	8003628 <xTaskCreateStatic>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <vTaskStartScheduler+0xbc>)
 8003a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a10:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <vTaskStartScheduler+0xbc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e001      	b.n	8003a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d102      	bne.n	8003a2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a28:	f000 fcfc 	bl	8004424 <xTimerCreateTimerTask>
 8003a2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d116      	bne.n	8003a62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	613b      	str	r3, [r7, #16]
}
 8003a46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <vTaskStartScheduler+0xc0>)
 8003a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <vTaskStartScheduler+0xc4>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <vTaskStartScheduler+0xc8>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a5c:	f001 f8b8 	bl	8004bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a60:	e00e      	b.n	8003a80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a68:	d10a      	bne.n	8003a80 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60fb      	str	r3, [r7, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <vTaskStartScheduler+0xaa>
}
 8003a80:	bf00      	nop
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	080053d0 	.word	0x080053d0
 8003a8c:	080040b9 	.word	0x080040b9
 8003a90:	20000c70 	.word	0x20000c70
 8003a94:	20000c6c 	.word	0x20000c6c
 8003a98:	20000c58 	.word	0x20000c58
 8003a9c:	20000c50 	.word	0x20000c50

08003aa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <vTaskSuspendAll+0x18>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <vTaskSuspendAll+0x18>)
 8003aac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	20000c74 	.word	0x20000c74

08003abc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aca:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <xTaskResumeAll+0x118>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	603b      	str	r3, [r7, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ae8:	f001 f914 	bl	8004d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <xTaskResumeAll+0x118>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	4a38      	ldr	r2, [pc, #224]	; (8003bd4 <xTaskResumeAll+0x118>)
 8003af4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af6:	4b37      	ldr	r3, [pc, #220]	; (8003bd4 <xTaskResumeAll+0x118>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d162      	bne.n	8003bc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <xTaskResumeAll+0x11c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d05e      	beq.n	8003bc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b06:	e02f      	b.n	8003b68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b08:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <xTaskResumeAll+0x120>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3318      	adds	r3, #24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff f871 	bl	8002bfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff f86c 	bl	8002bfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <xTaskResumeAll+0x124>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d903      	bls.n	8003b38 <xTaskResumeAll+0x7c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <xTaskResumeAll+0x124>)
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <xTaskResumeAll+0x128>)
 8003b46:	441a      	add	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f7fe fff7 	bl	8002b42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <xTaskResumeAll+0x12c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b62:	4b22      	ldr	r3, [pc, #136]	; (8003bec <xTaskResumeAll+0x130>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b68:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <xTaskResumeAll+0x120>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1cb      	bne.n	8003b08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b76:	f000 fb55 	bl	8004224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <xTaskResumeAll+0x134>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b86:	f000 f847 	bl	8003c18 <xTaskIncrementTick>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b90:	4b16      	ldr	r3, [pc, #88]	; (8003bec <xTaskResumeAll+0x130>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f1      	bne.n	8003b86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <xTaskResumeAll+0x134>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ba8:	4b10      	ldr	r3, [pc, #64]	; (8003bec <xTaskResumeAll+0x130>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <xTaskResumeAll+0x138>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bc4:	f001 f8d6 	bl	8004d74 <vPortExitCritical>

	return xAlreadyYielded;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000c74 	.word	0x20000c74
 8003bd8:	20000c4c 	.word	0x20000c4c
 8003bdc:	20000c0c 	.word	0x20000c0c
 8003be0:	20000c54 	.word	0x20000c54
 8003be4:	2000077c 	.word	0x2000077c
 8003be8:	20000778 	.word	0x20000778
 8003bec:	20000c60 	.word	0x20000c60
 8003bf0:	20000c5c 	.word	0x20000c5c
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <xTaskGetTickCount+0x1c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c04:	687b      	ldr	r3, [r7, #4]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000c50 	.word	0x20000c50

08003c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c22:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <xTaskIncrementTick+0x148>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 808f 	bne.w	8003d4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c2c:	4b4d      	ldr	r3, [pc, #308]	; (8003d64 <xTaskIncrementTick+0x14c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c34:	4a4b      	ldr	r2, [pc, #300]	; (8003d64 <xTaskIncrementTick+0x14c>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d120      	bne.n	8003c82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c40:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <xTaskIncrementTick+0x150>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	603b      	str	r3, [r7, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xTaskIncrementTick+0x46>
 8003c60:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <xTaskIncrementTick+0x150>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <xTaskIncrementTick+0x154>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <xTaskIncrementTick+0x150>)
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4a3f      	ldr	r2, [pc, #252]	; (8003d6c <xTaskIncrementTick+0x154>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b3e      	ldr	r3, [pc, #248]	; (8003d70 <xTaskIncrementTick+0x158>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	4a3d      	ldr	r2, [pc, #244]	; (8003d70 <xTaskIncrementTick+0x158>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	f000 fad1 	bl	8004224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <xTaskIncrementTick+0x15c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d349      	bcc.n	8003d20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <xTaskIncrementTick+0x150>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c96:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <xTaskIncrementTick+0x15c>)
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c9c:	601a      	str	r2, [r3, #0]
					break;
 8003c9e:	e03f      	b.n	8003d20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <xTaskIncrementTick+0x150>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d203      	bcs.n	8003cc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cb8:	4a2e      	ldr	r2, [pc, #184]	; (8003d74 <xTaskIncrementTick+0x15c>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cbe:	e02f      	b.n	8003d20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe ff99 	bl	8002bfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3318      	adds	r3, #24
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe ff90 	bl	8002bfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <xTaskIncrementTick+0x160>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d903      	bls.n	8003cf0 <xTaskIncrementTick+0xd8>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <xTaskIncrementTick+0x160>)
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <xTaskIncrementTick+0x164>)
 8003cfe:	441a      	add	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7fe ff1b 	bl	8002b42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <xTaskIncrementTick+0x168>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d3b8      	bcc.n	8003c8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1e:	e7b5      	b.n	8003c8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d20:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <xTaskIncrementTick+0x168>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	4915      	ldr	r1, [pc, #84]	; (8003d7c <xTaskIncrementTick+0x164>)
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d901      	bls.n	8003d3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <xTaskIncrementTick+0x16c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e004      	b.n	8003d54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <xTaskIncrementTick+0x170>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <xTaskIncrementTick+0x170>)
 8003d52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d54:	697b      	ldr	r3, [r7, #20]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000c74 	.word	0x20000c74
 8003d64:	20000c50 	.word	0x20000c50
 8003d68:	20000c04 	.word	0x20000c04
 8003d6c:	20000c08 	.word	0x20000c08
 8003d70:	20000c64 	.word	0x20000c64
 8003d74:	20000c6c 	.word	0x20000c6c
 8003d78:	20000c54 	.word	0x20000c54
 8003d7c:	2000077c 	.word	0x2000077c
 8003d80:	20000778 	.word	0x20000778
 8003d84:	20000c60 	.word	0x20000c60
 8003d88:	20000c5c 	.word	0x20000c5c

08003d8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <vTaskSwitchContext+0xa8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d9a:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <vTaskSwitchContext+0xac>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003da0:	e041      	b.n	8003e26 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003da2:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <vTaskSwitchContext+0xac>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <vTaskSwitchContext+0xb0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e010      	b.n	8003dd2 <vTaskSwitchContext+0x46>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <vTaskSwitchContext+0x40>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	607b      	str	r3, [r7, #4]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <vTaskSwitchContext+0x3e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	491b      	ldr	r1, [pc, #108]	; (8003e40 <vTaskSwitchContext+0xb4>)
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0e4      	beq.n	8003db0 <vTaskSwitchContext+0x24>
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <vTaskSwitchContext+0xb4>)
 8003df2:	4413      	add	r3, r2
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3308      	adds	r3, #8
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d104      	bne.n	8003e16 <vTaskSwitchContext+0x8a>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <vTaskSwitchContext+0xb8>)
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <vTaskSwitchContext+0xb0>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6013      	str	r3, [r2, #0]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000c74 	.word	0x20000c74
 8003e38:	20000c60 	.word	0x20000c60
 8003e3c:	20000c54 	.word	0x20000c54
 8003e40:	2000077c 	.word	0x2000077c
 8003e44:	20000778 	.word	0x20000778

08003e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60fb      	str	r3, [r7, #12]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <vTaskPlaceOnEventList+0x44>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3318      	adds	r3, #24
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe fe87 	bl	8002b8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f000 fa7c 	bl	800437c <prvAddCurrentTaskToDelayedList>
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000778 	.word	0x20000778

08003e90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	617b      	str	r3, [r7, #20]
}
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7fe fe3e 	bl	8002b42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ed0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	68b8      	ldr	r0, [r7, #8]
 8003ed6:	f000 fa51 	bl	800437c <prvAddCurrentTaskToDelayedList>
	}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000778 	.word	0x20000778

08003ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	60fb      	str	r3, [r7, #12]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	3318      	adds	r3, #24
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fe6f 	bl	8002bfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <xTaskRemoveFromEventList+0xb0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11d      	bne.n	8003f62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fe66 	bl	8002bfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <xTaskRemoveFromEventList+0xb4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d903      	bls.n	8003f44 <xTaskRemoveFromEventList+0x5c>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <xTaskRemoveFromEventList+0xb4>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <xTaskRemoveFromEventList+0xb8>)
 8003f52:	441a      	add	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7fe fdf1 	bl	8002b42 <vListInsertEnd>
 8003f60:	e005      	b.n	8003f6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3318      	adds	r3, #24
 8003f66:	4619      	mov	r1, r3
 8003f68:	480e      	ldr	r0, [pc, #56]	; (8003fa4 <xTaskRemoveFromEventList+0xbc>)
 8003f6a:	f7fe fdea 	bl	8002b42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <xTaskRemoveFromEventList+0xc0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d905      	bls.n	8003f88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <xTaskRemoveFromEventList+0xc4>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e001      	b.n	8003f8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000c74 	.word	0x20000c74
 8003f9c:	20000c54 	.word	0x20000c54
 8003fa0:	2000077c 	.word	0x2000077c
 8003fa4:	20000c0c 	.word	0x20000c0c
 8003fa8:	20000778 	.word	0x20000778
 8003fac:	20000c60 	.word	0x20000c60

08003fb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <vTaskInternalSetTimeOutState+0x24>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <vTaskInternalSetTimeOutState+0x28>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	605a      	str	r2, [r3, #4]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	20000c64 	.word	0x20000c64
 8003fd8:	20000c50 	.word	0x20000c50

08003fdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	613b      	str	r3, [r7, #16]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800401e:	f000 fe79 	bl	8004d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <xTaskCheckForTimeOut+0xbc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403a:	d102      	bne.n	8004042 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e023      	b.n	800408a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <xTaskCheckForTimeOut+0xc0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d007      	beq.n	800405e <xTaskCheckForTimeOut+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004058:	2301      	movs	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	e015      	b.n	800408a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	d20b      	bcs.n	8004080 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff9b 	bl	8003fb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	e004      	b.n	800408a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800408a:	f000 fe73 	bl	8004d74 <vPortExitCritical>

	return xReturn;
 800408e:	69fb      	ldr	r3, [r7, #28]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000c50 	.word	0x20000c50
 800409c:	20000c64 	.word	0x20000c64

080040a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <vTaskMissedYield+0x14>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000c60 	.word	0x20000c60

080040b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040c0:	f000 f852 	bl	8004168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <prvIdleTask+0x28>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d9f9      	bls.n	80040c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <prvIdleTask+0x2c>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040dc:	e7f0      	b.n	80040c0 <prvIdleTask+0x8>
 80040de:	bf00      	nop
 80040e0:	2000077c 	.word	0x2000077c
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e00c      	b.n	800410e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <prvInitialiseTaskLists+0x60>)
 8004100:	4413      	add	r3, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fcf0 	bl	8002ae8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b37      	cmp	r3, #55	; 0x37
 8004112:	d9ef      	bls.n	80040f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004114:	480d      	ldr	r0, [pc, #52]	; (800414c <prvInitialiseTaskLists+0x64>)
 8004116:	f7fe fce7 	bl	8002ae8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <prvInitialiseTaskLists+0x68>)
 800411c:	f7fe fce4 	bl	8002ae8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004120:	480c      	ldr	r0, [pc, #48]	; (8004154 <prvInitialiseTaskLists+0x6c>)
 8004122:	f7fe fce1 	bl	8002ae8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004126:	480c      	ldr	r0, [pc, #48]	; (8004158 <prvInitialiseTaskLists+0x70>)
 8004128:	f7fe fcde 	bl	8002ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800412c:	480b      	ldr	r0, [pc, #44]	; (800415c <prvInitialiseTaskLists+0x74>)
 800412e:	f7fe fcdb 	bl	8002ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <prvInitialiseTaskLists+0x78>)
 8004134:	4a05      	ldr	r2, [pc, #20]	; (800414c <prvInitialiseTaskLists+0x64>)
 8004136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <prvInitialiseTaskLists+0x7c>)
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <prvInitialiseTaskLists+0x68>)
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000077c 	.word	0x2000077c
 800414c:	20000bdc 	.word	0x20000bdc
 8004150:	20000bf0 	.word	0x20000bf0
 8004154:	20000c0c 	.word	0x20000c0c
 8004158:	20000c20 	.word	0x20000c20
 800415c:	20000c38 	.word	0x20000c38
 8004160:	20000c04 	.word	0x20000c04
 8004164:	20000c08 	.word	0x20000c08

08004168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800416e:	e019      	b.n	80041a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004170:	f000 fdd0 	bl	8004d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <prvCheckTasksWaitingTermination+0x50>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fd3b 	bl	8002bfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <prvCheckTasksWaitingTermination+0x54>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <prvCheckTasksWaitingTermination+0x54>)
 800418e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800419a:	f000 fdeb 	bl	8004d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f810 	bl	80041c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e1      	bne.n	8004170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000c20 	.word	0x20000c20
 80041bc:	20000c4c 	.word	0x20000c4c
 80041c0:	20000c34 	.word	0x20000c34

080041c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff88 	bl	80050f0 <vPortFree>
				vPortFree( pxTCB );
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 ff85 	bl	80050f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041e6:	e018      	b.n	800421a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d103      	bne.n	80041fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 ff7c 	bl	80050f0 <vPortFree>
	}
 80041f8:	e00f      	b.n	800421a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004200:	2b02      	cmp	r3, #2
 8004202:	d00a      	beq.n	800421a <prvDeleteTCB+0x56>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvDeleteTCB+0x54>
	}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <prvResetNextTaskUnblockTime+0x38>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <prvResetNextTaskUnblockTime+0x3c>)
 8004236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800423a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800423c:	e008      	b.n	8004250 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <prvResetNextTaskUnblockTime+0x38>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <prvResetNextTaskUnblockTime+0x3c>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000c04 	.word	0x20000c04
 8004260:	20000c6c 	.word	0x20000c6c

08004264 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <xTaskGetSchedulerState+0x34>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004272:	2301      	movs	r3, #1
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	e008      	b.n	800428a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <xTaskGetSchedulerState+0x38>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004280:	2302      	movs	r3, #2
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	e001      	b.n	800428a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800428a:	687b      	ldr	r3, [r7, #4]
	}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	20000c58 	.word	0x20000c58
 800429c:	20000c74 	.word	0x20000c74

080042a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d056      	beq.n	8004364 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <xTaskPriorityDisinherit+0xd0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d00a      	beq.n	80042d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	60bb      	str	r3, [r7, #8]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004306:	429a      	cmp	r2, r3
 8004308:	d02c      	beq.n	8004364 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	2b00      	cmp	r3, #0
 8004310:	d128      	bne.n	8004364 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fc70 	bl	8002bfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <xTaskPriorityDisinherit+0xd4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d903      	bls.n	8004344 <xTaskPriorityDisinherit+0xa4>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <xTaskPriorityDisinherit+0xd4>)
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4a09      	ldr	r2, [pc, #36]	; (8004378 <xTaskPriorityDisinherit+0xd8>)
 8004352:	441a      	add	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f7fe fbf1 	bl	8002b42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004360:	2301      	movs	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004364:	697b      	ldr	r3, [r7, #20]
	}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000778 	.word	0x20000778
 8004374:	20000c54 	.word	0x20000c54
 8004378:	2000077c 	.word	0x2000077c

0800437c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <prvAddCurrentTaskToDelayedList+0x90>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800438c:	4b20      	ldr	r3, [pc, #128]	; (8004410 <prvAddCurrentTaskToDelayedList+0x94>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3304      	adds	r3, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe fc32 	bl	8002bfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800439e:	d10a      	bne.n	80043b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a6:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4819      	ldr	r0, [pc, #100]	; (8004414 <prvAddCurrentTaskToDelayedList+0x98>)
 80043b0:	f7fe fbc7 	bl	8002b42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043b4:	e026      	b.n	8004404 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <prvAddCurrentTaskToDelayedList+0x94>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d209      	bcs.n	80043e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f7fe fbd5 	bl	8002b8a <vListInsert>
}
 80043e0:	e010      	b.n	8004404 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <prvAddCurrentTaskToDelayedList+0xa0>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f7fe fbcb 	bl	8002b8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d202      	bcs.n	8004404 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000c50 	.word	0x20000c50
 8004410:	20000778 	.word	0x20000778
 8004414:	20000c38 	.word	0x20000c38
 8004418:	20000c08 	.word	0x20000c08
 800441c:	20000c04 	.word	0x20000c04
 8004420:	20000c6c 	.word	0x20000c6c

08004424 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800442e:	f000 fb07 	bl	8004a40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <xTimerCreateTimerTask+0x80>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d021      	beq.n	800447e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004442:	1d3a      	adds	r2, r7, #4
 8004444:	f107 0108 	add.w	r1, r7, #8
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fb31 	bl	8002ab4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	9202      	str	r2, [sp, #8]
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	2302      	movs	r3, #2
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	460a      	mov	r2, r1
 8004464:	4910      	ldr	r1, [pc, #64]	; (80044a8 <xTimerCreateTimerTask+0x84>)
 8004466:	4811      	ldr	r0, [pc, #68]	; (80044ac <xTimerCreateTimerTask+0x88>)
 8004468:	f7ff f8de 	bl	8003628 <xTaskCreateStatic>
 800446c:	4603      	mov	r3, r0
 800446e:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <xTimerCreateTimerTask+0x8c>)
 8004470:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <xTimerCreateTimerTask+0x8c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800447a:	2301      	movs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	613b      	str	r3, [r7, #16]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800449a:	697b      	ldr	r3, [r7, #20]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000ca8 	.word	0x20000ca8
 80044a8:	080053d8 	.word	0x080053d8
 80044ac:	080045e9 	.word	0x080045e9
 80044b0:	20000cac 	.word	0x20000cac

080044b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	623b      	str	r3, [r7, #32]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <xTimerGenericCommand+0x98>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02a      	beq.n	8004540 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	dc18      	bgt.n	800452e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044fc:	f7ff feb2 	bl	8004264 <xTaskGetSchedulerState>
 8004500:	4603      	mov	r3, r0
 8004502:	2b02      	cmp	r3, #2
 8004504:	d109      	bne.n	800451a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004506:	4b11      	ldr	r3, [pc, #68]	; (800454c <xTimerGenericCommand+0x98>)
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f107 0110 	add.w	r1, r7, #16
 800450e:	2300      	movs	r3, #0
 8004510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004512:	f7fe fca1 	bl	8002e58 <xQueueGenericSend>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24
 8004518:	e012      	b.n	8004540 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <xTimerGenericCommand+0x98>)
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f107 0110 	add.w	r1, r7, #16
 8004522:	2300      	movs	r3, #0
 8004524:	2200      	movs	r2, #0
 8004526:	f7fe fc97 	bl	8002e58 <xQueueGenericSend>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24
 800452c:	e008      	b.n	8004540 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800452e:	4b07      	ldr	r3, [pc, #28]	; (800454c <xTimerGenericCommand+0x98>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f107 0110 	add.w	r1, r7, #16
 8004536:	2300      	movs	r3, #0
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	f7fe fd8b 	bl	8003054 <xQueueGenericSendFromISR>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004542:	4618      	mov	r0, r3
 8004544:	3728      	adds	r7, #40	; 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000ca8 	.word	0x20000ca8

08004550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <prvProcessExpiredTimer+0x94>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3304      	adds	r3, #4
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fb47 	bl	8002bfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d022      	beq.n	80045c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	18d1      	adds	r1, r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	6978      	ldr	r0, [r7, #20]
 800458a:	f000 f8d1 	bl	8004730 <prvInsertTimerInActiveList>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01f      	beq.n	80045d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004594:	2300      	movs	r3, #0
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2300      	movs	r3, #0
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	2100      	movs	r1, #0
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7ff ff88 	bl	80044b4 <xTimerGenericCommand>
 80045a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d113      	bne.n	80045d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	60fb      	str	r3, [r7, #12]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	6978      	ldr	r0, [r7, #20]
 80045da:	4798      	blx	r3
}
 80045dc:	bf00      	nop
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000ca0 	.word	0x20000ca0

080045e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045f0:	f107 0308 	add.w	r3, r7, #8
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f857 	bl	80046a8 <prvGetNextExpireTime>
 80045fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4619      	mov	r1, r3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f803 	bl	800460c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004606:	f000 f8d5 	bl	80047b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800460a:	e7f1      	b.n	80045f0 <prvTimerTask+0x8>

0800460c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004616:	f7ff fa43 	bl	8003aa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f866 	bl	80046f0 <prvSampleTimeNow>
 8004624:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d130      	bne.n	800468e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <prvProcessTimerOrBlockTask+0x3c>
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	429a      	cmp	r2, r3
 8004638:	d806      	bhi.n	8004648 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800463a:	f7ff fa3f 	bl	8003abc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff85 	bl	8004550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004646:	e024      	b.n	8004692 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <prvProcessTimerOrBlockTask+0x90>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <prvProcessTimerOrBlockTask+0x50>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <prvProcessTimerOrBlockTask+0x52>
 800465c:	2300      	movs	r3, #0
 800465e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <prvProcessTimerOrBlockTask+0x94>)
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	4619      	mov	r1, r3
 800466e:	f7fe ffa7 	bl	80035c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004672:	f7ff fa23 	bl	8003abc <xTaskResumeAll>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <prvProcessTimerOrBlockTask+0x98>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
}
 800468c:	e001      	b.n	8004692 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800468e:	f7ff fa15 	bl	8003abc <xTaskResumeAll>
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000ca4 	.word	0x20000ca4
 80046a0:	20000ca8 	.word	0x20000ca8
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <prvGetNextExpireTime+0x44>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <prvGetNextExpireTime+0x16>
 80046ba:	2201      	movs	r2, #1
 80046bc:	e000      	b.n	80046c0 <prvGetNextExpireTime+0x18>
 80046be:	2200      	movs	r2, #0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046cc:	4b07      	ldr	r3, [pc, #28]	; (80046ec <prvGetNextExpireTime+0x44>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e001      	b.n	80046dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046dc:	68fb      	ldr	r3, [r7, #12]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000ca0 	.word	0x20000ca0

080046f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046f8:	f7ff fa7e 	bl	8003bf8 <xTaskGetTickCount>
 80046fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <prvSampleTimeNow+0x3c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	429a      	cmp	r2, r3
 8004706:	d205      	bcs.n	8004714 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004708:	f000 f936 	bl	8004978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e002      	b.n	800471a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800471a:	4a04      	ldr	r2, [pc, #16]	; (800472c <prvSampleTimeNow+0x3c>)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004720:	68fb      	ldr	r3, [r7, #12]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000cb0 	.word	0x20000cb0

08004730 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d812      	bhi.n	800477c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	e01b      	b.n	80047a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <prvInsertTimerInActiveList+0x7c>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3304      	adds	r3, #4
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f7fe fa08 	bl	8002b8a <vListInsert>
 800477a:	e012      	b.n	80047a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d206      	bcs.n	8004792 <prvInsertTimerInActiveList+0x62>
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e007      	b.n	80047a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <prvInsertTimerInActiveList+0x80>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7fe f9f4 	bl	8002b8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047a2:	697b      	ldr	r3, [r7, #20]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000ca4 	.word	0x20000ca4
 80047b0:	20000ca0 	.word	0x20000ca0

080047b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08e      	sub	sp, #56	; 0x38
 80047b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ba:	e0ca      	b.n	8004952 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da18      	bge.n	80047f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	3304      	adds	r3, #4
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	61fb      	str	r3, [r7, #28]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ea:	6850      	ldr	r0, [r2, #4]
 80047ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ee:	6892      	ldr	r2, [r2, #8]
 80047f0:	4611      	mov	r1, r2
 80047f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f2c0 80aa 	blt.w	8004950 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe f9f5 	bl	8002bfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004812:	463b      	mov	r3, r7
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff6b 	bl	80046f0 <prvSampleTimeNow>
 800481a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b09      	cmp	r3, #9
 8004820:	f200 8097 	bhi.w	8004952 <prvProcessReceivedCommands+0x19e>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <prvProcessReceivedCommands+0x78>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004855 	.word	0x08004855
 8004830:	08004855 	.word	0x08004855
 8004834:	08004855 	.word	0x08004855
 8004838:	080048c9 	.word	0x080048c9
 800483c:	080048dd 	.word	0x080048dd
 8004840:	08004927 	.word	0x08004927
 8004844:	08004855 	.word	0x08004855
 8004848:	08004855 	.word	0x08004855
 800484c:	080048c9 	.word	0x080048c9
 8004850:	080048dd 	.word	0x080048dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	18d1      	adds	r1, r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004874:	f7ff ff5c 	bl	8004730 <prvInsertTimerInActiveList>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d069      	beq.n	8004952 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004884:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d05e      	beq.n	8004952 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	441a      	add	r2, r3
 800489c:	2300      	movs	r3, #0
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2300      	movs	r3, #0
 80048a2:	2100      	movs	r1, #0
 80048a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a6:	f7ff fe05 	bl	80044b4 <xTimerGenericCommand>
 80048aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d14f      	bne.n	8004952 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	61bb      	str	r3, [r7, #24]
}
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048da:	e03a      	b.n	8004952 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	617b      	str	r3, [r7, #20]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	18d1      	adds	r1, r2, r3
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004920:	f7ff ff06 	bl	8004730 <prvInsertTimerInActiveList>
					break;
 8004924:	e015      	b.n	8004952 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004936:	f000 fbdb 	bl	80050f0 <vPortFree>
 800493a:	e00a      	b.n	8004952 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	b2da      	uxtb	r2, r3
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800494e:	e000      	b.n	8004952 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004950:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <prvProcessReceivedCommands+0x1c0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1d39      	adds	r1, r7, #4
 8004958:	2200      	movs	r2, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fc16 	bl	800318c <xQueueReceive>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	f47f af2a 	bne.w	80047bc <prvProcessReceivedCommands+0x8>
	}
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3730      	adds	r7, #48	; 0x30
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000ca8 	.word	0x20000ca8

08004978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800497e:	e048      	b.n	8004a12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004980:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <prvSwitchTimerLists+0xc0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800498a:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <prvSwitchTimerLists+0xc0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3304      	adds	r3, #4
 8004998:	4618      	mov	r0, r3
 800499a:	f7fe f92f 	bl	8002bfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02e      	beq.n	8004a12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d90e      	bls.n	80049e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049d2:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <prvSwitchTimerLists+0xc0>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f7fe f8d4 	bl	8002b8a <vListInsert>
 80049e2:	e016      	b.n	8004a12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049e4:	2300      	movs	r3, #0
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	2100      	movs	r1, #0
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7ff fd60 	bl	80044b4 <xTimerGenericCommand>
 80049f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	603b      	str	r3, [r7, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <prvSwitchTimerLists+0xc0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1b1      	bne.n	8004980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <prvSwitchTimerLists+0xc0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <prvSwitchTimerLists+0xc4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <prvSwitchTimerLists+0xc0>)
 8004a28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <prvSwitchTimerLists+0xc4>)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	6013      	str	r3, [r2, #0]
}
 8004a30:	bf00      	nop
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000ca0 	.word	0x20000ca0
 8004a3c:	20000ca4 	.word	0x20000ca4

08004a40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a46:	f000 f965 	bl	8004d14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <prvCheckForValidListAndQueue+0x60>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d120      	bne.n	8004a94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a52:	4814      	ldr	r0, [pc, #80]	; (8004aa4 <prvCheckForValidListAndQueue+0x64>)
 8004a54:	f7fe f848 	bl	8002ae8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a58:	4813      	ldr	r0, [pc, #76]	; (8004aa8 <prvCheckForValidListAndQueue+0x68>)
 8004a5a:	f7fe f845 	bl	8002ae8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a5e:	4b13      	ldr	r3, [pc, #76]	; (8004aac <prvCheckForValidListAndQueue+0x6c>)
 8004a60:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <prvCheckForValidListAndQueue+0x64>)
 8004a62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <prvCheckForValidListAndQueue+0x70>)
 8004a66:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <prvCheckForValidListAndQueue+0x68>)
 8004a68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <prvCheckForValidListAndQueue+0x74>)
 8004a70:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <prvCheckForValidListAndQueue+0x78>)
 8004a72:	2110      	movs	r1, #16
 8004a74:	200a      	movs	r0, #10
 8004a76:	f7fe f953 	bl	8002d20 <xQueueGenericCreateStatic>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <prvCheckForValidListAndQueue+0x60>)
 8004a7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <prvCheckForValidListAndQueue+0x60>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <prvCheckForValidListAndQueue+0x60>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	490b      	ldr	r1, [pc, #44]	; (8004abc <prvCheckForValidListAndQueue+0x7c>)
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fd6c 	bl	800356c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a94:	f000 f96e 	bl	8004d74 <vPortExitCritical>
}
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000ca8 	.word	0x20000ca8
 8004aa4:	20000c78 	.word	0x20000c78
 8004aa8:	20000c8c 	.word	0x20000c8c
 8004aac:	20000ca0 	.word	0x20000ca0
 8004ab0:	20000ca4 	.word	0x20000ca4
 8004ab4:	20000d54 	.word	0x20000d54
 8004ab8:	20000cb4 	.word	0x20000cb4
 8004abc:	080053e0 	.word	0x080053e0

08004ac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3b04      	subs	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 0201 	bic.w	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3b04      	subs	r3, #4
 8004aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004af0:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <pxPortInitialiseStack+0x64>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b14      	subs	r3, #20
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b04      	subs	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f06f 0202 	mvn.w	r2, #2
 8004b0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3b20      	subs	r3, #32
 8004b14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	08004b29 	.word	0x08004b29

08004b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <prvTaskExitError+0x54>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3a:	d00a      	beq.n	8004b52 <prvTaskExitError+0x2a>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60fb      	str	r3, [r7, #12]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <prvTaskExitError+0x28>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60bb      	str	r3, [r7, #8]
}
 8004b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b66:	bf00      	nop
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0fc      	beq.n	8004b68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	2000000c 	.word	0x2000000c

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	4770      	bx	lr
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ba8:	4808      	ldr	r0, [pc, #32]	; (8004bcc <prvPortStartFirstTask+0x24>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8814 	msr	CONTROL, r0
 8004bba:	b662      	cpsie	i
 8004bbc:	b661      	cpsie	f
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	df00      	svc	0
 8004bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bca:	bf00      	nop
 8004bcc:	e000ed08 	.word	0xe000ed08

08004bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bd6:	4b46      	ldr	r3, [pc, #280]	; (8004cf0 <xPortStartScheduler+0x120>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a46      	ldr	r2, [pc, #280]	; (8004cf4 <xPortStartScheduler+0x124>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10a      	bne.n	8004bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	613b      	str	r3, [r7, #16]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <xPortStartScheduler+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3f      	ldr	r2, [pc, #252]	; (8004cf8 <xPortStartScheduler+0x128>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10a      	bne.n	8004c16 <xPortStartScheduler+0x46>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	60fb      	str	r3, [r7, #12]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c16:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <xPortStartScheduler+0x12c>)
 8004c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	22ff      	movs	r2, #255	; 0xff
 8004c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <xPortStartScheduler+0x130>)
 8004c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c40:	2207      	movs	r2, #7
 8004c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c44:	e009      	b.n	8004c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c46:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b80      	cmp	r3, #128	; 0x80
 8004c64:	d0ef      	beq.n	8004c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c66:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1c3 0307 	rsb	r3, r3, #7
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d00a      	beq.n	8004c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	60bb      	str	r3, [r7, #8]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c88:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <xPortStartScheduler+0x134>)
 8004c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ca6:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <xPortStartScheduler+0x138>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <xPortStartScheduler+0x138>)
 8004cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <xPortStartScheduler+0x138>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <xPortStartScheduler+0x138>)
 8004cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cbe:	f000 f8dd 	bl	8004e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <xPortStartScheduler+0x13c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cc8:	f000 f8fc 	bl	8004ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ccc:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <xPortStartScheduler+0x140>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0f      	ldr	r2, [pc, #60]	; (8004d10 <xPortStartScheduler+0x140>)
 8004cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cd8:	f7ff ff66 	bl	8004ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cdc:	f7ff f856 	bl	8003d8c <vTaskSwitchContext>
	prvTaskExitError();
 8004ce0:	f7ff ff22 	bl	8004b28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	e000ed00 	.word	0xe000ed00
 8004cf4:	410fc271 	.word	0x410fc271
 8004cf8:	410fc270 	.word	0x410fc270
 8004cfc:	e000e400 	.word	0xe000e400
 8004d00:	20000da4 	.word	0x20000da4
 8004d04:	20000da8 	.word	0x20000da8
 8004d08:	e000ed20 	.word	0xe000ed20
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	e000ef34 	.word	0xe000ef34

08004d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	607b      	str	r3, [r7, #4]
}
 8004d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <vPortEnterCritical+0x58>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	4a0d      	ldr	r2, [pc, #52]	; (8004d6c <vPortEnterCritical+0x58>)
 8004d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <vPortEnterCritical+0x58>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10f      	bne.n	8004d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <vPortEnterCritical+0x5c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	603b      	str	r3, [r7, #0]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <vPortEnterCritical+0x4a>
	}
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	2000000c 	.word	0x2000000c
 8004d70:	e000ed04 	.word	0xe000ed04

08004d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <vPortExitCritical+0x50>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <vPortExitCritical+0x24>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	607b      	str	r3, [r7, #4]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <vPortExitCritical+0x50>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <vPortExitCritical+0x50>)
 8004da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <vPortExitCritical+0x50>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d105      	bne.n	8004db6 <vPortExitCritical+0x42>
 8004daa:	2300      	movs	r3, #0
 8004dac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f383 8811 	msr	BASEPRI, r3
}
 8004db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	2000000c 	.word	0x2000000c
	...

08004dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dd0:	f3ef 8009 	mrs	r0, PSP
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <pxCurrentTCBConst>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f01e 0f10 	tst.w	lr, #16
 8004de0:	bf08      	it	eq
 8004de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004df4:	f380 8811 	msr	BASEPRI, r0
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f7fe ffc4 	bl	8003d8c <vTaskSwitchContext>
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f380 8811 	msr	BASEPRI, r0
 8004e0c:	bc09      	pop	{r0, r3}
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e16:	f01e 0f10 	tst.w	lr, #16
 8004e1a:	bf08      	it	eq
 8004e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e20:	f380 8809 	msr	PSP, r0
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst>:
 8004e30:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e52:	f7fe fee1 	bl	8003c18 <xTaskIncrementTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <xPortSysTickHandler+0x40>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f383 8811 	msr	BASEPRI, r3
}
 8004e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <vPortSetupTimerInterrupt+0x38>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <vPortSetupTimerInterrupt+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <vPortSetupTimerInterrupt+0x40>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <vPortSetupTimerInterrupt+0x44>)
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	e000e010 	.word	0xe000e010
 8004eb4:	e000e018 	.word	0xe000e018
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	e000e014 	.word	0xe000e014

08004ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ed4 <vPortEnableVFP+0x10>
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ece:	6001      	str	r1, [r0, #0]
 8004ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed88 	.word	0xe000ed88

08004ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d914      	bls.n	8004f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <vPortValidateInterruptPriority+0x70>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ef4:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <vPortValidateInterruptPriority+0x74>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	7afa      	ldrb	r2, [r7, #11]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20a      	bcs.n	8004f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <vPortValidateInterruptPriority+0x78>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <vPortValidateInterruptPriority+0x7c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d90a      	bls.n	8004f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	603b      	str	r3, [r7, #0]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <vPortValidateInterruptPriority+0x60>
	}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	e000e3f0 	.word	0xe000e3f0
 8004f4c:	20000da4 	.word	0x20000da4
 8004f50:	e000ed0c 	.word	0xe000ed0c
 8004f54:	20000da8 	.word	0x20000da8

08004f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f64:	f7fe fd9c 	bl	8003aa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <pvPortMalloc+0x180>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f70:	f000 f920 	bl	80051b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f74:	4b59      	ldr	r3, [pc, #356]	; (80050dc <pvPortMalloc+0x184>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 8093 	bne.w	80050a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01d      	beq.n	8004fc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f88:	2208      	movs	r2, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d014      	beq.n	8004fc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f023 0307 	bic.w	r3, r3, #7
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <pvPortMalloc+0x6c>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	617b      	str	r3, [r7, #20]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d06e      	beq.n	80050a8 <pvPortMalloc+0x150>
 8004fca:	4b45      	ldr	r3, [pc, #276]	; (80050e0 <pvPortMalloc+0x188>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d869      	bhi.n	80050a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fd4:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <pvPortMalloc+0x18c>)
 8004fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fd8:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <pvPortMalloc+0x18c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fde:	e004      	b.n	8004fea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d903      	bls.n	8004ffc <pvPortMalloc+0xa4>
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f1      	bne.n	8004fe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ffc:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <pvPortMalloc+0x180>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	429a      	cmp	r2, r3
 8005004:	d050      	beq.n	80050a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2208      	movs	r2, #8
 800500c:	4413      	add	r3, r2
 800500e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	1ad2      	subs	r2, r2, r3
 8005020:	2308      	movs	r3, #8
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	429a      	cmp	r2, r3
 8005026:	d91f      	bls.n	8005068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <pvPortMalloc+0xf8>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	613b      	str	r3, [r7, #16]
}
 800504c:	bf00      	nop
 800504e:	e7fe      	b.n	800504e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005062:	69b8      	ldr	r0, [r7, #24]
 8005064:	f000 f908 	bl	8005278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <pvPortMalloc+0x188>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <pvPortMalloc+0x188>)
 8005074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <pvPortMalloc+0x188>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <pvPortMalloc+0x190>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d203      	bcs.n	800508a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005082:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <pvPortMalloc+0x188>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <pvPortMalloc+0x190>)
 8005088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <pvPortMalloc+0x184>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	431a      	orrs	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800509e:	4b13      	ldr	r3, [pc, #76]	; (80050ec <pvPortMalloc+0x194>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	4a11      	ldr	r2, [pc, #68]	; (80050ec <pvPortMalloc+0x194>)
 80050a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050a8:	f7fe fd08 	bl	8003abc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <pvPortMalloc+0x174>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60fb      	str	r3, [r7, #12]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <pvPortMalloc+0x172>
	return pvReturn;
 80050cc:	69fb      	ldr	r3, [r7, #28]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3728      	adds	r7, #40	; 0x28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	200049b4 	.word	0x200049b4
 80050dc:	200049c8 	.word	0x200049c8
 80050e0:	200049b8 	.word	0x200049b8
 80050e4:	200049ac 	.word	0x200049ac
 80050e8:	200049bc 	.word	0x200049bc
 80050ec:	200049c0 	.word	0x200049c0

080050f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d04d      	beq.n	800519e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005102:	2308      	movs	r3, #8
 8005104:	425b      	negs	r3, r3
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4413      	add	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <vPortFree+0xb8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10a      	bne.n	8005134 <vPortFree+0x44>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60fb      	str	r3, [r7, #12]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <vPortFree+0x62>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	60bb      	str	r3, [r7, #8]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <vPortFree+0xb8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01e      	beq.n	800519e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11a      	bne.n	800519e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <vPortFree+0xb8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005178:	f7fe fc92 	bl	8003aa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <vPortFree+0xbc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4413      	add	r3, r2
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <vPortFree+0xbc>)
 8005188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800518a:	6938      	ldr	r0, [r7, #16]
 800518c:	f000 f874 	bl	8005278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <vPortFree+0xc0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	4a06      	ldr	r2, [pc, #24]	; (80051b0 <vPortFree+0xc0>)
 8005198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800519a:	f7fe fc8f 	bl	8003abc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200049c8 	.word	0x200049c8
 80051ac:	200049b8 	.word	0x200049b8
 80051b0:	200049c4 	.word	0x200049c4

080051b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051c0:	4b27      	ldr	r3, [pc, #156]	; (8005260 <prvHeapInit+0xac>)
 80051c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3307      	adds	r3, #7
 80051d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0307 	bic.w	r3, r3, #7
 80051da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <prvHeapInit+0xac>)
 80051e4:	4413      	add	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051ec:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <prvHeapInit+0xb0>)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051f2:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <prvHeapInit+0xb0>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4413      	add	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005200:	2208      	movs	r2, #8
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0307 	bic.w	r3, r3, #7
 800520e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <prvHeapInit+0xb4>)
 8005214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005216:	4b14      	ldr	r3, [pc, #80]	; (8005268 <prvHeapInit+0xb4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <prvHeapInit+0xb4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvHeapInit+0xb4>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4a0a      	ldr	r2, [pc, #40]	; (800526c <prvHeapInit+0xb8>)
 8005242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a09      	ldr	r2, [pc, #36]	; (8005270 <prvHeapInit+0xbc>)
 800524a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <prvHeapInit+0xc0>)
 800524e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20000dac 	.word	0x20000dac
 8005264:	200049ac 	.word	0x200049ac
 8005268:	200049b4 	.word	0x200049b4
 800526c:	200049bc 	.word	0x200049bc
 8005270:	200049b8 	.word	0x200049b8
 8005274:	200049c8 	.word	0x200049c8

08005278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <prvInsertBlockIntoFreeList+0xac>)
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e002      	b.n	800528c <prvInsertBlockIntoFreeList+0x14>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d8f7      	bhi.n	8005286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4413      	add	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d108      	bne.n	80052ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	441a      	add	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	441a      	add	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d118      	bne.n	8005300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b15      	ldr	r3, [pc, #84]	; (8005328 <prvInsertBlockIntoFreeList+0xb0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d00d      	beq.n	80052f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e008      	b.n	8005308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <prvInsertBlockIntoFreeList+0xb0>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e003      	b.n	8005308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d002      	beq.n	8005316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	200049ac 	.word	0x200049ac
 8005328:	200049b4 	.word	0x200049b4

0800532c <__libc_init_array>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4d0d      	ldr	r5, [pc, #52]	; (8005364 <__libc_init_array+0x38>)
 8005330:	4c0d      	ldr	r4, [pc, #52]	; (8005368 <__libc_init_array+0x3c>)
 8005332:	1b64      	subs	r4, r4, r5
 8005334:	10a4      	asrs	r4, r4, #2
 8005336:	2600      	movs	r6, #0
 8005338:	42a6      	cmp	r6, r4
 800533a:	d109      	bne.n	8005350 <__libc_init_array+0x24>
 800533c:	4d0b      	ldr	r5, [pc, #44]	; (800536c <__libc_init_array+0x40>)
 800533e:	4c0c      	ldr	r4, [pc, #48]	; (8005370 <__libc_init_array+0x44>)
 8005340:	f000 f82e 	bl	80053a0 <_init>
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	2600      	movs	r6, #0
 800534a:	42a6      	cmp	r6, r4
 800534c:	d105      	bne.n	800535a <__libc_init_array+0x2e>
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	f855 3b04 	ldr.w	r3, [r5], #4
 8005354:	4798      	blx	r3
 8005356:	3601      	adds	r6, #1
 8005358:	e7ee      	b.n	8005338 <__libc_init_array+0xc>
 800535a:	f855 3b04 	ldr.w	r3, [r5], #4
 800535e:	4798      	blx	r3
 8005360:	3601      	adds	r6, #1
 8005362:	e7f2      	b.n	800534a <__libc_init_array+0x1e>
 8005364:	08005450 	.word	0x08005450
 8005368:	08005450 	.word	0x08005450
 800536c:	08005450 	.word	0x08005450
 8005370:	08005454 	.word	0x08005454

08005374 <memcpy>:
 8005374:	440a      	add	r2, r1
 8005376:	4291      	cmp	r1, r2
 8005378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800537c:	d100      	bne.n	8005380 <memcpy+0xc>
 800537e:	4770      	bx	lr
 8005380:	b510      	push	{r4, lr}
 8005382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538a:	4291      	cmp	r1, r2
 800538c:	d1f9      	bne.n	8005382 <memcpy+0xe>
 800538e:	bd10      	pop	{r4, pc}

08005390 <memset>:
 8005390:	4402      	add	r2, r0
 8005392:	4603      	mov	r3, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <_init>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr

080053ac <_fini>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr
