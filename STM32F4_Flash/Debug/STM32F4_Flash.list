
STM32F4_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce4  08003ce4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cec  08003cec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000b0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091ee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be5  00000000  00000000  0002928e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007b0  00000000  00000000  0002b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f651  00000000  00000000  0002be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4bd  00000000  00000000  0004b4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b94ea  00000000  00000000  0005599e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ee88  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000289c  00000000  00000000  0010eed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b80 	.word	0x08003b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b80 	.word	0x08003b80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GetSector>:
// There are 2 BANKS available for H745, BANK 1 (0x0800 0000 - 0x080F FFFF) and BANK 2 (0x0810 0000 - 0x080F FFFF)
// Both of them have Sectors 0 to 7.
// We will define the sectors in normal way (like Defined below), and later the BANK will be taken care by the HAL

uint32_t GetSector(uint32_t Address)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]

  /* BANK 1 */
  if ((Address >= 0x08000000) && (Address < 0x08020000))
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000596:	d306      	bcc.n	80005a6 <GetSector+0x22>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a58      	ldr	r2, [pc, #352]	; (80006fc <GetSector+0x178>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d802      	bhi.n	80005a6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e04b      	b.n	800063e <GetSector+0xba>
  }

  else if ((Address >= 0x08020000) && (Address < 0x08040000))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a54      	ldr	r2, [pc, #336]	; (80006fc <GetSector+0x178>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d906      	bls.n	80005bc <GetSector+0x38>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a53      	ldr	r2, [pc, #332]	; (8000700 <GetSector+0x17c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d802      	bhi.n	80005bc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e040      	b.n	800063e <GetSector+0xba>
  }

  else if ((Address >= 0x08040000) && (Address < 0x08060000))
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a50      	ldr	r2, [pc, #320]	; (8000700 <GetSector+0x17c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d906      	bls.n	80005d2 <GetSector+0x4e>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a4f      	ldr	r2, [pc, #316]	; (8000704 <GetSector+0x180>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d802      	bhi.n	80005d2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e035      	b.n	800063e <GetSector+0xba>
  }

  else if ((Address >= 0x08060000) && (Address < 0x08080000))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a4b      	ldr	r2, [pc, #300]	; (8000704 <GetSector+0x180>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d906      	bls.n	80005e8 <GetSector+0x64>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a4a      	ldr	r2, [pc, #296]	; (8000708 <GetSector+0x184>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d802      	bhi.n	80005e8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e02a      	b.n	800063e <GetSector+0xba>
  }

  else if ((Address >= 0x08080000) && (Address < 0x080A0000))
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a47      	ldr	r2, [pc, #284]	; (8000708 <GetSector+0x184>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d906      	bls.n	80005fe <GetSector+0x7a>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a46      	ldr	r2, [pc, #280]	; (800070c <GetSector+0x188>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d802      	bhi.n	80005fe <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e01f      	b.n	800063e <GetSector+0xba>
  }

  else if ((Address >= 0x080A0000) && (Address < 0x080C0000))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a42      	ldr	r2, [pc, #264]	; (800070c <GetSector+0x188>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d906      	bls.n	8000614 <GetSector+0x90>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a41      	ldr	r2, [pc, #260]	; (8000710 <GetSector+0x18c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d802      	bhi.n	8000614 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800060e:	2305      	movs	r3, #5
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e014      	b.n	800063e <GetSector+0xba>
  }

  else if ((Address >= 0x080C0000) && (Address < 0x080E0000))
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a3e      	ldr	r2, [pc, #248]	; (8000710 <GetSector+0x18c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d906      	bls.n	800062a <GetSector+0xa6>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a3d      	ldr	r2, [pc, #244]	; (8000714 <GetSector+0x190>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d802      	bhi.n	800062a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000624:	2306      	movs	r3, #6
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e009      	b.n	800063e <GetSector+0xba>
  }

  else if ((Address >= 0x080E0000) && (Address < 0x08100000))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a39      	ldr	r2, [pc, #228]	; (8000714 <GetSector+0x190>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d905      	bls.n	800063e <GetSector+0xba>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000638:	d201      	bcs.n	800063e <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800063a:	2307      	movs	r3, #7
 800063c:	60fb      	str	r3, [r7, #12]
  }

  /* BANK 2 */
  if ((Address >= 0x08100000) && (Address < 0x08120000))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000644:	d306      	bcc.n	8000654 <GetSector+0xd0>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a33      	ldr	r2, [pc, #204]	; (8000718 <GetSector+0x194>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d802      	bhi.n	8000654 <GetSector+0xd0>
  {
    sector = FLASH_SECTOR_0;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e04b      	b.n	80006ec <GetSector+0x168>
  }

  else if ((Address >= 0x08120000) && (Address < 0x08140000))
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a30      	ldr	r2, [pc, #192]	; (8000718 <GetSector+0x194>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d906      	bls.n	800066a <GetSector+0xe6>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a2f      	ldr	r2, [pc, #188]	; (800071c <GetSector+0x198>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d802      	bhi.n	800066a <GetSector+0xe6>
  {
    sector = FLASH_SECTOR_1;
 8000664:	2301      	movs	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e040      	b.n	80006ec <GetSector+0x168>
  }

  else if ((Address >= 0x08140000) && (Address < 0x08160000))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a2b      	ldr	r2, [pc, #172]	; (800071c <GetSector+0x198>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d906      	bls.n	8000680 <GetSector+0xfc>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <GetSector+0x19c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d802      	bhi.n	8000680 <GetSector+0xfc>
  {
    sector = FLASH_SECTOR_2;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e035      	b.n	80006ec <GetSector+0x168>
  }

  else if ((Address >= 0x08160000) && (Address < 0x08180000))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <GetSector+0x19c>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d906      	bls.n	8000696 <GetSector+0x112>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a26      	ldr	r2, [pc, #152]	; (8000724 <GetSector+0x1a0>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d802      	bhi.n	8000696 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_3;
 8000690:	2303      	movs	r3, #3
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e02a      	b.n	80006ec <GetSector+0x168>
  }

  else if ((Address >= 0x08180000) && (Address < 0x081A0000))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <GetSector+0x1a0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d906      	bls.n	80006ac <GetSector+0x128>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <GetSector+0x1a4>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d802      	bhi.n	80006ac <GetSector+0x128>
  {
    sector = FLASH_SECTOR_4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e01f      	b.n	80006ec <GetSector+0x168>
  }

  else if ((Address >= 0x081A0000) && (Address < 0x081C0000))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <GetSector+0x1a4>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d906      	bls.n	80006c2 <GetSector+0x13e>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a1d      	ldr	r2, [pc, #116]	; (800072c <GetSector+0x1a8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d802      	bhi.n	80006c2 <GetSector+0x13e>
  {
    sector = FLASH_SECTOR_5;
 80006bc:	2305      	movs	r3, #5
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	e014      	b.n	80006ec <GetSector+0x168>
  }

  else if ((Address >= 0x081C0000) && (Address < 0x081E0000))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a19      	ldr	r2, [pc, #100]	; (800072c <GetSector+0x1a8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d906      	bls.n	80006d8 <GetSector+0x154>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a18      	ldr	r2, [pc, #96]	; (8000730 <GetSector+0x1ac>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d802      	bhi.n	80006d8 <GetSector+0x154>
  {
    sector = FLASH_SECTOR_6;
 80006d2:	2306      	movs	r3, #6
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e009      	b.n	80006ec <GetSector+0x168>
  }

  else if ((Address >= 0x081E0000) && (Address < 0x08200000))
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <GetSector+0x1ac>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d905      	bls.n	80006ec <GetSector+0x168>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 80006e6:	d201      	bcs.n	80006ec <GetSector+0x168>
  {
    sector = FLASH_SECTOR_7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80006ec:	68fb      	ldr	r3, [r7, #12]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	0801ffff 	.word	0x0801ffff
 8000700:	0803ffff 	.word	0x0803ffff
 8000704:	0805ffff 	.word	0x0805ffff
 8000708:	0807ffff 	.word	0x0807ffff
 800070c:	0809ffff 	.word	0x0809ffff
 8000710:	080bffff 	.word	0x080bffff
 8000714:	080dffff 	.word	0x080dffff
 8000718:	0811ffff 	.word	0x0811ffff
 800071c:	0813ffff 	.word	0x0813ffff
 8000720:	0815ffff 	.word	0x0815ffff
 8000724:	0817ffff 	.word	0x0817ffff
 8000728:	0819ffff 	.word	0x0819ffff
 800072c:	081bffff 	.word	0x081bffff
 8000730:	081dffff 	.word	0x081dffff

08000734 <float2Bytes>:
 */

uint8_t bytes_temp[4];

void float2Bytes(uint8_t *ftoa_bytes_temp, float float_variable)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	ed87 0a00 	vstr	s0, [r7]
  {
    float a;
    uint8_t bytes[4];
  } thing;

  thing.a = float_variable;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < 4; i++)
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e00b      	b.n	8000762 <float2Bytes+0x2e>
  {
    ftoa_bytes_temp[i] = thing.bytes[i];
 800074a:	7bfa      	ldrb	r2, [r7, #15]
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	440b      	add	r3, r1
 8000752:	3210      	adds	r2, #16
 8000754:	443a      	add	r2, r7
 8000756:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800075a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 4; i++)
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	3301      	adds	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d9f0      	bls.n	800074a <float2Bytes+0x16>
  }

}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <Bytes2float>:

float Bytes2float(uint8_t *ftoa_bytes_temp)
{
 8000776:	b480      	push	{r7}
 8000778:	b087      	sub	sp, #28
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  {
    float a;
    uint8_t bytes[4];
  } thing;

  for (uint8_t i = 0; i < 4; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	75fb      	strb	r3, [r7, #23]
 8000782:	e00b      	b.n	800079c <Bytes2float+0x26>
  {
    thing.bytes[i] = ftoa_bytes_temp[i];
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	441a      	add	r2, r3
 800078a:	7dfb      	ldrb	r3, [r7, #23]
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	3318      	adds	r3, #24
 8000790:	443b      	add	r3, r7
 8000792:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for (uint8_t i = 0; i < 4; i++)
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	3301      	adds	r3, #1
 800079a:	75fb      	strb	r3, [r7, #23]
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d9f0      	bls.n	8000784 <Bytes2float+0xe>
  }

  float float_variable = thing.a;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	613b      	str	r3, [r7, #16]
  return float_variable;
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	ee07 3a90 	vmov	s15, r3
}
 80007ac:	eeb0 0a67 	vmov.f32	s0, s15
 80007b0:	371c      	adds	r7, #28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <Flash_Write_Data>:
 *
 */

uint32_t Flash_Write_Data(uint32_t StartSectorAddress, uint32_t *data,
    uint16_t numberofwords)
{
 80007bc:	b5b0      	push	{r4, r5, r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	80fb      	strh	r3, [r7, #6]

  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SECTORError;
  int sofar = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80007ce:	f000 fdb7 	bl	8001340 <HAL_FLASH_Unlock>

  /* Erase the user Flash area */

  /* Get the number of sector to erase from 1st sector */

  uint32_t StartSector = GetSector(StartSectorAddress);
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff fed6 	bl	8000584 <GetSector>
 80007d8:	6238      	str	r0, [r7, #32]
  uint32_t EndSectorAddress = StartSectorAddress + numberofwords * 4;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	61fb      	str	r3, [r7, #28]
  uint32_t EndSector = GetSector(EndSectorAddress);
 80007e6:	69f8      	ldr	r0, [r7, #28]
 80007e8:	f7ff fecc 	bl	8000584 <GetSector>
 80007ec:	61b8      	str	r0, [r7, #24]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <Flash_Write_Data+0xc8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <Flash_Write_Data+0xc8>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector = StartSector;
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <Flash_Write_Data+0xc8>)
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	6093      	str	r3, [r2, #8]
#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx) ||\
    defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||\
    defined(STM32F410Rx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) ||\
    defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||\
    defined(STM32F423xx)
  if (StartSectorAddress < 0x08100000)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000806:	d202      	bcs.n	800080e <Flash_Write_Data+0x52>
      EraseInitStruct.Banks = FLASH_BANK_1;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <Flash_Write_Data+0xc8>)
 800080a:	2201      	movs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
    EraseInitStruct.Banks = FLASH_BANK_1;

  else
    EraseInitStruct.Banks = FLASH_BANK_2;*/

  EraseInitStruct.NbSectors = (EndSector - StartSector) + 1;
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	3301      	adds	r3, #1
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <Flash_Write_Data+0xc8>)
 8000818:	60d3      	str	r3, [r2, #12]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <Flash_Write_Data+0xc8>)
 8000822:	f000 fefb 	bl	800161c <HAL_FLASHEx_Erase>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d01f      	beq.n	800086c <Flash_Write_Data+0xb0>
  {
    return HAL_FLASH_GetError();
 800082c:	f000 fdba 	bl	80013a4 <HAL_FLASH_GetError>
 8000830:	4603      	mov	r3, r0
 8000832:	e022      	b.n	800087a <Flash_Write_Data+0xbe>
  /* Program the user Flash area 8 WORDS at a time
   * (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  while (sofar < numberofwords)
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, (uint32_t ) &data[sofar]) == HAL_OK)
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	461a      	mov	r2, r3
 800083e:	2300      	movs	r3, #0
 8000840:	4614      	mov	r4, r2
 8000842:	461d      	mov	r5, r3
 8000844:	4622      	mov	r2, r4
 8000846:	462b      	mov	r3, r5
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	2002      	movs	r0, #2
 800084c:	f000 fd24 	bl	8001298 <HAL_FLASH_Program>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d106      	bne.n	8000864 <Flash_Write_Data+0xa8>
    {
      StartSectorAddress += 4 * FLASHWORD;  //
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3320      	adds	r3, #32
 800085a:	60fb      	str	r3, [r7, #12]
      sofar += FLASHWORD;
 800085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085e:	3308      	adds	r3, #8
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
 8000862:	e003      	b.n	800086c <Flash_Write_Data+0xb0>
    } else
    {
      /* Error occurred while writing data in Flash memory*/
      return HAL_FLASH_GetError();
 8000864:	f000 fd9e 	bl	80013a4 <HAL_FLASH_GetError>
 8000868:	4603      	mov	r3, r0
 800086a:	e006      	b.n	800087a <Flash_Write_Data+0xbe>
  while (sofar < numberofwords)
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000870:	429a      	cmp	r2, r3
 8000872:	dbdf      	blt.n	8000834 <Flash_Write_Data+0x78>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
   to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8000874:	f000 fd86 	bl	8001384 <HAL_FLASH_Lock>

  return 0;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bdb0      	pop	{r4, r5, r7, pc}
 8000882:	bf00      	nop
 8000884:	20000090 	.word	0x20000090

08000888 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartSectorAddress, uint32_t *data,
    uint16_t numberofwords)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	4613      	mov	r3, r2
 8000894:	80fb      	strh	r3, [r7, #6]
  while (1)
  {

    *data = *(__IO uint32_t*) StartSectorAddress;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	601a      	str	r2, [r3, #0]
    StartSectorAddress += 4;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	60fb      	str	r3, [r7, #12]
    data++;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3304      	adds	r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
    if (!(numberofwords--))
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	80fa      	strh	r2, [r7, #6]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d000      	beq.n	80008b6 <Flash_Read_Data+0x2e>
    *data = *(__IO uint32_t*) StartSectorAddress;
 80008b4:	e7ef      	b.n	8000896 <Flash_Read_Data+0xe>
      break;
 80008b6:	bf00      	nop
  }
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <Convert_To_Str>:

void Convert_To_Str(uint32_t *Data, char *Buf)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  int numberofbytes = ((strlen((char*) Data) / 4)
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fc7e 	bl	80001d0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	089c      	lsrs	r4, r3, #2
      + ((strlen((char*) Data) % 4) != 0)) * 4;
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff fc79 	bl	80001d0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf14      	ite	ne
 80008e8:	2301      	movne	r3, #1
 80008ea:	2300      	moveq	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4423      	add	r3, r4
 80008f0:	009b      	lsls	r3, r3, #2
  int numberofbytes = ((strlen((char*) Data) / 4)
 80008f2:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < numberofbytes; i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e01b      	b.n	8000932 <Convert_To_Str+0x6e>
  {
    Buf[i] = Data[i / 4] >> (8 * (i % 4));
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da00      	bge.n	8000902 <Convert_To_Str+0x3e>
 8000900:	3303      	adds	r3, #3
 8000902:	109b      	asrs	r3, r3, #2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4259      	negs	r1, r3
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	f001 0103 	and.w	r1, r1, #3
 8000918:	bf58      	it	pl
 800091a:	424b      	negpl	r3, r1
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	fa22 f103 	lsr.w	r1, r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	b2ca      	uxtb	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < numberofbytes; i++)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	429a      	cmp	r2, r3
 8000938:	dbdf      	blt.n	80008fa <Convert_To_Str+0x36>
  }
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bd90      	pop	{r4, r7, pc}

08000944 <Flash_Write_NUM>:

void Flash_Write_NUM(uint32_t StartSectorAddress, float Num)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	ed87 0a00 	vstr	s0, [r7]

  float2Bytes(bytes_temp, Num);
 8000950:	ed97 0a00 	vldr	s0, [r7]
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <Flash_Write_NUM+0x28>)
 8000956:	f7ff feed 	bl	8000734 <float2Bytes>

  Flash_Write_Data(StartSectorAddress, (uint32_t*) bytes_temp, 1);
 800095a:	2201      	movs	r2, #1
 800095c:	4903      	ldr	r1, [pc, #12]	; (800096c <Flash_Write_NUM+0x28>)
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ff2c 	bl	80007bc <Flash_Write_Data>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000008c 	.word	0x2000008c

08000970 <Flash_Read_NUM>:

float Flash_Read_NUM(uint32_t StartSectorAddress)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint8_t buffer[4];
  float value;

  Flash_Read_Data(StartSectorAddress, (uint32_t*) buffer, 1);
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2201      	movs	r2, #1
 800097e:	4619      	mov	r1, r3
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff81 	bl	8000888 <Flash_Read_Data>
  value = Bytes2float(buffer);
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fef3 	bl	8000776 <Bytes2float>
 8000990:	ed87 0a03 	vstr	s0, [r7, #12]
  return value;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	ee07 3a90 	vmov	s15, r3
}
 800099a:	eeb0 0a67 	vmov.f32	s0, s15
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b0c6      	sub	sp, #280	; 0x118
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char *data =
 80009aa:	4b40      	ldr	r3, [pc, #256]	; (8000aac <main+0x108>)
 80009ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      "hello FLASH from ControllerTech\
          This is a test to see how many words can we work with";

  uint32_t data2[] =
 80009b0:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <main+0x10c>)
 80009b2:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80009b6:	461d      	mov	r5, r3
 80009b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	6023      	str	r3, [r4, #0]
  { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 };
  uint32_t Rx_Data[30];

  char string[100];

  int number = 123;
 80009c4:	237b      	movs	r3, #123	; 0x7b
 80009c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  float val = 123.456;
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <main+0x110>)
 80009cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f000 fae6 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f87a 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f000 f900 	bl	8000bdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009dc:	f000 f8d4 	bl	8000b88 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Flash_Write_Data(0x08004100, (uint32_t*) data2, 9);
 80009e0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80009e4:	2209      	movs	r2, #9
 80009e6:	4619      	mov	r1, r3
 80009e8:	4833      	ldr	r0, [pc, #204]	; (8000ab8 <main+0x114>)
 80009ea:	f7ff fee7 	bl	80007bc <Flash_Write_Data>
    Flash_Read_Data(0x08004100, Rx_Data, 10);
 80009ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009f2:	220a      	movs	r2, #10
 80009f4:	4619      	mov	r1, r3
 80009f6:	4830      	ldr	r0, [pc, #192]	; (8000ab8 <main+0x114>)
 80009f8:	f7ff ff46 	bl	8000888 <Flash_Read_Data>

    int numofwords = (strlen(data) / 4) + ((strlen(data) % 4) != 0);
 80009fc:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000a00:	f7ff fbe6 	bl	80001d0 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	089c      	lsrs	r4, r3, #2
 8000a08:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000a0c:	f7ff fbe0 	bl	80001d0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4423      	add	r3, r4
 8000a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    Flash_Write_Data(0x08008100, (uint32_t*) data, numofwords);
 8000a26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000a32:	4822      	ldr	r0, [pc, #136]	; (8000abc <main+0x118>)
 8000a34:	f7ff fec2 	bl	80007bc <Flash_Write_Data>
    Flash_Read_Data(0x08008100, Rx_Data, numofwords);
 8000a38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a42:	4619      	mov	r1, r3
 8000a44:	481d      	ldr	r0, [pc, #116]	; (8000abc <main+0x118>)
 8000a46:	f7ff ff1f 	bl	8000888 <Flash_Read_Data>
    Convert_To_Str(Rx_Data, string);
 8000a4a:	1d3a      	adds	r2, r7, #4
 8000a4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff36 	bl	80008c4 <Convert_To_Str>

    Flash_Write_NUM(0x0800C100, number);
 8000a58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a5c:	ee07 3a90 	vmov	s15, r3
 8000a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a64:	eeb0 0a67 	vmov.f32	s0, s15
 8000a68:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <main+0x11c>)
 8000a6a:	f7ff ff6b 	bl	8000944 <Flash_Write_NUM>
    RxVal = Flash_Read_NUM(0x0800C100);
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <main+0x11c>)
 8000a70:	f7ff ff7e 	bl	8000970 <Flash_Read_NUM>
 8000a74:	ed87 0a41 	vstr	s0, [r7, #260]	; 0x104

    Flash_Write_NUM(0x0800D100, val);
 8000a78:	ed97 0a43 	vldr	s0, [r7, #268]	; 0x10c
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <main+0x120>)
 8000a7e:	f7ff ff61 	bl	8000944 <Flash_Write_NUM>
    RxVal = Flash_Read_NUM(0x0800D100);
 8000a82:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <main+0x120>)
 8000a84:	f7ff ff74 	bl	8000970 <Flash_Read_NUM>
 8000a88:	ed87 0a41 	vstr	s0, [r7, #260]	; 0x104
    printf("Gia tri RxVal: %d \r\n", (uint16_t)RxVal);
 8000a8c:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <main+0x124>)
 8000a9e:	f002 f8e1 	bl	8002c64 <iprintf>
    HAL_Delay(1000);
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f000 faed 	bl	8001084 <HAL_Delay>
  {
 8000aaa:	e799      	b.n	80009e0 <main+0x3c>
 8000aac:	08003b98 	.word	0x08003b98
 8000ab0:	08003c10 	.word	0x08003c10
 8000ab4:	42f6e979 	.word	0x42f6e979
 8000ab8:	08004100 	.word	0x08004100
 8000abc:	08008100 	.word	0x08008100
 8000ac0:	0800c100 	.word	0x0800c100
 8000ac4:	0800d100 	.word	0x0800d100
 8000ac8:	08003bf8 	.word	0x08003bf8

08000acc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	; 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 f8ba 	bl	8002c54 <memset>
  { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  { 0 };

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <SystemClock_Config+0xb4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <SystemClock_Config+0xb4>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <SystemClock_Config+0xb4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <SystemClock_Config+0xb8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <SystemClock_Config+0xb8>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <SystemClock_Config+0xb8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2310      	movs	r3, #16
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f845 	bl	8001bcc <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b48:	f000 f8aa 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	60fb      	str	r3, [r7, #12]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 faa8 	bl	80020bc <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b72:	f000 f895 	bl	8000ca0 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_USART1_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f001 fc5c 	bl	800247c <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f000 f869 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000a4 	.word	0x200000a4
 8000bd8:	40011000 	.word	0x40011000

08000bdc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct =
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
  { 0 };

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_GPIO_Init+0x98>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3,
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_GPIO_Init+0x9c>)
 8000c4c:	f000 ffa4 	bl	8001b98 <HAL_GPIO_WritePin>
      GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_GPIO_Init+0x9c>)
 8000c68:	f000 fdfa 	bl	8001860 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400

08000c7c <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8000c84:	1d39      	adds	r1, r7, #4
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4804      	ldr	r0, [pc, #16]	; (8000c9c <__io_putchar+0x20>)
 8000c8c:	f001 fc43 	bl	8002516 <HAL_UART_Transmit>
  return ch;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000a4 	.word	0x200000a4

08000ca0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12c      	bne.n	8000d78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_UART_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_UART_MspInit+0x8c>)
 8000d74:	f000 fd74 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f934 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
	}

return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff21 	bl	8000c7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
	}
	return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f001 fe88 	bl	8002c00 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	200000e8 	.word	0x200000e8
 8000f24:	20000120 	.word	0x20000120

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f001 fe47 	bl	8002c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fd11 	bl	80009a4 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f90:	08003cf4 	.word	0x08003cf4
  ldr r2, =_sbss
 8000f94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f98:	20000120 	.word	0x20000120

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f931 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe6a 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f93b 	bl	800127e <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f911 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	200000ec 	.word	0x200000ec

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200000ec 	.word	0x200000ec

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff5c 	bl	8001114 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffb0 	bl	80011ec <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_FLASH_Program+0xa0>)
 80012ac:	7e1b      	ldrb	r3, [r3, #24]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_FLASH_Program+0x1e>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e03b      	b.n	800132e <HAL_FLASH_Program+0x96>
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_FLASH_Program+0xa0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012c0:	f000 f87c 	bl	80013bc <FLASH_WaitForLastOperation>
 80012c4:	4603      	mov	r3, r0
 80012c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d12b      	bne.n	8001326 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012d4:	783b      	ldrb	r3, [r7, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f000 f927 	bl	800152c <FLASH_Program_Byte>
 80012de:	e016      	b.n	800130e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012e6:	883b      	ldrh	r3, [r7, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	68b8      	ldr	r0, [r7, #8]
 80012ec:	f000 f8fa 	bl	80014e4 <FLASH_Program_HalfWord>
 80012f0:	e00d      	b.n	800130e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d105      	bne.n	8001304 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f000 f8cf 	bl	80014a0 <FLASH_Program_Word>
 8001302:	e004      	b.n	800130e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f000 f897 	bl	800143c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800130e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001312:	f000 f853 	bl	80013bc <FLASH_WaitForLastOperation>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_FLASH_Program+0xa4>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_FLASH_Program+0xa4>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_FLASH_Program+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800132c:	7dfb      	ldrb	r3, [r7, #23]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000f0 	.word	0x200000f0
 800133c:	40023c00 	.word	0x40023c00

08001340 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_FLASH_Unlock+0x38>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da0b      	bge.n	800136a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_FLASH_Unlock+0x38>)
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_FLASH_Unlock+0x3c>)
 8001356:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_FLASH_Unlock+0x38>)
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_FLASH_Unlock+0x40>)
 800135c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_FLASH_Unlock+0x38>)
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800136a:	79fb      	ldrb	r3, [r7, #7]
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40023c00 	.word	0x40023c00
 800137c:	45670123 	.word	0x45670123
 8001380:	cdef89ab 	.word	0xcdef89ab

08001384 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_FLASH_Lock+0x1c>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_FLASH_Lock+0x1c>)
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023c00 	.word	0x40023c00

080013a4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_FLASH_GetError+0x14>)
 80013aa:	69db      	ldr	r3, [r3, #28]
}  
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200000f0 	.word	0x200000f0

080013bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <FLASH_WaitForLastOperation+0x78>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80013ce:	f7ff fe4d 	bl	800106c <HAL_GetTick>
 80013d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013d4:	e010      	b.n	80013f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d00c      	beq.n	80013f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <FLASH_WaitForLastOperation+0x38>
 80013e4:	f7ff fe42 	bl	800106c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d201      	bcs.n	80013f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e019      	b.n	800142c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <FLASH_WaitForLastOperation+0x7c>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e8      	bne.n	80013d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <FLASH_WaitForLastOperation+0x7c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <FLASH_WaitForLastOperation+0x7c>)
 8001412:	2201      	movs	r2, #1
 8001414:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <FLASH_WaitForLastOperation+0x7c>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001422:	f000 f8a5 	bl	8001570 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
  
}  
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000f0 	.word	0x200000f0
 8001438:	40023c00 	.word	0x40023c00

0800143c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <FLASH_Program_DoubleWord+0x60>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <FLASH_Program_DoubleWord+0x60>)
 800144e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <FLASH_Program_DoubleWord+0x60>)
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	4a10      	ldr	r2, [pc, #64]	; (800149c <FLASH_Program_DoubleWord+0x60>)
 800145a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800145e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <FLASH_Program_DoubleWord+0x60>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <FLASH_Program_DoubleWord+0x60>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001472:	f3bf 8f6f 	isb	sy
}
 8001476:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	000a      	movs	r2, r1
 8001486:	2300      	movs	r3, #0
 8001488:	68f9      	ldr	r1, [r7, #12]
 800148a:	3104      	adds	r1, #4
 800148c:	4613      	mov	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40023c00 	.word	0x40023c00

080014a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <FLASH_Program_Word+0x40>)
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <FLASH_Program_Word+0x40>)
 80014b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <FLASH_Program_Word+0x40>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <FLASH_Program_Word+0x40>)
 80014bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <FLASH_Program_Word+0x40>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <FLASH_Program_Word+0x40>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <FLASH_Program_HalfWord+0x44>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <FLASH_Program_HalfWord+0x44>)
 80014f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <FLASH_Program_HalfWord+0x44>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <FLASH_Program_HalfWord+0x44>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <FLASH_Program_HalfWord+0x44>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <FLASH_Program_HalfWord+0x44>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	801a      	strh	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <FLASH_Program_Byte+0x40>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <FLASH_Program_Byte+0x40>)
 800153e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <FLASH_Program_Byte+0x40>)
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <FLASH_Program_Byte+0x40>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <FLASH_Program_Byte+0x40>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <FLASH_Program_Byte+0x40>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00

08001570 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	4a23      	ldr	r2, [pc, #140]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 800158a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 800158e:	2210      	movs	r2, #16
 8001590:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 80015a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 80015ac:	2220      	movs	r2, #32
 80015ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 80015c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 80015e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <FLASH_SetErrorCode+0xa8>)
 8001602:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <FLASH_SetErrorCode+0xa4>)
 8001606:	2202      	movs	r2, #2
 8001608:	60da      	str	r2, [r3, #12]
  }
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40023c00 	.word	0x40023c00
 8001618:	200000f0 	.word	0x200000f0

0800161c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_FLASHEx_Erase+0xd8>)
 8001630:	7e1b      	ldrb	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_FLASHEx_Erase+0x1e>
 8001636:	2302      	movs	r3, #2
 8001638:	e058      	b.n	80016ec <HAL_FLASHEx_Erase+0xd0>
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_FLASHEx_Erase+0xd8>)
 800163c:	2201      	movs	r2, #1
 800163e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001640:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001644:	f7ff feba 	bl	80013bc <FLASH_WaitForLastOperation>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d148      	bne.n	80016e4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d115      	bne.n	800168e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f000 f844 	bl	80016fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001674:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001678:	f7ff fea0 	bl	80013bc <FLASH_WaitForLastOperation>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_FLASHEx_Erase+0xdc>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <HAL_FLASHEx_Erase+0xdc>)
 8001686:	f023 0304 	bic.w	r3, r3, #4
 800168a:	6113      	str	r3, [r2, #16]
 800168c:	e028      	b.n	80016e0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e01c      	b.n	80016d0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f000 f850 	bl	8001744 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016a8:	f7ff fe88 	bl	80013bc <FLASH_WaitForLastOperation>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_FLASHEx_Erase+0xdc>)
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_FLASHEx_Erase+0xdc>)
 80016b6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80016ba:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	601a      	str	r2, [r3, #0]
          break;
 80016c8:	e00a      	b.n	80016e0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4413      	add	r3, r2
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3da      	bcc.n	8001696 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016e0:	f000 f878 	bl	80017d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_FLASHEx_Erase+0xd8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	761a      	strb	r2, [r3, #24]

  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000f0 	.word	0x200000f0
 80016f8:	40023c00 	.word	0x40023c00

080016fc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <FLASH_MassErase+0x44>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <FLASH_MassErase+0x44>)
 800170e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001712:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <FLASH_MassErase+0x44>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <FLASH_MassErase+0x44>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <FLASH_MassErase+0x44>)
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4313      	orrs	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <FLASH_MassErase+0x44>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6113      	str	r3, [r2, #16]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00

08001744 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e010      	b.n	8001782 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d103      	bne.n	800176e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e009      	b.n	8001782 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d103      	bne.n	800177c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e002      	b.n	8001782 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800177c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001780:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 8001788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800178c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	490f      	ldr	r1, [pc, #60]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 80017a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <FLASH_Erase_Sector+0x8c>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6113      	str	r3, [r2, #16]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40023c00 	.word	0x40023c00

080017d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <FLASH_FlushCaches+0x88>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d017      	beq.n	8001814 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <FLASH_FlushCaches+0x88>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	; (800185c <FLASH_FlushCaches+0x88>)
 80017ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <FLASH_FlushCaches+0x88>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <FLASH_FlushCaches+0x88>)
 80017f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <FLASH_FlushCaches+0x88>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <FLASH_FlushCaches+0x88>)
 8001802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001806:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <FLASH_FlushCaches+0x88>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <FLASH_FlushCaches+0x88>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001812:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <FLASH_FlushCaches+0x88>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d017      	beq.n	8001850 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <FLASH_FlushCaches+0x88>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <FLASH_FlushCaches+0x88>)
 8001826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <FLASH_FlushCaches+0x88>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <FLASH_FlushCaches+0x88>)
 8001832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <FLASH_FlushCaches+0x88>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <FLASH_FlushCaches+0x88>)
 800183e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001842:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <FLASH_FlushCaches+0x88>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <FLASH_FlushCaches+0x88>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
  }
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e16b      	b.n	8001b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 815a 	bne.w	8001b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d130      	bne.n	8001914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 0201 	and.w	r2, r3, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b03      	cmp	r3, #3
 800191e:	d017      	beq.n	8001950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80b4 	beq.w	8001b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a5f      	ldr	r2, [pc, #380]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a02:	4a5b      	ldr	r2, [pc, #364]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_GPIO_Init+0x314>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <HAL_GPIO_Init+0x318>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x222>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HAL_GPIO_Init+0x31c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x21e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <HAL_GPIO_Init+0x320>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x216>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_GPIO_Init+0x328>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x212>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x32c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x20a>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae90 	bls.w	800187c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e267      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d075      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d00c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d112      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c02:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d05b      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d157      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e242      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x74>
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6f      	ldr	r2, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c64:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a68      	ldr	r2, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a65      	ldr	r2, [pc, #404]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff f9f2 	bl	800106c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f9ee 	bl	800106c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e207      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xc0>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f9de 	bl	800106c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f9da 	bl	800106c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1f3      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xe8>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1c7      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff f993 	bl	800106c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f98f 	bl	800106c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a8      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4925      	ldr	r1, [pc, #148]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f972 	bl	800106c <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f96e 	bl	800106c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e187      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d036      	beq.n	8001e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f952 	bl	800106c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f94e 	bl	800106c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e167      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x200>
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7ff f93b 	bl	800106c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e00e      	b.n	8001e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f937 	bl	800106c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d907      	bls.n	8001e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e150      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	42470000 	.word	0x42470000
 8001e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ea      	bne.n	8001dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8097 	beq.w	8001f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	4b7d      	ldr	r3, [pc, #500]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b77      	ldr	r3, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b74      	ldr	r3, [pc, #464]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a73      	ldr	r2, [pc, #460]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f8f7 	bl	800106c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff f8f3 	bl	800106c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e10c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2ea>
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x30c>
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a5e      	ldr	r2, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	4b5c      	ldr	r3, [pc, #368]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a5b      	ldr	r2, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d015      	beq.n	8001f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f8b8 	bl	800106c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff f8b4 	bl	800106c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0cb      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b49      	ldr	r3, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7ff f8a2 	bl	800106c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7ff f89e 	bl	800106c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0b5      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ee      	bne.n	8001f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a38      	ldr	r2, [pc, #224]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a1 	beq.w	80020ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d05c      	beq.n	8002030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d141      	bne.n	8002002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff f872 	bl	800106c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f86e 	bl	800106c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e087      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff f847 	bl	800106c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff f843 	bl	800106c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e05c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x416>
 8002000:	e054      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff f830 	bl	800106c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff f82c 	bl	800106c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e045      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e038      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000
 8002044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4ec>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d028      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d121      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11a      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800207e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	3b01      	subs	r3, #1
 8002092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cc      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90c      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a58      	ldr	r2, [pc, #352]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d044      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d119      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002176:	2b03      	cmp	r3, #3
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e067      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4934      	ldr	r1, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7fe ff5e 	bl	800106c <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7fe ff5a 	bl	800106c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e04f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d20c      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4602      	mov	r2, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	490a      	ldr	r1, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe febe 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00
 8002278:	40023800 	.word	0x40023800
 800227c:	08003c34 	.word	0x08003c34
 8002280:	20000000 	.word	0x20000000
 8002284:	20000004 	.word	0x20000004

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800228c:	b090      	sub	sp, #64	; 0x40
 800228e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
 8002294:	2300      	movs	r3, #0
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002298:	2300      	movs	r3, #0
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a0:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d00d      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x40>
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	f200 80a1 	bhi.w	80023f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x34>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ba:	e09b      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_GetSysClockFreq+0x184>)
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022c0:	e09b      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_GetSysClockFreq+0x188>)
 80022c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022c6:	e098      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d2:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d028      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022de:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	099b      	lsrs	r3, r3, #6
 80022e4:	2200      	movs	r2, #0
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	627a      	str	r2, [r7, #36]	; 0x24
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022f0:	2100      	movs	r1, #0
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f4:	fb03 f201 	mul.w	r2, r3, r1
 80022f8:	2300      	movs	r3, #0
 80022fa:	fb00 f303 	mul.w	r3, r0, r3
 80022fe:	4413      	add	r3, r2
 8002300:	4a43      	ldr	r2, [pc, #268]	; (8002410 <HAL_RCC_GetSysClockFreq+0x188>)
 8002302:	fba0 1202 	umull	r1, r2, r0, r2
 8002306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002308:	460a      	mov	r2, r1
 800230a:	62ba      	str	r2, [r7, #40]	; 0x28
 800230c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230e:	4413      	add	r3, r2
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002314:	2200      	movs	r2, #0
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	61fa      	str	r2, [r7, #28]
 800231a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800231e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002322:	f7fd ffad 	bl	8000280 <__aeabi_uldivmod>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4613      	mov	r3, r2
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232e:	e053      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002330:	4b35      	ldr	r3, [pc, #212]	; (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	2200      	movs	r2, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	617a      	str	r2, [r7, #20]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002342:	f04f 0b00 	mov.w	fp, #0
 8002346:	4652      	mov	r2, sl
 8002348:	465b      	mov	r3, fp
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002358:	0150      	lsls	r0, r2, #5
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	ebb2 080a 	subs.w	r8, r2, sl
 8002362:	eb63 090b 	sbc.w	r9, r3, fp
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002372:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002376:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800237a:	ebb2 0408 	subs.w	r4, r2, r8
 800237e:	eb63 0509 	sbc.w	r5, r3, r9
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	00eb      	lsls	r3, r5, #3
 800238c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002390:	00e2      	lsls	r2, r4, #3
 8002392:	4614      	mov	r4, r2
 8002394:	461d      	mov	r5, r3
 8002396:	eb14 030a 	adds.w	r3, r4, sl
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	eb45 030b 	adc.w	r3, r5, fp
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ae:	4629      	mov	r1, r5
 80023b0:	028b      	lsls	r3, r1, #10
 80023b2:	4621      	mov	r1, r4
 80023b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b8:	4621      	mov	r1, r4
 80023ba:	028a      	lsls	r2, r1, #10
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c2:	2200      	movs	r2, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	60fa      	str	r2, [r7, #12]
 80023c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023cc:	f7fd ff58 	bl	8000280 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4613      	mov	r3, r2
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	3301      	adds	r3, #1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023f2:	e002      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetSysClockFreq+0x184>)
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3740      	adds	r7, #64	; 0x40
 8002400:	46bd      	mov	sp, r7
 8002402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	00f42400 	.word	0x00f42400
 8002410:	017d7840 	.word	0x017d7840

08002414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_RCC_GetHCLKFreq+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002430:	f7ff fff0 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0a9b      	lsrs	r3, r3, #10
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	08003c44 	.word	0x08003c44

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002458:	f7ff ffdc 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0b5b      	lsrs	r3, r3, #13
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	08003c44 	.word	0x08003c44

0800247c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e03f      	b.n	800250e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fc2a 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f929 	bl	8002718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b08a      	sub	sp, #40	; 0x28
 800251a:	af02      	add	r7, sp, #8
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b20      	cmp	r3, #32
 8002534:	d17c      	bne.n	8002630 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_UART_Transmit+0x2c>
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e075      	b.n	8002632 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_UART_Transmit+0x3e>
 8002550:	2302      	movs	r3, #2
 8002552:	e06e      	b.n	8002632 <HAL_UART_Transmit+0x11c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2221      	movs	r2, #33	; 0x21
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256a:	f7fe fd7f 	bl	800106c <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002584:	d108      	bne.n	8002598 <HAL_UART_Transmit+0x82>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e003      	b.n	80025a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025a8:	e02a      	b.n	8002600 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f840 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e036      	b.n	8002632 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3302      	adds	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	e007      	b.n	80025f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	3301      	adds	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1cf      	bne.n	80025aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2200      	movs	r2, #0
 8002612:	2140      	movs	r1, #64	; 0x40
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f810 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e006      	b.n	8002632 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b090      	sub	sp, #64	; 0x40
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264a:	e050      	b.n	80026ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d04c      	beq.n	80026ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <UART_WaitOnFlagUntilTimeout+0x30>
 800265a:	f7fe fd07 	bl	800106c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002666:	429a      	cmp	r2, r3
 8002668:	d241      	bcs.n	80026ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800268a:	637a      	str	r2, [r7, #52]	; 0x34
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e5      	bne.n	800266a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	613b      	str	r3, [r7, #16]
   return(result);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026be:	623a      	str	r2, [r7, #32]
 80026c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	69f9      	ldr	r1, [r7, #28]
 80026c4:	6a3a      	ldr	r2, [r7, #32]
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e5      	bne.n	800269e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e00f      	b.n	800270e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	429a      	cmp	r2, r3
 800270a:	d09f      	beq.n	800264c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3740      	adds	r7, #64	; 0x40
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b0c0      	sub	sp, #256	; 0x100
 800271e:	af00      	add	r7, sp, #0
 8002720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002734:	68d9      	ldr	r1, [r3, #12]
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	ea40 0301 	orr.w	r3, r0, r1
 8002740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	431a      	orrs	r2, r3
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002770:	f021 010c 	bic.w	r1, r1, #12
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800277e:	430b      	orrs	r3, r1
 8002780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002792:	6999      	ldr	r1, [r3, #24]
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	ea40 0301 	orr.w	r3, r0, r1
 800279e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b8f      	ldr	r3, [pc, #572]	; (80029e4 <UART_SetConfig+0x2cc>)
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d005      	beq.n	80027b8 <UART_SetConfig+0xa0>
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b8d      	ldr	r3, [pc, #564]	; (80029e8 <UART_SetConfig+0x2d0>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d104      	bne.n	80027c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b8:	f7ff fe4c 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 80027bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027c0:	e003      	b.n	80027ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027c2:	f7ff fe33 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 80027c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d4:	f040 810c 	bne.w	80029f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027dc:	2200      	movs	r2, #0
 80027de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027ea:	4622      	mov	r2, r4
 80027ec:	462b      	mov	r3, r5
 80027ee:	1891      	adds	r1, r2, r2
 80027f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80027f2:	415b      	adcs	r3, r3
 80027f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027fa:	4621      	mov	r1, r4
 80027fc:	eb12 0801 	adds.w	r8, r2, r1
 8002800:	4629      	mov	r1, r5
 8002802:	eb43 0901 	adc.w	r9, r3, r1
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
 800281e:	4623      	mov	r3, r4
 8002820:	eb18 0303 	adds.w	r3, r8, r3
 8002824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002828:	462b      	mov	r3, r5
 800282a:	eb49 0303 	adc.w	r3, r9, r3
 800282e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800283e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002846:	460b      	mov	r3, r1
 8002848:	18db      	adds	r3, r3, r3
 800284a:	653b      	str	r3, [r7, #80]	; 0x50
 800284c:	4613      	mov	r3, r2
 800284e:	eb42 0303 	adc.w	r3, r2, r3
 8002852:	657b      	str	r3, [r7, #84]	; 0x54
 8002854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800285c:	f7fd fd10 	bl	8000280 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4b61      	ldr	r3, [pc, #388]	; (80029ec <UART_SetConfig+0x2d4>)
 8002866:	fba3 2302 	umull	r2, r3, r3, r2
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	011c      	lsls	r4, r3, #4
 800286e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002872:	2200      	movs	r2, #0
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800287c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002880:	4642      	mov	r2, r8
 8002882:	464b      	mov	r3, r9
 8002884:	1891      	adds	r1, r2, r2
 8002886:	64b9      	str	r1, [r7, #72]	; 0x48
 8002888:	415b      	adcs	r3, r3
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800288c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002890:	4641      	mov	r1, r8
 8002892:	eb12 0a01 	adds.w	sl, r2, r1
 8002896:	4649      	mov	r1, r9
 8002898:	eb43 0b01 	adc.w	fp, r3, r1
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b0:	4692      	mov	sl, r2
 80028b2:	469b      	mov	fp, r3
 80028b4:	4643      	mov	r3, r8
 80028b6:	eb1a 0303 	adds.w	r3, sl, r3
 80028ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028be:	464b      	mov	r3, r9
 80028c0:	eb4b 0303 	adc.w	r3, fp, r3
 80028c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028dc:	460b      	mov	r3, r1
 80028de:	18db      	adds	r3, r3, r3
 80028e0:	643b      	str	r3, [r7, #64]	; 0x40
 80028e2:	4613      	mov	r3, r2
 80028e4:	eb42 0303 	adc.w	r3, r2, r3
 80028e8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028f2:	f7fd fcc5 	bl	8000280 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <UART_SetConfig+0x2d4>)
 80028fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2264      	movs	r2, #100	; 0x64
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	1acb      	subs	r3, r1, r3
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <UART_SetConfig+0x2d4>)
 8002914:	fba3 2302 	umull	r2, r3, r3, r2
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002920:	441c      	add	r4, r3
 8002922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800292c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002934:	4642      	mov	r2, r8
 8002936:	464b      	mov	r3, r9
 8002938:	1891      	adds	r1, r2, r2
 800293a:	63b9      	str	r1, [r7, #56]	; 0x38
 800293c:	415b      	adcs	r3, r3
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002944:	4641      	mov	r1, r8
 8002946:	1851      	adds	r1, r2, r1
 8002948:	6339      	str	r1, [r7, #48]	; 0x30
 800294a:	4649      	mov	r1, r9
 800294c:	414b      	adcs	r3, r1
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800295c:	4659      	mov	r1, fp
 800295e:	00cb      	lsls	r3, r1, #3
 8002960:	4651      	mov	r1, sl
 8002962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002966:	4651      	mov	r1, sl
 8002968:	00ca      	lsls	r2, r1, #3
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	4603      	mov	r3, r0
 8002970:	4642      	mov	r2, r8
 8002972:	189b      	adds	r3, r3, r2
 8002974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002978:	464b      	mov	r3, r9
 800297a:	460a      	mov	r2, r1
 800297c:	eb42 0303 	adc.w	r3, r2, r3
 8002980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002998:	460b      	mov	r3, r1
 800299a:	18db      	adds	r3, r3, r3
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
 800299e:	4613      	mov	r3, r2
 80029a0:	eb42 0303 	adc.w	r3, r2, r3
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029ae:	f7fd fc67 	bl	8000280 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <UART_SetConfig+0x2d4>)
 80029b8:	fba3 1302 	umull	r1, r3, r3, r2
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	2164      	movs	r1, #100	; 0x64
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	3332      	adds	r3, #50	; 0x32
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <UART_SetConfig+0x2d4>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	f003 0207 	and.w	r2, r3, #7
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4422      	add	r2, r4
 80029de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029e0:	e105      	b.n	8002bee <UART_SetConfig+0x4d6>
 80029e2:	bf00      	nop
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40011400 	.word	0x40011400
 80029ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a02:	4642      	mov	r2, r8
 8002a04:	464b      	mov	r3, r9
 8002a06:	1891      	adds	r1, r2, r2
 8002a08:	6239      	str	r1, [r7, #32]
 8002a0a:	415b      	adcs	r3, r3
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a12:	4641      	mov	r1, r8
 8002a14:	1854      	adds	r4, r2, r1
 8002a16:	4649      	mov	r1, r9
 8002a18:	eb43 0501 	adc.w	r5, r3, r1
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	00eb      	lsls	r3, r5, #3
 8002a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2a:	00e2      	lsls	r2, r4, #3
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
 8002a30:	4643      	mov	r3, r8
 8002a32:	18e3      	adds	r3, r4, r3
 8002a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a38:	464b      	mov	r3, r9
 8002a3a:	eb45 0303 	adc.w	r3, r5, r3
 8002a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a5e:	4629      	mov	r1, r5
 8002a60:	008b      	lsls	r3, r1, #2
 8002a62:	4621      	mov	r1, r4
 8002a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a68:	4621      	mov	r1, r4
 8002a6a:	008a      	lsls	r2, r1, #2
 8002a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a70:	f7fd fc06 	bl	8000280 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	011c      	lsls	r4, r3, #4
 8002a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a94:	4642      	mov	r2, r8
 8002a96:	464b      	mov	r3, r9
 8002a98:	1891      	adds	r1, r2, r2
 8002a9a:	61b9      	str	r1, [r7, #24]
 8002a9c:	415b      	adcs	r3, r3
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	1851      	adds	r1, r2, r1
 8002aa8:	6139      	str	r1, [r7, #16]
 8002aaa:	4649      	mov	r1, r9
 8002aac:	414b      	adcs	r3, r1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002abc:	4659      	mov	r1, fp
 8002abe:	00cb      	lsls	r3, r1, #3
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	00ca      	lsls	r2, r1, #3
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ad8:	464b      	mov	r3, r9
 8002ada:	460a      	mov	r2, r1
 8002adc:	eb42 0303 	adc.w	r3, r2, r3
 8002ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002afc:	4649      	mov	r1, r9
 8002afe:	008b      	lsls	r3, r1, #2
 8002b00:	4641      	mov	r1, r8
 8002b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b06:	4641      	mov	r1, r8
 8002b08:	008a      	lsls	r2, r1, #2
 8002b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b0e:	f7fd fbb7 	bl	8000280 <__aeabi_uldivmod>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002b18:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	2164      	movs	r1, #100	; 0x64
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	3332      	adds	r3, #50	; 0x32
 8002b2a:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b36:	441c      	add	r4, r3
 8002b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b40:	677a      	str	r2, [r7, #116]	; 0x74
 8002b42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b46:	4642      	mov	r2, r8
 8002b48:	464b      	mov	r3, r9
 8002b4a:	1891      	adds	r1, r2, r2
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	415b      	adcs	r3, r3
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b56:	4641      	mov	r1, r8
 8002b58:	1851      	adds	r1, r2, r1
 8002b5a:	6039      	str	r1, [r7, #0]
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	414b      	adcs	r3, r1
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b6e:	4659      	mov	r1, fp
 8002b70:	00cb      	lsls	r3, r1, #3
 8002b72:	4651      	mov	r1, sl
 8002b74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b78:	4651      	mov	r1, sl
 8002b7a:	00ca      	lsls	r2, r1, #3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4603      	mov	r3, r0
 8002b82:	4642      	mov	r2, r8
 8002b84:	189b      	adds	r3, r3, r2
 8002b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b88:	464b      	mov	r3, r9
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	eb42 0303 	adc.w	r3, r2, r3
 8002b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b9c:	667a      	str	r2, [r7, #100]	; 0x64
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002baa:	4649      	mov	r1, r9
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	4641      	mov	r1, r8
 8002bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb4:	4641      	mov	r1, r8
 8002bb6:	008a      	lsls	r2, r1, #2
 8002bb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bbc:	f7fd fb60 	bl	8000280 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2164      	movs	r1, #100	; 0x64
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4422      	add	r2, r4
 8002bec:	609a      	str	r2, [r3, #8]
}
 8002bee:	bf00      	nop
 8002bf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfa:	bf00      	nop
 8002bfc:	51eb851f 	.word	0x51eb851f

08002c00 <__errno>:
 8002c00:	4b01      	ldr	r3, [pc, #4]	; (8002c08 <__errno+0x8>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	2000000c 	.word	0x2000000c

08002c0c <__libc_init_array>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	4d0d      	ldr	r5, [pc, #52]	; (8002c44 <__libc_init_array+0x38>)
 8002c10:	4c0d      	ldr	r4, [pc, #52]	; (8002c48 <__libc_init_array+0x3c>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	2600      	movs	r6, #0
 8002c18:	42a6      	cmp	r6, r4
 8002c1a:	d109      	bne.n	8002c30 <__libc_init_array+0x24>
 8002c1c:	4d0b      	ldr	r5, [pc, #44]	; (8002c4c <__libc_init_array+0x40>)
 8002c1e:	4c0c      	ldr	r4, [pc, #48]	; (8002c50 <__libc_init_array+0x44>)
 8002c20:	f000 ffae 	bl	8003b80 <_init>
 8002c24:	1b64      	subs	r4, r4, r5
 8002c26:	10a4      	asrs	r4, r4, #2
 8002c28:	2600      	movs	r6, #0
 8002c2a:	42a6      	cmp	r6, r4
 8002c2c:	d105      	bne.n	8002c3a <__libc_init_array+0x2e>
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c34:	4798      	blx	r3
 8002c36:	3601      	adds	r6, #1
 8002c38:	e7ee      	b.n	8002c18 <__libc_init_array+0xc>
 8002c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3e:	4798      	blx	r3
 8002c40:	3601      	adds	r6, #1
 8002c42:	e7f2      	b.n	8002c2a <__libc_init_array+0x1e>
 8002c44:	08003cec 	.word	0x08003cec
 8002c48:	08003cec 	.word	0x08003cec
 8002c4c:	08003cec 	.word	0x08003cec
 8002c50:	08003cf0 	.word	0x08003cf0

08002c54 <memset>:
 8002c54:	4402      	add	r2, r0
 8002c56:	4603      	mov	r3, r0
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d100      	bne.n	8002c5e <memset+0xa>
 8002c5c:	4770      	bx	lr
 8002c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c62:	e7f9      	b.n	8002c58 <memset+0x4>

08002c64 <iprintf>:
 8002c64:	b40f      	push	{r0, r1, r2, r3}
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <iprintf+0x2c>)
 8002c68:	b513      	push	{r0, r1, r4, lr}
 8002c6a:	681c      	ldr	r4, [r3, #0]
 8002c6c:	b124      	cbz	r4, 8002c78 <iprintf+0x14>
 8002c6e:	69a3      	ldr	r3, [r4, #24]
 8002c70:	b913      	cbnz	r3, 8002c78 <iprintf+0x14>
 8002c72:	4620      	mov	r0, r4
 8002c74:	f000 f866 	bl	8002d44 <__sinit>
 8002c78:	ab05      	add	r3, sp, #20
 8002c7a:	9a04      	ldr	r2, [sp, #16]
 8002c7c:	68a1      	ldr	r1, [r4, #8]
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	4620      	mov	r0, r4
 8002c82:	f000 f9bd 	bl	8003000 <_vfiprintf_r>
 8002c86:	b002      	add	sp, #8
 8002c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c8c:	b004      	add	sp, #16
 8002c8e:	4770      	bx	lr
 8002c90:	2000000c 	.word	0x2000000c

08002c94 <std>:
 8002c94:	2300      	movs	r3, #0
 8002c96:	b510      	push	{r4, lr}
 8002c98:	4604      	mov	r4, r0
 8002c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8002c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ca2:	6083      	str	r3, [r0, #8]
 8002ca4:	8181      	strh	r1, [r0, #12]
 8002ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ca8:	81c2      	strh	r2, [r0, #14]
 8002caa:	6183      	str	r3, [r0, #24]
 8002cac:	4619      	mov	r1, r3
 8002cae:	2208      	movs	r2, #8
 8002cb0:	305c      	adds	r0, #92	; 0x5c
 8002cb2:	f7ff ffcf 	bl	8002c54 <memset>
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <std+0x38>)
 8002cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <std+0x3c>)
 8002cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <std+0x40>)
 8002cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <std+0x44>)
 8002cc4:	6224      	str	r4, [r4, #32]
 8002cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8002cc8:	bd10      	pop	{r4, pc}
 8002cca:	bf00      	nop
 8002ccc:	080035a9 	.word	0x080035a9
 8002cd0:	080035cb 	.word	0x080035cb
 8002cd4:	08003603 	.word	0x08003603
 8002cd8:	08003627 	.word	0x08003627

08002cdc <_cleanup_r>:
 8002cdc:	4901      	ldr	r1, [pc, #4]	; (8002ce4 <_cleanup_r+0x8>)
 8002cde:	f000 b8af 	b.w	8002e40 <_fwalk_reent>
 8002ce2:	bf00      	nop
 8002ce4:	08003901 	.word	0x08003901

08002ce8 <__sfmoreglue>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	2268      	movs	r2, #104	; 0x68
 8002cec:	1e4d      	subs	r5, r1, #1
 8002cee:	4355      	muls	r5, r2
 8002cf0:	460e      	mov	r6, r1
 8002cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002cf6:	f000 f8e5 	bl	8002ec4 <_malloc_r>
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	b140      	cbz	r0, 8002d10 <__sfmoreglue+0x28>
 8002cfe:	2100      	movs	r1, #0
 8002d00:	e9c0 1600 	strd	r1, r6, [r0]
 8002d04:	300c      	adds	r0, #12
 8002d06:	60a0      	str	r0, [r4, #8]
 8002d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d0c:	f7ff ffa2 	bl	8002c54 <memset>
 8002d10:	4620      	mov	r0, r4
 8002d12:	bd70      	pop	{r4, r5, r6, pc}

08002d14 <__sfp_lock_acquire>:
 8002d14:	4801      	ldr	r0, [pc, #4]	; (8002d1c <__sfp_lock_acquire+0x8>)
 8002d16:	f000 b8b3 	b.w	8002e80 <__retarget_lock_acquire_recursive>
 8002d1a:	bf00      	nop
 8002d1c:	20000111 	.word	0x20000111

08002d20 <__sfp_lock_release>:
 8002d20:	4801      	ldr	r0, [pc, #4]	; (8002d28 <__sfp_lock_release+0x8>)
 8002d22:	f000 b8ae 	b.w	8002e82 <__retarget_lock_release_recursive>
 8002d26:	bf00      	nop
 8002d28:	20000111 	.word	0x20000111

08002d2c <__sinit_lock_acquire>:
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <__sinit_lock_acquire+0x8>)
 8002d2e:	f000 b8a7 	b.w	8002e80 <__retarget_lock_acquire_recursive>
 8002d32:	bf00      	nop
 8002d34:	20000112 	.word	0x20000112

08002d38 <__sinit_lock_release>:
 8002d38:	4801      	ldr	r0, [pc, #4]	; (8002d40 <__sinit_lock_release+0x8>)
 8002d3a:	f000 b8a2 	b.w	8002e82 <__retarget_lock_release_recursive>
 8002d3e:	bf00      	nop
 8002d40:	20000112 	.word	0x20000112

08002d44 <__sinit>:
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	f7ff fff0 	bl	8002d2c <__sinit_lock_acquire>
 8002d4c:	69a3      	ldr	r3, [r4, #24]
 8002d4e:	b11b      	cbz	r3, 8002d58 <__sinit+0x14>
 8002d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d54:	f7ff bff0 	b.w	8002d38 <__sinit_lock_release>
 8002d58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002d5c:	6523      	str	r3, [r4, #80]	; 0x50
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <__sinit+0x68>)
 8002d60:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <__sinit+0x6c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	62a2      	str	r2, [r4, #40]	; 0x28
 8002d66:	42a3      	cmp	r3, r4
 8002d68:	bf04      	itt	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	61a3      	streq	r3, [r4, #24]
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f000 f820 	bl	8002db4 <__sfp>
 8002d74:	6060      	str	r0, [r4, #4]
 8002d76:	4620      	mov	r0, r4
 8002d78:	f000 f81c 	bl	8002db4 <__sfp>
 8002d7c:	60a0      	str	r0, [r4, #8]
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f000 f818 	bl	8002db4 <__sfp>
 8002d84:	2200      	movs	r2, #0
 8002d86:	60e0      	str	r0, [r4, #12]
 8002d88:	2104      	movs	r1, #4
 8002d8a:	6860      	ldr	r0, [r4, #4]
 8002d8c:	f7ff ff82 	bl	8002c94 <std>
 8002d90:	68a0      	ldr	r0, [r4, #8]
 8002d92:	2201      	movs	r2, #1
 8002d94:	2109      	movs	r1, #9
 8002d96:	f7ff ff7d 	bl	8002c94 <std>
 8002d9a:	68e0      	ldr	r0, [r4, #12]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	2112      	movs	r1, #18
 8002da0:	f7ff ff78 	bl	8002c94 <std>
 8002da4:	2301      	movs	r3, #1
 8002da6:	61a3      	str	r3, [r4, #24]
 8002da8:	e7d2      	b.n	8002d50 <__sinit+0xc>
 8002daa:	bf00      	nop
 8002dac:	08003c4c 	.word	0x08003c4c
 8002db0:	08002cdd 	.word	0x08002cdd

08002db4 <__sfp>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	4607      	mov	r7, r0
 8002db8:	f7ff ffac 	bl	8002d14 <__sfp_lock_acquire>
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <__sfp+0x84>)
 8002dbe:	681e      	ldr	r6, [r3, #0]
 8002dc0:	69b3      	ldr	r3, [r6, #24]
 8002dc2:	b913      	cbnz	r3, 8002dca <__sfp+0x16>
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f7ff ffbd 	bl	8002d44 <__sinit>
 8002dca:	3648      	adds	r6, #72	; 0x48
 8002dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	d503      	bpl.n	8002ddc <__sfp+0x28>
 8002dd4:	6833      	ldr	r3, [r6, #0]
 8002dd6:	b30b      	cbz	r3, 8002e1c <__sfp+0x68>
 8002dd8:	6836      	ldr	r6, [r6, #0]
 8002dda:	e7f7      	b.n	8002dcc <__sfp+0x18>
 8002ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002de0:	b9d5      	cbnz	r5, 8002e18 <__sfp+0x64>
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <__sfp+0x88>)
 8002de4:	60e3      	str	r3, [r4, #12]
 8002de6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002dea:	6665      	str	r5, [r4, #100]	; 0x64
 8002dec:	f000 f847 	bl	8002e7e <__retarget_lock_init_recursive>
 8002df0:	f7ff ff96 	bl	8002d20 <__sfp_lock_release>
 8002df4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002df8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002dfc:	6025      	str	r5, [r4, #0]
 8002dfe:	61a5      	str	r5, [r4, #24]
 8002e00:	2208      	movs	r2, #8
 8002e02:	4629      	mov	r1, r5
 8002e04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e08:	f7ff ff24 	bl	8002c54 <memset>
 8002e0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e14:	4620      	mov	r0, r4
 8002e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e18:	3468      	adds	r4, #104	; 0x68
 8002e1a:	e7d9      	b.n	8002dd0 <__sfp+0x1c>
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	4638      	mov	r0, r7
 8002e20:	f7ff ff62 	bl	8002ce8 <__sfmoreglue>
 8002e24:	4604      	mov	r4, r0
 8002e26:	6030      	str	r0, [r6, #0]
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d1d5      	bne.n	8002dd8 <__sfp+0x24>
 8002e2c:	f7ff ff78 	bl	8002d20 <__sfp_lock_release>
 8002e30:	230c      	movs	r3, #12
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	e7ee      	b.n	8002e14 <__sfp+0x60>
 8002e36:	bf00      	nop
 8002e38:	08003c4c 	.word	0x08003c4c
 8002e3c:	ffff0001 	.word	0xffff0001

08002e40 <_fwalk_reent>:
 8002e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e44:	4606      	mov	r6, r0
 8002e46:	4688      	mov	r8, r1
 8002e48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e4c:	2700      	movs	r7, #0
 8002e4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e52:	f1b9 0901 	subs.w	r9, r9, #1
 8002e56:	d505      	bpl.n	8002e64 <_fwalk_reent+0x24>
 8002e58:	6824      	ldr	r4, [r4, #0]
 8002e5a:	2c00      	cmp	r4, #0
 8002e5c:	d1f7      	bne.n	8002e4e <_fwalk_reent+0xe>
 8002e5e:	4638      	mov	r0, r7
 8002e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e64:	89ab      	ldrh	r3, [r5, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d907      	bls.n	8002e7a <_fwalk_reent+0x3a>
 8002e6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	d003      	beq.n	8002e7a <_fwalk_reent+0x3a>
 8002e72:	4629      	mov	r1, r5
 8002e74:	4630      	mov	r0, r6
 8002e76:	47c0      	blx	r8
 8002e78:	4307      	orrs	r7, r0
 8002e7a:	3568      	adds	r5, #104	; 0x68
 8002e7c:	e7e9      	b.n	8002e52 <_fwalk_reent+0x12>

08002e7e <__retarget_lock_init_recursive>:
 8002e7e:	4770      	bx	lr

08002e80 <__retarget_lock_acquire_recursive>:
 8002e80:	4770      	bx	lr

08002e82 <__retarget_lock_release_recursive>:
 8002e82:	4770      	bx	lr

08002e84 <sbrk_aligned>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	4e0e      	ldr	r6, [pc, #56]	; (8002ec0 <sbrk_aligned+0x3c>)
 8002e88:	460c      	mov	r4, r1
 8002e8a:	6831      	ldr	r1, [r6, #0]
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	b911      	cbnz	r1, 8002e96 <sbrk_aligned+0x12>
 8002e90:	f000 fb7a 	bl	8003588 <_sbrk_r>
 8002e94:	6030      	str	r0, [r6, #0]
 8002e96:	4621      	mov	r1, r4
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f000 fb75 	bl	8003588 <_sbrk_r>
 8002e9e:	1c43      	adds	r3, r0, #1
 8002ea0:	d00a      	beq.n	8002eb8 <sbrk_aligned+0x34>
 8002ea2:	1cc4      	adds	r4, r0, #3
 8002ea4:	f024 0403 	bic.w	r4, r4, #3
 8002ea8:	42a0      	cmp	r0, r4
 8002eaa:	d007      	beq.n	8002ebc <sbrk_aligned+0x38>
 8002eac:	1a21      	subs	r1, r4, r0
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f000 fb6a 	bl	8003588 <_sbrk_r>
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d101      	bne.n	8002ebc <sbrk_aligned+0x38>
 8002eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	20000118 	.word	0x20000118

08002ec4 <_malloc_r>:
 8002ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec8:	1ccd      	adds	r5, r1, #3
 8002eca:	f025 0503 	bic.w	r5, r5, #3
 8002ece:	3508      	adds	r5, #8
 8002ed0:	2d0c      	cmp	r5, #12
 8002ed2:	bf38      	it	cc
 8002ed4:	250c      	movcc	r5, #12
 8002ed6:	2d00      	cmp	r5, #0
 8002ed8:	4607      	mov	r7, r0
 8002eda:	db01      	blt.n	8002ee0 <_malloc_r+0x1c>
 8002edc:	42a9      	cmp	r1, r5
 8002ede:	d905      	bls.n	8002eec <_malloc_r+0x28>
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eec:	4e2e      	ldr	r6, [pc, #184]	; (8002fa8 <_malloc_r+0xe4>)
 8002eee:	f000 fdbb 	bl	8003a68 <__malloc_lock>
 8002ef2:	6833      	ldr	r3, [r6, #0]
 8002ef4:	461c      	mov	r4, r3
 8002ef6:	bb34      	cbnz	r4, 8002f46 <_malloc_r+0x82>
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4638      	mov	r0, r7
 8002efc:	f7ff ffc2 	bl	8002e84 <sbrk_aligned>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	4604      	mov	r4, r0
 8002f04:	d14d      	bne.n	8002fa2 <_malloc_r+0xde>
 8002f06:	6834      	ldr	r4, [r6, #0]
 8002f08:	4626      	mov	r6, r4
 8002f0a:	2e00      	cmp	r6, #0
 8002f0c:	d140      	bne.n	8002f90 <_malloc_r+0xcc>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	4631      	mov	r1, r6
 8002f12:	4638      	mov	r0, r7
 8002f14:	eb04 0803 	add.w	r8, r4, r3
 8002f18:	f000 fb36 	bl	8003588 <_sbrk_r>
 8002f1c:	4580      	cmp	r8, r0
 8002f1e:	d13a      	bne.n	8002f96 <_malloc_r+0xd2>
 8002f20:	6821      	ldr	r1, [r4, #0]
 8002f22:	3503      	adds	r5, #3
 8002f24:	1a6d      	subs	r5, r5, r1
 8002f26:	f025 0503 	bic.w	r5, r5, #3
 8002f2a:	3508      	adds	r5, #8
 8002f2c:	2d0c      	cmp	r5, #12
 8002f2e:	bf38      	it	cc
 8002f30:	250c      	movcc	r5, #12
 8002f32:	4629      	mov	r1, r5
 8002f34:	4638      	mov	r0, r7
 8002f36:	f7ff ffa5 	bl	8002e84 <sbrk_aligned>
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	d02b      	beq.n	8002f96 <_malloc_r+0xd2>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	442b      	add	r3, r5
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	e00e      	b.n	8002f64 <_malloc_r+0xa0>
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	1b52      	subs	r2, r2, r5
 8002f4a:	d41e      	bmi.n	8002f8a <_malloc_r+0xc6>
 8002f4c:	2a0b      	cmp	r2, #11
 8002f4e:	d916      	bls.n	8002f7e <_malloc_r+0xba>
 8002f50:	1961      	adds	r1, r4, r5
 8002f52:	42a3      	cmp	r3, r4
 8002f54:	6025      	str	r5, [r4, #0]
 8002f56:	bf18      	it	ne
 8002f58:	6059      	strne	r1, [r3, #4]
 8002f5a:	6863      	ldr	r3, [r4, #4]
 8002f5c:	bf08      	it	eq
 8002f5e:	6031      	streq	r1, [r6, #0]
 8002f60:	5162      	str	r2, [r4, r5]
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	4638      	mov	r0, r7
 8002f66:	f104 060b 	add.w	r6, r4, #11
 8002f6a:	f000 fd83 	bl	8003a74 <__malloc_unlock>
 8002f6e:	f026 0607 	bic.w	r6, r6, #7
 8002f72:	1d23      	adds	r3, r4, #4
 8002f74:	1af2      	subs	r2, r6, r3
 8002f76:	d0b6      	beq.n	8002ee6 <_malloc_r+0x22>
 8002f78:	1b9b      	subs	r3, r3, r6
 8002f7a:	50a3      	str	r3, [r4, r2]
 8002f7c:	e7b3      	b.n	8002ee6 <_malloc_r+0x22>
 8002f7e:	6862      	ldr	r2, [r4, #4]
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	bf0c      	ite	eq
 8002f84:	6032      	streq	r2, [r6, #0]
 8002f86:	605a      	strne	r2, [r3, #4]
 8002f88:	e7ec      	b.n	8002f64 <_malloc_r+0xa0>
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	6864      	ldr	r4, [r4, #4]
 8002f8e:	e7b2      	b.n	8002ef6 <_malloc_r+0x32>
 8002f90:	4634      	mov	r4, r6
 8002f92:	6876      	ldr	r6, [r6, #4]
 8002f94:	e7b9      	b.n	8002f0a <_malloc_r+0x46>
 8002f96:	230c      	movs	r3, #12
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	f000 fd6a 	bl	8003a74 <__malloc_unlock>
 8002fa0:	e7a1      	b.n	8002ee6 <_malloc_r+0x22>
 8002fa2:	6025      	str	r5, [r4, #0]
 8002fa4:	e7de      	b.n	8002f64 <_malloc_r+0xa0>
 8002fa6:	bf00      	nop
 8002fa8:	20000114 	.word	0x20000114

08002fac <__sfputc_r>:
 8002fac:	6893      	ldr	r3, [r2, #8]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	b410      	push	{r4}
 8002fb4:	6093      	str	r3, [r2, #8]
 8002fb6:	da08      	bge.n	8002fca <__sfputc_r+0x1e>
 8002fb8:	6994      	ldr	r4, [r2, #24]
 8002fba:	42a3      	cmp	r3, r4
 8002fbc:	db01      	blt.n	8002fc2 <__sfputc_r+0x16>
 8002fbe:	290a      	cmp	r1, #10
 8002fc0:	d103      	bne.n	8002fca <__sfputc_r+0x1e>
 8002fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc6:	f000 bb33 	b.w	8003630 <__swbuf_r>
 8002fca:	6813      	ldr	r3, [r2, #0]
 8002fcc:	1c58      	adds	r0, r3, #1
 8002fce:	6010      	str	r0, [r2, #0]
 8002fd0:	7019      	strb	r1, [r3, #0]
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <__sfputs_r>:
 8002fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fdc:	4606      	mov	r6, r0
 8002fde:	460f      	mov	r7, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	18d5      	adds	r5, r2, r3
 8002fe4:	42ac      	cmp	r4, r5
 8002fe6:	d101      	bne.n	8002fec <__sfputs_r+0x12>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	e007      	b.n	8002ffc <__sfputs_r+0x22>
 8002fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff0:	463a      	mov	r2, r7
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7ff ffda 	bl	8002fac <__sfputc_r>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d1f3      	bne.n	8002fe4 <__sfputs_r+0xa>
 8002ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003000 <_vfiprintf_r>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	460d      	mov	r5, r1
 8003006:	b09d      	sub	sp, #116	; 0x74
 8003008:	4614      	mov	r4, r2
 800300a:	4698      	mov	r8, r3
 800300c:	4606      	mov	r6, r0
 800300e:	b118      	cbz	r0, 8003018 <_vfiprintf_r+0x18>
 8003010:	6983      	ldr	r3, [r0, #24]
 8003012:	b90b      	cbnz	r3, 8003018 <_vfiprintf_r+0x18>
 8003014:	f7ff fe96 	bl	8002d44 <__sinit>
 8003018:	4b89      	ldr	r3, [pc, #548]	; (8003240 <_vfiprintf_r+0x240>)
 800301a:	429d      	cmp	r5, r3
 800301c:	d11b      	bne.n	8003056 <_vfiprintf_r+0x56>
 800301e:	6875      	ldr	r5, [r6, #4]
 8003020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003022:	07d9      	lsls	r1, r3, #31
 8003024:	d405      	bmi.n	8003032 <_vfiprintf_r+0x32>
 8003026:	89ab      	ldrh	r3, [r5, #12]
 8003028:	059a      	lsls	r2, r3, #22
 800302a:	d402      	bmi.n	8003032 <_vfiprintf_r+0x32>
 800302c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800302e:	f7ff ff27 	bl	8002e80 <__retarget_lock_acquire_recursive>
 8003032:	89ab      	ldrh	r3, [r5, #12]
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	d501      	bpl.n	800303c <_vfiprintf_r+0x3c>
 8003038:	692b      	ldr	r3, [r5, #16]
 800303a:	b9eb      	cbnz	r3, 8003078 <_vfiprintf_r+0x78>
 800303c:	4629      	mov	r1, r5
 800303e:	4630      	mov	r0, r6
 8003040:	f000 fb5a 	bl	80036f8 <__swsetup_r>
 8003044:	b1c0      	cbz	r0, 8003078 <_vfiprintf_r+0x78>
 8003046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003048:	07dc      	lsls	r4, r3, #31
 800304a:	d50e      	bpl.n	800306a <_vfiprintf_r+0x6a>
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	b01d      	add	sp, #116	; 0x74
 8003052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003056:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <_vfiprintf_r+0x244>)
 8003058:	429d      	cmp	r5, r3
 800305a:	d101      	bne.n	8003060 <_vfiprintf_r+0x60>
 800305c:	68b5      	ldr	r5, [r6, #8]
 800305e:	e7df      	b.n	8003020 <_vfiprintf_r+0x20>
 8003060:	4b79      	ldr	r3, [pc, #484]	; (8003248 <_vfiprintf_r+0x248>)
 8003062:	429d      	cmp	r5, r3
 8003064:	bf08      	it	eq
 8003066:	68f5      	ldreq	r5, [r6, #12]
 8003068:	e7da      	b.n	8003020 <_vfiprintf_r+0x20>
 800306a:	89ab      	ldrh	r3, [r5, #12]
 800306c:	0598      	lsls	r0, r3, #22
 800306e:	d4ed      	bmi.n	800304c <_vfiprintf_r+0x4c>
 8003070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003072:	f7ff ff06 	bl	8002e82 <__retarget_lock_release_recursive>
 8003076:	e7e9      	b.n	800304c <_vfiprintf_r+0x4c>
 8003078:	2300      	movs	r3, #0
 800307a:	9309      	str	r3, [sp, #36]	; 0x24
 800307c:	2320      	movs	r3, #32
 800307e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003082:	f8cd 800c 	str.w	r8, [sp, #12]
 8003086:	2330      	movs	r3, #48	; 0x30
 8003088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800324c <_vfiprintf_r+0x24c>
 800308c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003090:	f04f 0901 	mov.w	r9, #1
 8003094:	4623      	mov	r3, r4
 8003096:	469a      	mov	sl, r3
 8003098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800309c:	b10a      	cbz	r2, 80030a2 <_vfiprintf_r+0xa2>
 800309e:	2a25      	cmp	r2, #37	; 0x25
 80030a0:	d1f9      	bne.n	8003096 <_vfiprintf_r+0x96>
 80030a2:	ebba 0b04 	subs.w	fp, sl, r4
 80030a6:	d00b      	beq.n	80030c0 <_vfiprintf_r+0xc0>
 80030a8:	465b      	mov	r3, fp
 80030aa:	4622      	mov	r2, r4
 80030ac:	4629      	mov	r1, r5
 80030ae:	4630      	mov	r0, r6
 80030b0:	f7ff ff93 	bl	8002fda <__sfputs_r>
 80030b4:	3001      	adds	r0, #1
 80030b6:	f000 80aa 	beq.w	800320e <_vfiprintf_r+0x20e>
 80030ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030bc:	445a      	add	r2, fp
 80030be:	9209      	str	r2, [sp, #36]	; 0x24
 80030c0:	f89a 3000 	ldrb.w	r3, [sl]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a2 	beq.w	800320e <_vfiprintf_r+0x20e>
 80030ca:	2300      	movs	r3, #0
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030d4:	f10a 0a01 	add.w	sl, sl, #1
 80030d8:	9304      	str	r3, [sp, #16]
 80030da:	9307      	str	r3, [sp, #28]
 80030dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030e0:	931a      	str	r3, [sp, #104]	; 0x68
 80030e2:	4654      	mov	r4, sl
 80030e4:	2205      	movs	r2, #5
 80030e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ea:	4858      	ldr	r0, [pc, #352]	; (800324c <_vfiprintf_r+0x24c>)
 80030ec:	f7fd f878 	bl	80001e0 <memchr>
 80030f0:	9a04      	ldr	r2, [sp, #16]
 80030f2:	b9d8      	cbnz	r0, 800312c <_vfiprintf_r+0x12c>
 80030f4:	06d1      	lsls	r1, r2, #27
 80030f6:	bf44      	itt	mi
 80030f8:	2320      	movmi	r3, #32
 80030fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030fe:	0713      	lsls	r3, r2, #28
 8003100:	bf44      	itt	mi
 8003102:	232b      	movmi	r3, #43	; 0x2b
 8003104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003108:	f89a 3000 	ldrb.w	r3, [sl]
 800310c:	2b2a      	cmp	r3, #42	; 0x2a
 800310e:	d015      	beq.n	800313c <_vfiprintf_r+0x13c>
 8003110:	9a07      	ldr	r2, [sp, #28]
 8003112:	4654      	mov	r4, sl
 8003114:	2000      	movs	r0, #0
 8003116:	f04f 0c0a 	mov.w	ip, #10
 800311a:	4621      	mov	r1, r4
 800311c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003120:	3b30      	subs	r3, #48	; 0x30
 8003122:	2b09      	cmp	r3, #9
 8003124:	d94e      	bls.n	80031c4 <_vfiprintf_r+0x1c4>
 8003126:	b1b0      	cbz	r0, 8003156 <_vfiprintf_r+0x156>
 8003128:	9207      	str	r2, [sp, #28]
 800312a:	e014      	b.n	8003156 <_vfiprintf_r+0x156>
 800312c:	eba0 0308 	sub.w	r3, r0, r8
 8003130:	fa09 f303 	lsl.w	r3, r9, r3
 8003134:	4313      	orrs	r3, r2
 8003136:	9304      	str	r3, [sp, #16]
 8003138:	46a2      	mov	sl, r4
 800313a:	e7d2      	b.n	80030e2 <_vfiprintf_r+0xe2>
 800313c:	9b03      	ldr	r3, [sp, #12]
 800313e:	1d19      	adds	r1, r3, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	9103      	str	r1, [sp, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	bfbb      	ittet	lt
 8003148:	425b      	neglt	r3, r3
 800314a:	f042 0202 	orrlt.w	r2, r2, #2
 800314e:	9307      	strge	r3, [sp, #28]
 8003150:	9307      	strlt	r3, [sp, #28]
 8003152:	bfb8      	it	lt
 8003154:	9204      	strlt	r2, [sp, #16]
 8003156:	7823      	ldrb	r3, [r4, #0]
 8003158:	2b2e      	cmp	r3, #46	; 0x2e
 800315a:	d10c      	bne.n	8003176 <_vfiprintf_r+0x176>
 800315c:	7863      	ldrb	r3, [r4, #1]
 800315e:	2b2a      	cmp	r3, #42	; 0x2a
 8003160:	d135      	bne.n	80031ce <_vfiprintf_r+0x1ce>
 8003162:	9b03      	ldr	r3, [sp, #12]
 8003164:	1d1a      	adds	r2, r3, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	9203      	str	r2, [sp, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	bfb8      	it	lt
 800316e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003172:	3402      	adds	r4, #2
 8003174:	9305      	str	r3, [sp, #20]
 8003176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800325c <_vfiprintf_r+0x25c>
 800317a:	7821      	ldrb	r1, [r4, #0]
 800317c:	2203      	movs	r2, #3
 800317e:	4650      	mov	r0, sl
 8003180:	f7fd f82e 	bl	80001e0 <memchr>
 8003184:	b140      	cbz	r0, 8003198 <_vfiprintf_r+0x198>
 8003186:	2340      	movs	r3, #64	; 0x40
 8003188:	eba0 000a 	sub.w	r0, r0, sl
 800318c:	fa03 f000 	lsl.w	r0, r3, r0
 8003190:	9b04      	ldr	r3, [sp, #16]
 8003192:	4303      	orrs	r3, r0
 8003194:	3401      	adds	r4, #1
 8003196:	9304      	str	r3, [sp, #16]
 8003198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800319c:	482c      	ldr	r0, [pc, #176]	; (8003250 <_vfiprintf_r+0x250>)
 800319e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031a2:	2206      	movs	r2, #6
 80031a4:	f7fd f81c 	bl	80001e0 <memchr>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d03f      	beq.n	800322c <_vfiprintf_r+0x22c>
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <_vfiprintf_r+0x254>)
 80031ae:	bb1b      	cbnz	r3, 80031f8 <_vfiprintf_r+0x1f8>
 80031b0:	9b03      	ldr	r3, [sp, #12]
 80031b2:	3307      	adds	r3, #7
 80031b4:	f023 0307 	bic.w	r3, r3, #7
 80031b8:	3308      	adds	r3, #8
 80031ba:	9303      	str	r3, [sp, #12]
 80031bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031be:	443b      	add	r3, r7
 80031c0:	9309      	str	r3, [sp, #36]	; 0x24
 80031c2:	e767      	b.n	8003094 <_vfiprintf_r+0x94>
 80031c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80031c8:	460c      	mov	r4, r1
 80031ca:	2001      	movs	r0, #1
 80031cc:	e7a5      	b.n	800311a <_vfiprintf_r+0x11a>
 80031ce:	2300      	movs	r3, #0
 80031d0:	3401      	adds	r4, #1
 80031d2:	9305      	str	r3, [sp, #20]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f04f 0c0a 	mov.w	ip, #10
 80031da:	4620      	mov	r0, r4
 80031dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031e0:	3a30      	subs	r2, #48	; 0x30
 80031e2:	2a09      	cmp	r2, #9
 80031e4:	d903      	bls.n	80031ee <_vfiprintf_r+0x1ee>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0c5      	beq.n	8003176 <_vfiprintf_r+0x176>
 80031ea:	9105      	str	r1, [sp, #20]
 80031ec:	e7c3      	b.n	8003176 <_vfiprintf_r+0x176>
 80031ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80031f2:	4604      	mov	r4, r0
 80031f4:	2301      	movs	r3, #1
 80031f6:	e7f0      	b.n	80031da <_vfiprintf_r+0x1da>
 80031f8:	ab03      	add	r3, sp, #12
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	462a      	mov	r2, r5
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <_vfiprintf_r+0x258>)
 8003200:	a904      	add	r1, sp, #16
 8003202:	4630      	mov	r0, r6
 8003204:	f3af 8000 	nop.w
 8003208:	4607      	mov	r7, r0
 800320a:	1c78      	adds	r0, r7, #1
 800320c:	d1d6      	bne.n	80031bc <_vfiprintf_r+0x1bc>
 800320e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003210:	07d9      	lsls	r1, r3, #31
 8003212:	d405      	bmi.n	8003220 <_vfiprintf_r+0x220>
 8003214:	89ab      	ldrh	r3, [r5, #12]
 8003216:	059a      	lsls	r2, r3, #22
 8003218:	d402      	bmi.n	8003220 <_vfiprintf_r+0x220>
 800321a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800321c:	f7ff fe31 	bl	8002e82 <__retarget_lock_release_recursive>
 8003220:	89ab      	ldrh	r3, [r5, #12]
 8003222:	065b      	lsls	r3, r3, #25
 8003224:	f53f af12 	bmi.w	800304c <_vfiprintf_r+0x4c>
 8003228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800322a:	e711      	b.n	8003050 <_vfiprintf_r+0x50>
 800322c:	ab03      	add	r3, sp, #12
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	462a      	mov	r2, r5
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <_vfiprintf_r+0x258>)
 8003234:	a904      	add	r1, sp, #16
 8003236:	4630      	mov	r0, r6
 8003238:	f000 f880 	bl	800333c <_printf_i>
 800323c:	e7e4      	b.n	8003208 <_vfiprintf_r+0x208>
 800323e:	bf00      	nop
 8003240:	08003c70 	.word	0x08003c70
 8003244:	08003c90 	.word	0x08003c90
 8003248:	08003c50 	.word	0x08003c50
 800324c:	08003cb0 	.word	0x08003cb0
 8003250:	08003cba 	.word	0x08003cba
 8003254:	00000000 	.word	0x00000000
 8003258:	08002fdb 	.word	0x08002fdb
 800325c:	08003cb6 	.word	0x08003cb6

08003260 <_printf_common>:
 8003260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003264:	4616      	mov	r6, r2
 8003266:	4699      	mov	r9, r3
 8003268:	688a      	ldr	r2, [r1, #8]
 800326a:	690b      	ldr	r3, [r1, #16]
 800326c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003270:	4293      	cmp	r3, r2
 8003272:	bfb8      	it	lt
 8003274:	4613      	movlt	r3, r2
 8003276:	6033      	str	r3, [r6, #0]
 8003278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800327c:	4607      	mov	r7, r0
 800327e:	460c      	mov	r4, r1
 8003280:	b10a      	cbz	r2, 8003286 <_printf_common+0x26>
 8003282:	3301      	adds	r3, #1
 8003284:	6033      	str	r3, [r6, #0]
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	0699      	lsls	r1, r3, #26
 800328a:	bf42      	ittt	mi
 800328c:	6833      	ldrmi	r3, [r6, #0]
 800328e:	3302      	addmi	r3, #2
 8003290:	6033      	strmi	r3, [r6, #0]
 8003292:	6825      	ldr	r5, [r4, #0]
 8003294:	f015 0506 	ands.w	r5, r5, #6
 8003298:	d106      	bne.n	80032a8 <_printf_common+0x48>
 800329a:	f104 0a19 	add.w	sl, r4, #25
 800329e:	68e3      	ldr	r3, [r4, #12]
 80032a0:	6832      	ldr	r2, [r6, #0]
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	42ab      	cmp	r3, r5
 80032a6:	dc26      	bgt.n	80032f6 <_printf_common+0x96>
 80032a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032ac:	1e13      	subs	r3, r2, #0
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	bf18      	it	ne
 80032b2:	2301      	movne	r3, #1
 80032b4:	0692      	lsls	r2, r2, #26
 80032b6:	d42b      	bmi.n	8003310 <_printf_common+0xb0>
 80032b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032bc:	4649      	mov	r1, r9
 80032be:	4638      	mov	r0, r7
 80032c0:	47c0      	blx	r8
 80032c2:	3001      	adds	r0, #1
 80032c4:	d01e      	beq.n	8003304 <_printf_common+0xa4>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	68e5      	ldr	r5, [r4, #12]
 80032ca:	6832      	ldr	r2, [r6, #0]
 80032cc:	f003 0306 	and.w	r3, r3, #6
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	bf08      	it	eq
 80032d4:	1aad      	subeq	r5, r5, r2
 80032d6:	68a3      	ldr	r3, [r4, #8]
 80032d8:	6922      	ldr	r2, [r4, #16]
 80032da:	bf0c      	ite	eq
 80032dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e0:	2500      	movne	r5, #0
 80032e2:	4293      	cmp	r3, r2
 80032e4:	bfc4      	itt	gt
 80032e6:	1a9b      	subgt	r3, r3, r2
 80032e8:	18ed      	addgt	r5, r5, r3
 80032ea:	2600      	movs	r6, #0
 80032ec:	341a      	adds	r4, #26
 80032ee:	42b5      	cmp	r5, r6
 80032f0:	d11a      	bne.n	8003328 <_printf_common+0xc8>
 80032f2:	2000      	movs	r0, #0
 80032f4:	e008      	b.n	8003308 <_printf_common+0xa8>
 80032f6:	2301      	movs	r3, #1
 80032f8:	4652      	mov	r2, sl
 80032fa:	4649      	mov	r1, r9
 80032fc:	4638      	mov	r0, r7
 80032fe:	47c0      	blx	r8
 8003300:	3001      	adds	r0, #1
 8003302:	d103      	bne.n	800330c <_printf_common+0xac>
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330c:	3501      	adds	r5, #1
 800330e:	e7c6      	b.n	800329e <_printf_common+0x3e>
 8003310:	18e1      	adds	r1, r4, r3
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	2030      	movs	r0, #48	; 0x30
 8003316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800331a:	4422      	add	r2, r4
 800331c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003324:	3302      	adds	r3, #2
 8003326:	e7c7      	b.n	80032b8 <_printf_common+0x58>
 8003328:	2301      	movs	r3, #1
 800332a:	4622      	mov	r2, r4
 800332c:	4649      	mov	r1, r9
 800332e:	4638      	mov	r0, r7
 8003330:	47c0      	blx	r8
 8003332:	3001      	adds	r0, #1
 8003334:	d0e6      	beq.n	8003304 <_printf_common+0xa4>
 8003336:	3601      	adds	r6, #1
 8003338:	e7d9      	b.n	80032ee <_printf_common+0x8e>
	...

0800333c <_printf_i>:
 800333c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003340:	7e0f      	ldrb	r7, [r1, #24]
 8003342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003344:	2f78      	cmp	r7, #120	; 0x78
 8003346:	4691      	mov	r9, r2
 8003348:	4680      	mov	r8, r0
 800334a:	460c      	mov	r4, r1
 800334c:	469a      	mov	sl, r3
 800334e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003352:	d807      	bhi.n	8003364 <_printf_i+0x28>
 8003354:	2f62      	cmp	r7, #98	; 0x62
 8003356:	d80a      	bhi.n	800336e <_printf_i+0x32>
 8003358:	2f00      	cmp	r7, #0
 800335a:	f000 80d8 	beq.w	800350e <_printf_i+0x1d2>
 800335e:	2f58      	cmp	r7, #88	; 0x58
 8003360:	f000 80a3 	beq.w	80034aa <_printf_i+0x16e>
 8003364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800336c:	e03a      	b.n	80033e4 <_printf_i+0xa8>
 800336e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003372:	2b15      	cmp	r3, #21
 8003374:	d8f6      	bhi.n	8003364 <_printf_i+0x28>
 8003376:	a101      	add	r1, pc, #4	; (adr r1, 800337c <_printf_i+0x40>)
 8003378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033e9 	.word	0x080033e9
 8003384:	08003365 	.word	0x08003365
 8003388:	08003365 	.word	0x08003365
 800338c:	08003365 	.word	0x08003365
 8003390:	08003365 	.word	0x08003365
 8003394:	080033e9 	.word	0x080033e9
 8003398:	08003365 	.word	0x08003365
 800339c:	08003365 	.word	0x08003365
 80033a0:	08003365 	.word	0x08003365
 80033a4:	08003365 	.word	0x08003365
 80033a8:	080034f5 	.word	0x080034f5
 80033ac:	08003419 	.word	0x08003419
 80033b0:	080034d7 	.word	0x080034d7
 80033b4:	08003365 	.word	0x08003365
 80033b8:	08003365 	.word	0x08003365
 80033bc:	08003517 	.word	0x08003517
 80033c0:	08003365 	.word	0x08003365
 80033c4:	08003419 	.word	0x08003419
 80033c8:	08003365 	.word	0x08003365
 80033cc:	08003365 	.word	0x08003365
 80033d0:	080034df 	.word	0x080034df
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	1d1a      	adds	r2, r3, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	602a      	str	r2, [r5, #0]
 80033dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0a3      	b.n	8003530 <_printf_i+0x1f4>
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	6829      	ldr	r1, [r5, #0]
 80033ec:	0606      	lsls	r6, r0, #24
 80033ee:	f101 0304 	add.w	r3, r1, #4
 80033f2:	d50a      	bpl.n	800340a <_printf_i+0xce>
 80033f4:	680e      	ldr	r6, [r1, #0]
 80033f6:	602b      	str	r3, [r5, #0]
 80033f8:	2e00      	cmp	r6, #0
 80033fa:	da03      	bge.n	8003404 <_printf_i+0xc8>
 80033fc:	232d      	movs	r3, #45	; 0x2d
 80033fe:	4276      	negs	r6, r6
 8003400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003404:	485e      	ldr	r0, [pc, #376]	; (8003580 <_printf_i+0x244>)
 8003406:	230a      	movs	r3, #10
 8003408:	e019      	b.n	800343e <_printf_i+0x102>
 800340a:	680e      	ldr	r6, [r1, #0]
 800340c:	602b      	str	r3, [r5, #0]
 800340e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003412:	bf18      	it	ne
 8003414:	b236      	sxthne	r6, r6
 8003416:	e7ef      	b.n	80033f8 <_printf_i+0xbc>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	1d19      	adds	r1, r3, #4
 800341e:	6029      	str	r1, [r5, #0]
 8003420:	0601      	lsls	r1, r0, #24
 8003422:	d501      	bpl.n	8003428 <_printf_i+0xec>
 8003424:	681e      	ldr	r6, [r3, #0]
 8003426:	e002      	b.n	800342e <_printf_i+0xf2>
 8003428:	0646      	lsls	r6, r0, #25
 800342a:	d5fb      	bpl.n	8003424 <_printf_i+0xe8>
 800342c:	881e      	ldrh	r6, [r3, #0]
 800342e:	4854      	ldr	r0, [pc, #336]	; (8003580 <_printf_i+0x244>)
 8003430:	2f6f      	cmp	r7, #111	; 0x6f
 8003432:	bf0c      	ite	eq
 8003434:	2308      	moveq	r3, #8
 8003436:	230a      	movne	r3, #10
 8003438:	2100      	movs	r1, #0
 800343a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800343e:	6865      	ldr	r5, [r4, #4]
 8003440:	60a5      	str	r5, [r4, #8]
 8003442:	2d00      	cmp	r5, #0
 8003444:	bfa2      	ittt	ge
 8003446:	6821      	ldrge	r1, [r4, #0]
 8003448:	f021 0104 	bicge.w	r1, r1, #4
 800344c:	6021      	strge	r1, [r4, #0]
 800344e:	b90e      	cbnz	r6, 8003454 <_printf_i+0x118>
 8003450:	2d00      	cmp	r5, #0
 8003452:	d04d      	beq.n	80034f0 <_printf_i+0x1b4>
 8003454:	4615      	mov	r5, r2
 8003456:	fbb6 f1f3 	udiv	r1, r6, r3
 800345a:	fb03 6711 	mls	r7, r3, r1, r6
 800345e:	5dc7      	ldrb	r7, [r0, r7]
 8003460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003464:	4637      	mov	r7, r6
 8003466:	42bb      	cmp	r3, r7
 8003468:	460e      	mov	r6, r1
 800346a:	d9f4      	bls.n	8003456 <_printf_i+0x11a>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d10b      	bne.n	8003488 <_printf_i+0x14c>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	07de      	lsls	r6, r3, #31
 8003474:	d508      	bpl.n	8003488 <_printf_i+0x14c>
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	6861      	ldr	r1, [r4, #4]
 800347a:	4299      	cmp	r1, r3
 800347c:	bfde      	ittt	le
 800347e:	2330      	movle	r3, #48	; 0x30
 8003480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003488:	1b52      	subs	r2, r2, r5
 800348a:	6122      	str	r2, [r4, #16]
 800348c:	f8cd a000 	str.w	sl, [sp]
 8003490:	464b      	mov	r3, r9
 8003492:	aa03      	add	r2, sp, #12
 8003494:	4621      	mov	r1, r4
 8003496:	4640      	mov	r0, r8
 8003498:	f7ff fee2 	bl	8003260 <_printf_common>
 800349c:	3001      	adds	r0, #1
 800349e:	d14c      	bne.n	800353a <_printf_i+0x1fe>
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	b004      	add	sp, #16
 80034a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034aa:	4835      	ldr	r0, [pc, #212]	; (8003580 <_printf_i+0x244>)
 80034ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80034b0:	6829      	ldr	r1, [r5, #0]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80034b8:	6029      	str	r1, [r5, #0]
 80034ba:	061d      	lsls	r5, r3, #24
 80034bc:	d514      	bpl.n	80034e8 <_printf_i+0x1ac>
 80034be:	07df      	lsls	r7, r3, #31
 80034c0:	bf44      	itt	mi
 80034c2:	f043 0320 	orrmi.w	r3, r3, #32
 80034c6:	6023      	strmi	r3, [r4, #0]
 80034c8:	b91e      	cbnz	r6, 80034d2 <_printf_i+0x196>
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	f023 0320 	bic.w	r3, r3, #32
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	2310      	movs	r3, #16
 80034d4:	e7b0      	b.n	8003438 <_printf_i+0xfc>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	f043 0320 	orr.w	r3, r3, #32
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	2378      	movs	r3, #120	; 0x78
 80034e0:	4828      	ldr	r0, [pc, #160]	; (8003584 <_printf_i+0x248>)
 80034e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034e6:	e7e3      	b.n	80034b0 <_printf_i+0x174>
 80034e8:	0659      	lsls	r1, r3, #25
 80034ea:	bf48      	it	mi
 80034ec:	b2b6      	uxthmi	r6, r6
 80034ee:	e7e6      	b.n	80034be <_printf_i+0x182>
 80034f0:	4615      	mov	r5, r2
 80034f2:	e7bb      	b.n	800346c <_printf_i+0x130>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	6826      	ldr	r6, [r4, #0]
 80034f8:	6961      	ldr	r1, [r4, #20]
 80034fa:	1d18      	adds	r0, r3, #4
 80034fc:	6028      	str	r0, [r5, #0]
 80034fe:	0635      	lsls	r5, r6, #24
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	d501      	bpl.n	8003508 <_printf_i+0x1cc>
 8003504:	6019      	str	r1, [r3, #0]
 8003506:	e002      	b.n	800350e <_printf_i+0x1d2>
 8003508:	0670      	lsls	r0, r6, #25
 800350a:	d5fb      	bpl.n	8003504 <_printf_i+0x1c8>
 800350c:	8019      	strh	r1, [r3, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	6123      	str	r3, [r4, #16]
 8003512:	4615      	mov	r5, r2
 8003514:	e7ba      	b.n	800348c <_printf_i+0x150>
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	1d1a      	adds	r2, r3, #4
 800351a:	602a      	str	r2, [r5, #0]
 800351c:	681d      	ldr	r5, [r3, #0]
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	2100      	movs	r1, #0
 8003522:	4628      	mov	r0, r5
 8003524:	f7fc fe5c 	bl	80001e0 <memchr>
 8003528:	b108      	cbz	r0, 800352e <_printf_i+0x1f2>
 800352a:	1b40      	subs	r0, r0, r5
 800352c:	6060      	str	r0, [r4, #4]
 800352e:	6863      	ldr	r3, [r4, #4]
 8003530:	6123      	str	r3, [r4, #16]
 8003532:	2300      	movs	r3, #0
 8003534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003538:	e7a8      	b.n	800348c <_printf_i+0x150>
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	462a      	mov	r2, r5
 800353e:	4649      	mov	r1, r9
 8003540:	4640      	mov	r0, r8
 8003542:	47d0      	blx	sl
 8003544:	3001      	adds	r0, #1
 8003546:	d0ab      	beq.n	80034a0 <_printf_i+0x164>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	079b      	lsls	r3, r3, #30
 800354c:	d413      	bmi.n	8003576 <_printf_i+0x23a>
 800354e:	68e0      	ldr	r0, [r4, #12]
 8003550:	9b03      	ldr	r3, [sp, #12]
 8003552:	4298      	cmp	r0, r3
 8003554:	bfb8      	it	lt
 8003556:	4618      	movlt	r0, r3
 8003558:	e7a4      	b.n	80034a4 <_printf_i+0x168>
 800355a:	2301      	movs	r3, #1
 800355c:	4632      	mov	r2, r6
 800355e:	4649      	mov	r1, r9
 8003560:	4640      	mov	r0, r8
 8003562:	47d0      	blx	sl
 8003564:	3001      	adds	r0, #1
 8003566:	d09b      	beq.n	80034a0 <_printf_i+0x164>
 8003568:	3501      	adds	r5, #1
 800356a:	68e3      	ldr	r3, [r4, #12]
 800356c:	9903      	ldr	r1, [sp, #12]
 800356e:	1a5b      	subs	r3, r3, r1
 8003570:	42ab      	cmp	r3, r5
 8003572:	dcf2      	bgt.n	800355a <_printf_i+0x21e>
 8003574:	e7eb      	b.n	800354e <_printf_i+0x212>
 8003576:	2500      	movs	r5, #0
 8003578:	f104 0619 	add.w	r6, r4, #25
 800357c:	e7f5      	b.n	800356a <_printf_i+0x22e>
 800357e:	bf00      	nop
 8003580:	08003cc1 	.word	0x08003cc1
 8003584:	08003cd2 	.word	0x08003cd2

08003588 <_sbrk_r>:
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	4d06      	ldr	r5, [pc, #24]	; (80035a4 <_sbrk_r+0x1c>)
 800358c:	2300      	movs	r3, #0
 800358e:	4604      	mov	r4, r0
 8003590:	4608      	mov	r0, r1
 8003592:	602b      	str	r3, [r5, #0]
 8003594:	f7fd fc92 	bl	8000ebc <_sbrk>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d102      	bne.n	80035a2 <_sbrk_r+0x1a>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	b103      	cbz	r3, 80035a2 <_sbrk_r+0x1a>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
 80035a4:	2000011c 	.word	0x2000011c

080035a8 <__sread>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	460c      	mov	r4, r1
 80035ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b0:	f000 fab2 	bl	8003b18 <_read_r>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	bfab      	itete	ge
 80035b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035ba:	89a3      	ldrhlt	r3, [r4, #12]
 80035bc:	181b      	addge	r3, r3, r0
 80035be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035c2:	bfac      	ite	ge
 80035c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80035c6:	81a3      	strhlt	r3, [r4, #12]
 80035c8:	bd10      	pop	{r4, pc}

080035ca <__swrite>:
 80035ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ce:	461f      	mov	r7, r3
 80035d0:	898b      	ldrh	r3, [r1, #12]
 80035d2:	05db      	lsls	r3, r3, #23
 80035d4:	4605      	mov	r5, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	4616      	mov	r6, r2
 80035da:	d505      	bpl.n	80035e8 <__swrite+0x1e>
 80035dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e0:	2302      	movs	r3, #2
 80035e2:	2200      	movs	r2, #0
 80035e4:	f000 f9c8 	bl	8003978 <_lseek_r>
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f2:	81a3      	strh	r3, [r4, #12]
 80035f4:	4632      	mov	r2, r6
 80035f6:	463b      	mov	r3, r7
 80035f8:	4628      	mov	r0, r5
 80035fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035fe:	f000 b869 	b.w	80036d4 <_write_r>

08003602 <__sseek>:
 8003602:	b510      	push	{r4, lr}
 8003604:	460c      	mov	r4, r1
 8003606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800360a:	f000 f9b5 	bl	8003978 <_lseek_r>
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	bf15      	itete	ne
 8003614:	6560      	strne	r0, [r4, #84]	; 0x54
 8003616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800361a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800361e:	81a3      	strheq	r3, [r4, #12]
 8003620:	bf18      	it	ne
 8003622:	81a3      	strhne	r3, [r4, #12]
 8003624:	bd10      	pop	{r4, pc}

08003626 <__sclose>:
 8003626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800362a:	f000 b8d3 	b.w	80037d4 <_close_r>
	...

08003630 <__swbuf_r>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	460e      	mov	r6, r1
 8003634:	4614      	mov	r4, r2
 8003636:	4605      	mov	r5, r0
 8003638:	b118      	cbz	r0, 8003642 <__swbuf_r+0x12>
 800363a:	6983      	ldr	r3, [r0, #24]
 800363c:	b90b      	cbnz	r3, 8003642 <__swbuf_r+0x12>
 800363e:	f7ff fb81 	bl	8002d44 <__sinit>
 8003642:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <__swbuf_r+0x98>)
 8003644:	429c      	cmp	r4, r3
 8003646:	d12b      	bne.n	80036a0 <__swbuf_r+0x70>
 8003648:	686c      	ldr	r4, [r5, #4]
 800364a:	69a3      	ldr	r3, [r4, #24]
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	071a      	lsls	r2, r3, #28
 8003652:	d52f      	bpl.n	80036b4 <__swbuf_r+0x84>
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	b36b      	cbz	r3, 80036b4 <__swbuf_r+0x84>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	1ac0      	subs	r0, r0, r3
 800365e:	6963      	ldr	r3, [r4, #20]
 8003660:	b2f6      	uxtb	r6, r6
 8003662:	4283      	cmp	r3, r0
 8003664:	4637      	mov	r7, r6
 8003666:	dc04      	bgt.n	8003672 <__swbuf_r+0x42>
 8003668:	4621      	mov	r1, r4
 800366a:	4628      	mov	r0, r5
 800366c:	f000 f948 	bl	8003900 <_fflush_r>
 8003670:	bb30      	cbnz	r0, 80036c0 <__swbuf_r+0x90>
 8003672:	68a3      	ldr	r3, [r4, #8]
 8003674:	3b01      	subs	r3, #1
 8003676:	60a3      	str	r3, [r4, #8]
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	6022      	str	r2, [r4, #0]
 800367e:	701e      	strb	r6, [r3, #0]
 8003680:	6963      	ldr	r3, [r4, #20]
 8003682:	3001      	adds	r0, #1
 8003684:	4283      	cmp	r3, r0
 8003686:	d004      	beq.n	8003692 <__swbuf_r+0x62>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	07db      	lsls	r3, r3, #31
 800368c:	d506      	bpl.n	800369c <__swbuf_r+0x6c>
 800368e:	2e0a      	cmp	r6, #10
 8003690:	d104      	bne.n	800369c <__swbuf_r+0x6c>
 8003692:	4621      	mov	r1, r4
 8003694:	4628      	mov	r0, r5
 8003696:	f000 f933 	bl	8003900 <_fflush_r>
 800369a:	b988      	cbnz	r0, 80036c0 <__swbuf_r+0x90>
 800369c:	4638      	mov	r0, r7
 800369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <__swbuf_r+0x9c>)
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d101      	bne.n	80036aa <__swbuf_r+0x7a>
 80036a6:	68ac      	ldr	r4, [r5, #8]
 80036a8:	e7cf      	b.n	800364a <__swbuf_r+0x1a>
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <__swbuf_r+0xa0>)
 80036ac:	429c      	cmp	r4, r3
 80036ae:	bf08      	it	eq
 80036b0:	68ec      	ldreq	r4, [r5, #12]
 80036b2:	e7ca      	b.n	800364a <__swbuf_r+0x1a>
 80036b4:	4621      	mov	r1, r4
 80036b6:	4628      	mov	r0, r5
 80036b8:	f000 f81e 	bl	80036f8 <__swsetup_r>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d0cb      	beq.n	8003658 <__swbuf_r+0x28>
 80036c0:	f04f 37ff 	mov.w	r7, #4294967295
 80036c4:	e7ea      	b.n	800369c <__swbuf_r+0x6c>
 80036c6:	bf00      	nop
 80036c8:	08003c70 	.word	0x08003c70
 80036cc:	08003c90 	.word	0x08003c90
 80036d0:	08003c50 	.word	0x08003c50

080036d4 <_write_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4d07      	ldr	r5, [pc, #28]	; (80036f4 <_write_r+0x20>)
 80036d8:	4604      	mov	r4, r0
 80036da:	4608      	mov	r0, r1
 80036dc:	4611      	mov	r1, r2
 80036de:	2200      	movs	r2, #0
 80036e0:	602a      	str	r2, [r5, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7fd fb99 	bl	8000e1a <_write>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_write_r+0x1e>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_write_r+0x1e>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	2000011c 	.word	0x2000011c

080036f8 <__swsetup_r>:
 80036f8:	4b32      	ldr	r3, [pc, #200]	; (80037c4 <__swsetup_r+0xcc>)
 80036fa:	b570      	push	{r4, r5, r6, lr}
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	4606      	mov	r6, r0
 8003700:	460c      	mov	r4, r1
 8003702:	b125      	cbz	r5, 800370e <__swsetup_r+0x16>
 8003704:	69ab      	ldr	r3, [r5, #24]
 8003706:	b913      	cbnz	r3, 800370e <__swsetup_r+0x16>
 8003708:	4628      	mov	r0, r5
 800370a:	f7ff fb1b 	bl	8002d44 <__sinit>
 800370e:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <__swsetup_r+0xd0>)
 8003710:	429c      	cmp	r4, r3
 8003712:	d10f      	bne.n	8003734 <__swsetup_r+0x3c>
 8003714:	686c      	ldr	r4, [r5, #4]
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800371c:	0719      	lsls	r1, r3, #28
 800371e:	d42c      	bmi.n	800377a <__swsetup_r+0x82>
 8003720:	06dd      	lsls	r5, r3, #27
 8003722:	d411      	bmi.n	8003748 <__swsetup_r+0x50>
 8003724:	2309      	movs	r3, #9
 8003726:	6033      	str	r3, [r6, #0]
 8003728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800372c:	81a3      	strh	r3, [r4, #12]
 800372e:	f04f 30ff 	mov.w	r0, #4294967295
 8003732:	e03e      	b.n	80037b2 <__swsetup_r+0xba>
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <__swsetup_r+0xd4>)
 8003736:	429c      	cmp	r4, r3
 8003738:	d101      	bne.n	800373e <__swsetup_r+0x46>
 800373a:	68ac      	ldr	r4, [r5, #8]
 800373c:	e7eb      	b.n	8003716 <__swsetup_r+0x1e>
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <__swsetup_r+0xd8>)
 8003740:	429c      	cmp	r4, r3
 8003742:	bf08      	it	eq
 8003744:	68ec      	ldreq	r4, [r5, #12]
 8003746:	e7e6      	b.n	8003716 <__swsetup_r+0x1e>
 8003748:	0758      	lsls	r0, r3, #29
 800374a:	d512      	bpl.n	8003772 <__swsetup_r+0x7a>
 800374c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800374e:	b141      	cbz	r1, 8003762 <__swsetup_r+0x6a>
 8003750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003754:	4299      	cmp	r1, r3
 8003756:	d002      	beq.n	800375e <__swsetup_r+0x66>
 8003758:	4630      	mov	r0, r6
 800375a:	f000 f991 	bl	8003a80 <_free_r>
 800375e:	2300      	movs	r3, #0
 8003760:	6363      	str	r3, [r4, #52]	; 0x34
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003768:	81a3      	strh	r3, [r4, #12]
 800376a:	2300      	movs	r3, #0
 800376c:	6063      	str	r3, [r4, #4]
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	f043 0308 	orr.w	r3, r3, #8
 8003778:	81a3      	strh	r3, [r4, #12]
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	b94b      	cbnz	r3, 8003792 <__swsetup_r+0x9a>
 800377e:	89a3      	ldrh	r3, [r4, #12]
 8003780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003788:	d003      	beq.n	8003792 <__swsetup_r+0x9a>
 800378a:	4621      	mov	r1, r4
 800378c:	4630      	mov	r0, r6
 800378e:	f000 f92b 	bl	80039e8 <__smakebuf_r>
 8003792:	89a0      	ldrh	r0, [r4, #12]
 8003794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003798:	f010 0301 	ands.w	r3, r0, #1
 800379c:	d00a      	beq.n	80037b4 <__swsetup_r+0xbc>
 800379e:	2300      	movs	r3, #0
 80037a0:	60a3      	str	r3, [r4, #8]
 80037a2:	6963      	ldr	r3, [r4, #20]
 80037a4:	425b      	negs	r3, r3
 80037a6:	61a3      	str	r3, [r4, #24]
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	b943      	cbnz	r3, 80037be <__swsetup_r+0xc6>
 80037ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037b0:	d1ba      	bne.n	8003728 <__swsetup_r+0x30>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	0781      	lsls	r1, r0, #30
 80037b6:	bf58      	it	pl
 80037b8:	6963      	ldrpl	r3, [r4, #20]
 80037ba:	60a3      	str	r3, [r4, #8]
 80037bc:	e7f4      	b.n	80037a8 <__swsetup_r+0xb0>
 80037be:	2000      	movs	r0, #0
 80037c0:	e7f7      	b.n	80037b2 <__swsetup_r+0xba>
 80037c2:	bf00      	nop
 80037c4:	2000000c 	.word	0x2000000c
 80037c8:	08003c70 	.word	0x08003c70
 80037cc:	08003c90 	.word	0x08003c90
 80037d0:	08003c50 	.word	0x08003c50

080037d4 <_close_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4d06      	ldr	r5, [pc, #24]	; (80037f0 <_close_r+0x1c>)
 80037d8:	2300      	movs	r3, #0
 80037da:	4604      	mov	r4, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	602b      	str	r3, [r5, #0]
 80037e0:	f7fd fb37 	bl	8000e52 <_close>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d102      	bne.n	80037ee <_close_r+0x1a>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	b103      	cbz	r3, 80037ee <_close_r+0x1a>
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	2000011c 	.word	0x2000011c

080037f4 <__sflush_r>:
 80037f4:	898a      	ldrh	r2, [r1, #12]
 80037f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fa:	4605      	mov	r5, r0
 80037fc:	0710      	lsls	r0, r2, #28
 80037fe:	460c      	mov	r4, r1
 8003800:	d458      	bmi.n	80038b4 <__sflush_r+0xc0>
 8003802:	684b      	ldr	r3, [r1, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	dc05      	bgt.n	8003814 <__sflush_r+0x20>
 8003808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	dc02      	bgt.n	8003814 <__sflush_r+0x20>
 800380e:	2000      	movs	r0, #0
 8003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003816:	2e00      	cmp	r6, #0
 8003818:	d0f9      	beq.n	800380e <__sflush_r+0x1a>
 800381a:	2300      	movs	r3, #0
 800381c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003820:	682f      	ldr	r7, [r5, #0]
 8003822:	602b      	str	r3, [r5, #0]
 8003824:	d032      	beq.n	800388c <__sflush_r+0x98>
 8003826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	075a      	lsls	r2, r3, #29
 800382c:	d505      	bpl.n	800383a <__sflush_r+0x46>
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	1ac0      	subs	r0, r0, r3
 8003832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003834:	b10b      	cbz	r3, 800383a <__sflush_r+0x46>
 8003836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003838:	1ac0      	subs	r0, r0, r3
 800383a:	2300      	movs	r3, #0
 800383c:	4602      	mov	r2, r0
 800383e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003840:	6a21      	ldr	r1, [r4, #32]
 8003842:	4628      	mov	r0, r5
 8003844:	47b0      	blx	r6
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	d106      	bne.n	800385a <__sflush_r+0x66>
 800384c:	6829      	ldr	r1, [r5, #0]
 800384e:	291d      	cmp	r1, #29
 8003850:	d82c      	bhi.n	80038ac <__sflush_r+0xb8>
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <__sflush_r+0x108>)
 8003854:	40ca      	lsrs	r2, r1
 8003856:	07d6      	lsls	r6, r2, #31
 8003858:	d528      	bpl.n	80038ac <__sflush_r+0xb8>
 800385a:	2200      	movs	r2, #0
 800385c:	6062      	str	r2, [r4, #4]
 800385e:	04d9      	lsls	r1, r3, #19
 8003860:	6922      	ldr	r2, [r4, #16]
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	d504      	bpl.n	8003870 <__sflush_r+0x7c>
 8003866:	1c42      	adds	r2, r0, #1
 8003868:	d101      	bne.n	800386e <__sflush_r+0x7a>
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	b903      	cbnz	r3, 8003870 <__sflush_r+0x7c>
 800386e:	6560      	str	r0, [r4, #84]	; 0x54
 8003870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003872:	602f      	str	r7, [r5, #0]
 8003874:	2900      	cmp	r1, #0
 8003876:	d0ca      	beq.n	800380e <__sflush_r+0x1a>
 8003878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800387c:	4299      	cmp	r1, r3
 800387e:	d002      	beq.n	8003886 <__sflush_r+0x92>
 8003880:	4628      	mov	r0, r5
 8003882:	f000 f8fd 	bl	8003a80 <_free_r>
 8003886:	2000      	movs	r0, #0
 8003888:	6360      	str	r0, [r4, #52]	; 0x34
 800388a:	e7c1      	b.n	8003810 <__sflush_r+0x1c>
 800388c:	6a21      	ldr	r1, [r4, #32]
 800388e:	2301      	movs	r3, #1
 8003890:	4628      	mov	r0, r5
 8003892:	47b0      	blx	r6
 8003894:	1c41      	adds	r1, r0, #1
 8003896:	d1c7      	bne.n	8003828 <__sflush_r+0x34>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0c4      	beq.n	8003828 <__sflush_r+0x34>
 800389e:	2b1d      	cmp	r3, #29
 80038a0:	d001      	beq.n	80038a6 <__sflush_r+0xb2>
 80038a2:	2b16      	cmp	r3, #22
 80038a4:	d101      	bne.n	80038aa <__sflush_r+0xb6>
 80038a6:	602f      	str	r7, [r5, #0]
 80038a8:	e7b1      	b.n	800380e <__sflush_r+0x1a>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	e7ad      	b.n	8003810 <__sflush_r+0x1c>
 80038b4:	690f      	ldr	r7, [r1, #16]
 80038b6:	2f00      	cmp	r7, #0
 80038b8:	d0a9      	beq.n	800380e <__sflush_r+0x1a>
 80038ba:	0793      	lsls	r3, r2, #30
 80038bc:	680e      	ldr	r6, [r1, #0]
 80038be:	bf08      	it	eq
 80038c0:	694b      	ldreq	r3, [r1, #20]
 80038c2:	600f      	str	r7, [r1, #0]
 80038c4:	bf18      	it	ne
 80038c6:	2300      	movne	r3, #0
 80038c8:	eba6 0807 	sub.w	r8, r6, r7
 80038cc:	608b      	str	r3, [r1, #8]
 80038ce:	f1b8 0f00 	cmp.w	r8, #0
 80038d2:	dd9c      	ble.n	800380e <__sflush_r+0x1a>
 80038d4:	6a21      	ldr	r1, [r4, #32]
 80038d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038d8:	4643      	mov	r3, r8
 80038da:	463a      	mov	r2, r7
 80038dc:	4628      	mov	r0, r5
 80038de:	47b0      	blx	r6
 80038e0:	2800      	cmp	r0, #0
 80038e2:	dc06      	bgt.n	80038f2 <__sflush_r+0xfe>
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	e78e      	b.n	8003810 <__sflush_r+0x1c>
 80038f2:	4407      	add	r7, r0
 80038f4:	eba8 0800 	sub.w	r8, r8, r0
 80038f8:	e7e9      	b.n	80038ce <__sflush_r+0xda>
 80038fa:	bf00      	nop
 80038fc:	20400001 	.word	0x20400001

08003900 <_fflush_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	4605      	mov	r5, r0
 8003906:	460c      	mov	r4, r1
 8003908:	b913      	cbnz	r3, 8003910 <_fflush_r+0x10>
 800390a:	2500      	movs	r5, #0
 800390c:	4628      	mov	r0, r5
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	b118      	cbz	r0, 800391a <_fflush_r+0x1a>
 8003912:	6983      	ldr	r3, [r0, #24]
 8003914:	b90b      	cbnz	r3, 800391a <_fflush_r+0x1a>
 8003916:	f7ff fa15 	bl	8002d44 <__sinit>
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <_fflush_r+0x6c>)
 800391c:	429c      	cmp	r4, r3
 800391e:	d11b      	bne.n	8003958 <_fflush_r+0x58>
 8003920:	686c      	ldr	r4, [r5, #4]
 8003922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ef      	beq.n	800390a <_fflush_r+0xa>
 800392a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800392c:	07d0      	lsls	r0, r2, #31
 800392e:	d404      	bmi.n	800393a <_fflush_r+0x3a>
 8003930:	0599      	lsls	r1, r3, #22
 8003932:	d402      	bmi.n	800393a <_fflush_r+0x3a>
 8003934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003936:	f7ff faa3 	bl	8002e80 <__retarget_lock_acquire_recursive>
 800393a:	4628      	mov	r0, r5
 800393c:	4621      	mov	r1, r4
 800393e:	f7ff ff59 	bl	80037f4 <__sflush_r>
 8003942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003944:	07da      	lsls	r2, r3, #31
 8003946:	4605      	mov	r5, r0
 8003948:	d4e0      	bmi.n	800390c <_fflush_r+0xc>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	059b      	lsls	r3, r3, #22
 800394e:	d4dd      	bmi.n	800390c <_fflush_r+0xc>
 8003950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003952:	f7ff fa96 	bl	8002e82 <__retarget_lock_release_recursive>
 8003956:	e7d9      	b.n	800390c <_fflush_r+0xc>
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <_fflush_r+0x70>)
 800395a:	429c      	cmp	r4, r3
 800395c:	d101      	bne.n	8003962 <_fflush_r+0x62>
 800395e:	68ac      	ldr	r4, [r5, #8]
 8003960:	e7df      	b.n	8003922 <_fflush_r+0x22>
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <_fflush_r+0x74>)
 8003964:	429c      	cmp	r4, r3
 8003966:	bf08      	it	eq
 8003968:	68ec      	ldreq	r4, [r5, #12]
 800396a:	e7da      	b.n	8003922 <_fflush_r+0x22>
 800396c:	08003c70 	.word	0x08003c70
 8003970:	08003c90 	.word	0x08003c90
 8003974:	08003c50 	.word	0x08003c50

08003978 <_lseek_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d07      	ldr	r5, [pc, #28]	; (8003998 <_lseek_r+0x20>)
 800397c:	4604      	mov	r4, r0
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	2200      	movs	r2, #0
 8003984:	602a      	str	r2, [r5, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fd fa8a 	bl	8000ea0 <_lseek>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_lseek_r+0x1e>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_lseek_r+0x1e>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	2000011c 	.word	0x2000011c

0800399c <__swhatbuf_r>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	460e      	mov	r6, r1
 80039a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a4:	2900      	cmp	r1, #0
 80039a6:	b096      	sub	sp, #88	; 0x58
 80039a8:	4614      	mov	r4, r2
 80039aa:	461d      	mov	r5, r3
 80039ac:	da08      	bge.n	80039c0 <__swhatbuf_r+0x24>
 80039ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	602a      	str	r2, [r5, #0]
 80039b6:	061a      	lsls	r2, r3, #24
 80039b8:	d410      	bmi.n	80039dc <__swhatbuf_r+0x40>
 80039ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039be:	e00e      	b.n	80039de <__swhatbuf_r+0x42>
 80039c0:	466a      	mov	r2, sp
 80039c2:	f000 f8bb 	bl	8003b3c <_fstat_r>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	dbf1      	blt.n	80039ae <__swhatbuf_r+0x12>
 80039ca:	9a01      	ldr	r2, [sp, #4]
 80039cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039d4:	425a      	negs	r2, r3
 80039d6:	415a      	adcs	r2, r3
 80039d8:	602a      	str	r2, [r5, #0]
 80039da:	e7ee      	b.n	80039ba <__swhatbuf_r+0x1e>
 80039dc:	2340      	movs	r3, #64	; 0x40
 80039de:	2000      	movs	r0, #0
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	b016      	add	sp, #88	; 0x58
 80039e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080039e8 <__smakebuf_r>:
 80039e8:	898b      	ldrh	r3, [r1, #12]
 80039ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039ec:	079d      	lsls	r5, r3, #30
 80039ee:	4606      	mov	r6, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	d507      	bpl.n	8003a04 <__smakebuf_r+0x1c>
 80039f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	6123      	str	r3, [r4, #16]
 80039fc:	2301      	movs	r3, #1
 80039fe:	6163      	str	r3, [r4, #20]
 8003a00:	b002      	add	sp, #8
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	ab01      	add	r3, sp, #4
 8003a06:	466a      	mov	r2, sp
 8003a08:	f7ff ffc8 	bl	800399c <__swhatbuf_r>
 8003a0c:	9900      	ldr	r1, [sp, #0]
 8003a0e:	4605      	mov	r5, r0
 8003a10:	4630      	mov	r0, r6
 8003a12:	f7ff fa57 	bl	8002ec4 <_malloc_r>
 8003a16:	b948      	cbnz	r0, 8003a2c <__smakebuf_r+0x44>
 8003a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a1c:	059a      	lsls	r2, r3, #22
 8003a1e:	d4ef      	bmi.n	8003a00 <__smakebuf_r+0x18>
 8003a20:	f023 0303 	bic.w	r3, r3, #3
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	e7e3      	b.n	80039f4 <__smakebuf_r+0xc>
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <__smakebuf_r+0x7c>)
 8003a2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	6020      	str	r0, [r4, #0]
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	9b00      	ldr	r3, [sp, #0]
 8003a3c:	6163      	str	r3, [r4, #20]
 8003a3e:	9b01      	ldr	r3, [sp, #4]
 8003a40:	6120      	str	r0, [r4, #16]
 8003a42:	b15b      	cbz	r3, 8003a5c <__smakebuf_r+0x74>
 8003a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 f889 	bl	8003b60 <_isatty_r>
 8003a4e:	b128      	cbz	r0, 8003a5c <__smakebuf_r+0x74>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	89a0      	ldrh	r0, [r4, #12]
 8003a5e:	4305      	orrs	r5, r0
 8003a60:	81a5      	strh	r5, [r4, #12]
 8003a62:	e7cd      	b.n	8003a00 <__smakebuf_r+0x18>
 8003a64:	08002cdd 	.word	0x08002cdd

08003a68 <__malloc_lock>:
 8003a68:	4801      	ldr	r0, [pc, #4]	; (8003a70 <__malloc_lock+0x8>)
 8003a6a:	f7ff ba09 	b.w	8002e80 <__retarget_lock_acquire_recursive>
 8003a6e:	bf00      	nop
 8003a70:	20000110 	.word	0x20000110

08003a74 <__malloc_unlock>:
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <__malloc_unlock+0x8>)
 8003a76:	f7ff ba04 	b.w	8002e82 <__retarget_lock_release_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	20000110 	.word	0x20000110

08003a80 <_free_r>:
 8003a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d044      	beq.n	8003b10 <_free_r+0x90>
 8003a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a8a:	9001      	str	r0, [sp, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a92:	bfb8      	it	lt
 8003a94:	18e4      	addlt	r4, r4, r3
 8003a96:	f7ff ffe7 	bl	8003a68 <__malloc_lock>
 8003a9a:	4a1e      	ldr	r2, [pc, #120]	; (8003b14 <_free_r+0x94>)
 8003a9c:	9801      	ldr	r0, [sp, #4]
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	b933      	cbnz	r3, 8003ab0 <_free_r+0x30>
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	6014      	str	r4, [r2, #0]
 8003aa6:	b003      	add	sp, #12
 8003aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aac:	f7ff bfe2 	b.w	8003a74 <__malloc_unlock>
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	d908      	bls.n	8003ac6 <_free_r+0x46>
 8003ab4:	6825      	ldr	r5, [r4, #0]
 8003ab6:	1961      	adds	r1, r4, r5
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	bf01      	itttt	eq
 8003abc:	6819      	ldreq	r1, [r3, #0]
 8003abe:	685b      	ldreq	r3, [r3, #4]
 8003ac0:	1949      	addeq	r1, r1, r5
 8003ac2:	6021      	streq	r1, [r4, #0]
 8003ac4:	e7ed      	b.n	8003aa2 <_free_r+0x22>
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	b10b      	cbz	r3, 8003ad0 <_free_r+0x50>
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d9fa      	bls.n	8003ac6 <_free_r+0x46>
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	1855      	adds	r5, r2, r1
 8003ad4:	42a5      	cmp	r5, r4
 8003ad6:	d10b      	bne.n	8003af0 <_free_r+0x70>
 8003ad8:	6824      	ldr	r4, [r4, #0]
 8003ada:	4421      	add	r1, r4
 8003adc:	1854      	adds	r4, r2, r1
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	d1e0      	bne.n	8003aa6 <_free_r+0x26>
 8003ae4:	681c      	ldr	r4, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	6053      	str	r3, [r2, #4]
 8003aea:	4421      	add	r1, r4
 8003aec:	6011      	str	r1, [r2, #0]
 8003aee:	e7da      	b.n	8003aa6 <_free_r+0x26>
 8003af0:	d902      	bls.n	8003af8 <_free_r+0x78>
 8003af2:	230c      	movs	r3, #12
 8003af4:	6003      	str	r3, [r0, #0]
 8003af6:	e7d6      	b.n	8003aa6 <_free_r+0x26>
 8003af8:	6825      	ldr	r5, [r4, #0]
 8003afa:	1961      	adds	r1, r4, r5
 8003afc:	428b      	cmp	r3, r1
 8003afe:	bf04      	itt	eq
 8003b00:	6819      	ldreq	r1, [r3, #0]
 8003b02:	685b      	ldreq	r3, [r3, #4]
 8003b04:	6063      	str	r3, [r4, #4]
 8003b06:	bf04      	itt	eq
 8003b08:	1949      	addeq	r1, r1, r5
 8003b0a:	6021      	streq	r1, [r4, #0]
 8003b0c:	6054      	str	r4, [r2, #4]
 8003b0e:	e7ca      	b.n	8003aa6 <_free_r+0x26>
 8003b10:	b003      	add	sp, #12
 8003b12:	bd30      	pop	{r4, r5, pc}
 8003b14:	20000114 	.word	0x20000114

08003b18 <_read_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4d07      	ldr	r5, [pc, #28]	; (8003b38 <_read_r+0x20>)
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	4608      	mov	r0, r1
 8003b20:	4611      	mov	r1, r2
 8003b22:	2200      	movs	r2, #0
 8003b24:	602a      	str	r2, [r5, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f7fd f95a 	bl	8000de0 <_read>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d102      	bne.n	8003b36 <_read_r+0x1e>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	b103      	cbz	r3, 8003b36 <_read_r+0x1e>
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	2000011c 	.word	0x2000011c

08003b3c <_fstat_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4d07      	ldr	r5, [pc, #28]	; (8003b5c <_fstat_r+0x20>)
 8003b40:	2300      	movs	r3, #0
 8003b42:	4604      	mov	r4, r0
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	602b      	str	r3, [r5, #0]
 8003b4a:	f7fd f98e 	bl	8000e6a <_fstat>
 8003b4e:	1c43      	adds	r3, r0, #1
 8003b50:	d102      	bne.n	8003b58 <_fstat_r+0x1c>
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	b103      	cbz	r3, 8003b58 <_fstat_r+0x1c>
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	bd38      	pop	{r3, r4, r5, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000011c 	.word	0x2000011c

08003b60 <_isatty_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4d06      	ldr	r5, [pc, #24]	; (8003b7c <_isatty_r+0x1c>)
 8003b64:	2300      	movs	r3, #0
 8003b66:	4604      	mov	r4, r0
 8003b68:	4608      	mov	r0, r1
 8003b6a:	602b      	str	r3, [r5, #0]
 8003b6c:	f7fd f98d 	bl	8000e8a <_isatty>
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	d102      	bne.n	8003b7a <_isatty_r+0x1a>
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	b103      	cbz	r3, 8003b7a <_isatty_r+0x1a>
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	2000011c 	.word	0x2000011c

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
